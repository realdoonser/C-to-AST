Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDEQ
    DIVEQ
    GEQ
    LEQ
    LOGAND
    LOGEQ
    LOGNEQ
    LOGOR
    LSHIFT
    MODEQ
    MULTEQ
    RSHIFT
    SUBEQ

Grammar

Rule 0     S' -> program
Rule 1     program -> include program
Rule 2     program -> external_decl program
Rule 3     program -> include
Rule 4     program -> external_decl
Rule 5     include -> INCLUDE
Rule 6     external_decl -> decl ;
Rule 7     external_decl -> func_def
Rule 8     external_decl -> ;
Rule 9     decl -> usual_dec
Rule 10    decl -> new_type_dec
Rule 11    usual_dec -> type declarators
Rule 12    declarators -> declarator_1 , declarators
Rule 13    declarators -> declarator_1
Rule 14    declarator_1 -> declarator_2
Rule 15    declarator_1 -> declarator_2 = initializer
Rule 16    declarator_2 -> ID
Rule 17    declarator_2 -> ID ( )
Rule 18    declarator_2 -> ID [ ]
Rule 19    declarator_2 -> ID [ expression ]
Rule 20    initializer -> expression
Rule 21    initializer -> { expressions }
Rule 22    new_type_dec -> new_type ID { new_type_params }
Rule 23    new_type_dec -> new_type ID { new_type_params } declarators
Rule 24    new_type_dec -> new_type ID declarators
Rule 25    new_type -> STRUCT
Rule 26    new_type -> CLASS
Rule 27    new_type_params -> new_type_param new_type_params
Rule 28    new_type_params -> new_type_param
Rule 29    new_type_param -> type declarators ;
Rule 30    func_def -> type ID ( params ) { statements }
Rule 31    func_def -> type ID ( ) { statements }
Rule 32    func_def -> type ID ( params ) { }
Rule 33    func_def -> type ID ( ) { }
Rule 34    params -> param , params
Rule 35    params -> param
Rule 36    param -> type declarator_2
Rule 37    statements -> statement statements
Rule 38    statements -> statement
Rule 39    statement -> expression ;
Rule 40    statement -> decl ;
Rule 41    statement -> conditional
Rule 42    statement -> iteration
Rule 43    statement -> jump ;
Rule 44    statement -> ;
Rule 45    conditional -> IF ( expression ) { stats_or_null }
Rule 46    conditional -> IF ( expression ) { stats_or_null } ELSE conditional
Rule 47    conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }
Rule 48    statement -> { stats_or_null }
Rule 49    stats_or_null -> statements
Rule 50    stats_or_null -> empty
Rule 51    iteration -> WHILE ( expression ) { stats_or_null }
Rule 52    iteration -> DO { stats_or_null } WHILE ( expression ) ;
Rule 53    iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
Rule 54    expr_or_null -> expression
Rule 55    expr_or_null -> empty
Rule 56    expr_or_null_or_init -> expr_or_null
Rule 57    expr_or_null_or_init -> usual_dec
Rule 58    jump -> BREAK
Rule 59    jump -> CONTINUE
Rule 60    jump -> RETURN
Rule 61    jump -> RETURN expression
Rule 62    expressions -> expression , expressions
Rule 63    expressions -> expression
Rule 64    expression -> tern_expr
Rule 65    tern_expr -> tern_expr ? tern_expr : tern_expr
Rule 66    tern_expr -> bin_expr
Rule 67    bin_expr -> bin_expr + bin_expr
Rule 68    bin_expr -> bin_expr - bin_expr
Rule 69    bin_expr -> bin_expr * bin_expr
Rule 70    bin_expr -> bin_expr / bin_expr
Rule 71    bin_expr -> bin_expr ^ bin_expr
Rule 72    bin_expr -> bin_expr > bin_expr
Rule 73    bin_expr -> bin_expr < bin_expr
Rule 74    bin_expr -> pre_unary_expr
Rule 75    pre_unary_expr -> PLUSPLUS pre_unary_expr
Rule 76    pre_unary_expr -> MINUSMINUS pre_unary_expr
Rule 77    pre_unary_expr -> + pre_unary_expr
Rule 78    pre_unary_expr -> - pre_unary_expr
Rule 79    pre_unary_expr -> ! pre_unary_expr
Rule 80    pre_unary_expr -> post_unary_expr
Rule 81    post_unary_expr -> post_unary_expr [ expression ]
Rule 82    post_unary_expr -> post_unary_expr ( )
Rule 83    post_unary_expr -> post_unary_expr ( expressions )
Rule 84    post_unary_expr -> post_unary_expr PLUSPLUS
Rule 85    post_unary_expr -> post_unary_expr MINUSMINUS
Rule 86    post_unary_expr -> post_unary_expr . ID
Rule 87    post_unary_expr -> post_unary_expr RARROW ID
Rule 88    post_unary_expr -> element
Rule 89    element -> ID
Rule 90    element -> NUMBER
Rule 91    element -> CHR
Rule 92    element -> STR
Rule 93    element -> ( expression )
Rule 94    type -> VOID
Rule 95    type -> CHAR
Rule 96    type -> SHORT
Rule 97    type -> INT
Rule 98    type -> LONG
Rule 99    type -> FLOAT
Rule 100   type -> DOUBLE
Rule 101   empty -> <empty>

Terminals, with rules where they appear

!                    : 79
(                    : 17 30 31 32 33 45 46 47 51 52 53 82 83 93
)                    : 17 30 31 32 33 45 46 47 51 52 53 82 83 93
*                    : 69
+                    : 67 77
,                    : 12 34 62
-                    : 68 78
.                    : 86
/                    : 70
:                    : 65
;                    : 6 8 29 39 40 43 44 52 53 53
<                    : 73
=                    : 15
>                    : 72
?                    : 65
ADDEQ                : 
BREAK                : 58
CHAR                 : 95
CHR                  : 91
CLASS                : 26
CONTINUE             : 59
DIVEQ                : 
DO                   : 52
DOUBLE               : 100
ELSE                 : 46 47
FLOAT                : 99
FOR                  : 53
GEQ                  : 
ID                   : 16 17 18 19 22 23 24 30 31 32 33 86 87 89
IF                   : 45 46 47
INCLUDE              : 5
INT                  : 97
LEQ                  : 
LOGAND               : 
LOGEQ                : 
LOGNEQ               : 
LOGOR                : 
LONG                 : 98
LSHIFT               : 
MINUSMINUS           : 76 85
MODEQ                : 
MULTEQ               : 
NUMBER               : 90
PLUSPLUS             : 75 84
RARROW               : 87
RETURN               : 60 61
RSHIFT               : 
SHORT                : 96
STR                  : 92
STRUCT               : 25
SUBEQ                : 
VOID                 : 94
WHILE                : 51 52
[                    : 18 19 81
]                    : 18 19 81
^                    : 71
error                : 
{                    : 21 22 23 30 31 32 33 45 46 47 47 48 51 52 53
}                    : 21 22 23 30 31 32 33 45 46 47 47 48 51 52 53

Nonterminals, with rules where they appear

bin_expr             : 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73
conditional          : 41 46
decl                 : 6 40
declarator_1         : 12 13
declarator_2         : 14 15 36
declarators          : 11 12 23 24 29
element              : 88
empty                : 50 55
expr_or_null         : 53 53 56
expr_or_null_or_init : 53
expression           : 19 20 39 45 46 47 51 52 54 61 62 63 81 93
expressions          : 21 62 83
external_decl        : 2 4
func_def             : 7
include              : 1 3
initializer          : 15
iteration            : 42
jump                 : 43
new_type             : 22 23 24
new_type_dec         : 10
new_type_param       : 27 28
new_type_params      : 22 23 27
param                : 34 35
params               : 30 32 34
post_unary_expr      : 80 81 82 83 84 85 86 87
pre_unary_expr       : 74 75 76 77 78 79
program              : 1 2 0
statement            : 37 38
statements           : 30 31 37 49
stats_or_null        : 45 46 47 47 48 51 52 53
tern_expr            : 64 65 65 65
type                 : 11 29 30 31 32 33 36
usual_dec            : 9 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    program                        shift and go to state 1
    include                        shift and go to state 2
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> include . program
    (3) program -> include .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 3 (program -> include .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    include                        shift and go to state 2
    program                        shift and go to state 21
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 3

    (2) program -> external_decl . program
    (4) program -> external_decl .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 4 (program -> external_decl .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    external_decl                  shift and go to state 3
    program                        shift and go to state 22
    include                        shift and go to state 2
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 4

    (5) include -> INCLUDE .

    INCLUDE         reduce using rule 5 (include -> INCLUDE .)
    ;               reduce using rule 5 (include -> INCLUDE .)
    VOID            reduce using rule 5 (include -> INCLUDE .)
    CHAR            reduce using rule 5 (include -> INCLUDE .)
    SHORT           reduce using rule 5 (include -> INCLUDE .)
    INT             reduce using rule 5 (include -> INCLUDE .)
    LONG            reduce using rule 5 (include -> INCLUDE .)
    FLOAT           reduce using rule 5 (include -> INCLUDE .)
    DOUBLE          reduce using rule 5 (include -> INCLUDE .)
    STRUCT          reduce using rule 5 (include -> INCLUDE .)
    CLASS           reduce using rule 5 (include -> INCLUDE .)
    $end            reduce using rule 5 (include -> INCLUDE .)


state 5

    (6) external_decl -> decl . ;

    ;               shift and go to state 23


state 6

    (8) external_decl -> ; .

    INCLUDE         reduce using rule 8 (external_decl -> ; .)
    ;               reduce using rule 8 (external_decl -> ; .)
    VOID            reduce using rule 8 (external_decl -> ; .)
    CHAR            reduce using rule 8 (external_decl -> ; .)
    SHORT           reduce using rule 8 (external_decl -> ; .)
    INT             reduce using rule 8 (external_decl -> ; .)
    LONG            reduce using rule 8 (external_decl -> ; .)
    FLOAT           reduce using rule 8 (external_decl -> ; .)
    DOUBLE          reduce using rule 8 (external_decl -> ; .)
    STRUCT          reduce using rule 8 (external_decl -> ; .)
    CLASS           reduce using rule 8 (external_decl -> ; .)
    $end            reduce using rule 8 (external_decl -> ; .)


state 7

    (7) external_decl -> func_def .

    INCLUDE         reduce using rule 7 (external_decl -> func_def .)
    ;               reduce using rule 7 (external_decl -> func_def .)
    VOID            reduce using rule 7 (external_decl -> func_def .)
    CHAR            reduce using rule 7 (external_decl -> func_def .)
    SHORT           reduce using rule 7 (external_decl -> func_def .)
    INT             reduce using rule 7 (external_decl -> func_def .)
    LONG            reduce using rule 7 (external_decl -> func_def .)
    FLOAT           reduce using rule 7 (external_decl -> func_def .)
    DOUBLE          reduce using rule 7 (external_decl -> func_def .)
    STRUCT          reduce using rule 7 (external_decl -> func_def .)
    CLASS           reduce using rule 7 (external_decl -> func_def .)
    $end            reduce using rule 7 (external_decl -> func_def .)


state 8

    (9) decl -> usual_dec .

    ;               reduce using rule 9 (decl -> usual_dec .)


state 9

    (10) decl -> new_type_dec .

    ;               reduce using rule 10 (decl -> new_type_dec .)


state 10

    (30) func_def -> type . ID ( params ) { statements }
    (31) func_def -> type . ID ( ) { statements }
    (32) func_def -> type . ID ( params ) { }
    (33) func_def -> type . ID ( ) { }
    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 24

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 11

    (22) new_type_dec -> new_type . ID { new_type_params }
    (23) new_type_dec -> new_type . ID { new_type_params } declarators
    (24) new_type_dec -> new_type . ID declarators

    ID              shift and go to state 28


state 12

    (94) type -> VOID .

    ID              reduce using rule 94 (type -> VOID .)


state 13

    (95) type -> CHAR .

    ID              reduce using rule 95 (type -> CHAR .)


state 14

    (96) type -> SHORT .

    ID              reduce using rule 96 (type -> SHORT .)


state 15

    (97) type -> INT .

    ID              reduce using rule 97 (type -> INT .)


state 16

    (98) type -> LONG .

    ID              reduce using rule 98 (type -> LONG .)


state 17

    (99) type -> FLOAT .

    ID              reduce using rule 99 (type -> FLOAT .)


state 18

    (100) type -> DOUBLE .

    ID              reduce using rule 100 (type -> DOUBLE .)


state 19

    (25) new_type -> STRUCT .

    ID              reduce using rule 25 (new_type -> STRUCT .)


state 20

    (26) new_type -> CLASS .

    ID              reduce using rule 26 (new_type -> CLASS .)


state 21

    (1) program -> include program .

    $end            reduce using rule 1 (program -> include program .)


state 22

    (2) program -> external_decl program .

    $end            reduce using rule 2 (program -> external_decl program .)


state 23

    (6) external_decl -> decl ; .

    INCLUDE         reduce using rule 6 (external_decl -> decl ; .)
    ;               reduce using rule 6 (external_decl -> decl ; .)
    VOID            reduce using rule 6 (external_decl -> decl ; .)
    CHAR            reduce using rule 6 (external_decl -> decl ; .)
    SHORT           reduce using rule 6 (external_decl -> decl ; .)
    INT             reduce using rule 6 (external_decl -> decl ; .)
    LONG            reduce using rule 6 (external_decl -> decl ; .)
    FLOAT           reduce using rule 6 (external_decl -> decl ; .)
    DOUBLE          reduce using rule 6 (external_decl -> decl ; .)
    STRUCT          reduce using rule 6 (external_decl -> decl ; .)
    CLASS           reduce using rule 6 (external_decl -> decl ; .)
    $end            reduce using rule 6 (external_decl -> decl ; .)


state 24

    (30) func_def -> type ID . ( params ) { statements }
    (31) func_def -> type ID . ( ) { statements }
    (32) func_def -> type ID . ( params ) { }
    (33) func_def -> type ID . ( ) { }
    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    (               shift and go to state 29
    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    [               shift and go to state 30


state 25

    (11) usual_dec -> type declarators .

    ;               reduce using rule 11 (usual_dec -> type declarators .)


state 26

    (12) declarators -> declarator_1 . , declarators
    (13) declarators -> declarator_1 .

    ,               shift and go to state 31
    ;               reduce using rule 13 (declarators -> declarator_1 .)


state 27

    (14) declarator_1 -> declarator_2 .
    (15) declarator_1 -> declarator_2 . = initializer

    ,               reduce using rule 14 (declarator_1 -> declarator_2 .)
    ;               reduce using rule 14 (declarator_1 -> declarator_2 .)
    =               shift and go to state 32


state 28

    (22) new_type_dec -> new_type ID . { new_type_params }
    (23) new_type_dec -> new_type ID . { new_type_params } declarators
    (24) new_type_dec -> new_type ID . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    {               shift and go to state 34
    ID              shift and go to state 33

    declarators                    shift and go to state 35
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 29

    (30) func_def -> type ID ( . params ) { statements }
    (31) func_def -> type ID ( . ) { statements }
    (32) func_def -> type ID ( . params ) { }
    (33) func_def -> type ID ( . ) { }
    (17) declarator_2 -> ID ( . )
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE

    )               shift and go to state 38
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    type                           shift and go to state 36
    params                         shift and go to state 37
    param                          shift and go to state 39

state 30

    (18) declarator_2 -> ID [ . ]
    (19) declarator_2 -> ID [ . expression ]
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    ]               shift and go to state 41
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 42
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 31

    (12) declarators -> declarator_1 , . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_1                   shift and go to state 26
    declarators                    shift and go to state 57
    declarator_2                   shift and go to state 27

state 32

    (15) declarator_1 -> declarator_2 = . initializer
    (20) initializer -> . expression
    (21) initializer -> . { expressions }
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    {               shift and go to state 60
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    initializer                    shift and go to state 58
    expression                     shift and go to state 59
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 33

    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    )               reduce using rule 16 (declarator_2 -> ID .)
    (               shift and go to state 61
    [               shift and go to state 30


state 34

    (22) new_type_dec -> new_type ID { . new_type_params }
    (23) new_type_dec -> new_type ID { . new_type_params } declarators
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_params                shift and go to state 62
    new_type_param                 shift and go to state 63
    type                           shift and go to state 64

state 35

    (24) new_type_dec -> new_type ID declarators .

    ;               reduce using rule 24 (new_type_dec -> new_type ID declarators .)


state 36

    (36) param -> type . declarator_2
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_2                   shift and go to state 65

state 37

    (30) func_def -> type ID ( params . ) { statements }
    (32) func_def -> type ID ( params . ) { }

    )               shift and go to state 66


state 38

    (31) func_def -> type ID ( ) . { statements }
    (33) func_def -> type ID ( ) . { }
    (17) declarator_2 -> ID ( ) .

    {               shift and go to state 67
    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 39

    (34) params -> param . , params
    (35) params -> param .

    ,               shift and go to state 68
    )               reduce using rule 35 (params -> param .)


state 40

    (89) element -> ID .

    [               reduce using rule 89 (element -> ID .)
    (               reduce using rule 89 (element -> ID .)
    PLUSPLUS        reduce using rule 89 (element -> ID .)
    MINUSMINUS      reduce using rule 89 (element -> ID .)
    .               reduce using rule 89 (element -> ID .)
    RARROW          reduce using rule 89 (element -> ID .)
    +               reduce using rule 89 (element -> ID .)
    -               reduce using rule 89 (element -> ID .)
    *               reduce using rule 89 (element -> ID .)
    /               reduce using rule 89 (element -> ID .)
    ^               reduce using rule 89 (element -> ID .)
    >               reduce using rule 89 (element -> ID .)
    <               reduce using rule 89 (element -> ID .)
    ?               reduce using rule 89 (element -> ID .)
    ]               reduce using rule 89 (element -> ID .)
    ,               reduce using rule 89 (element -> ID .)
    ;               reduce using rule 89 (element -> ID .)
    )               reduce using rule 89 (element -> ID .)
    }               reduce using rule 89 (element -> ID .)
    :               reduce using rule 89 (element -> ID .)


state 41

    (18) declarator_2 -> ID [ ] .

    =               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ,               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ;               reduce using rule 18 (declarator_2 -> ID [ ] .)
    )               reduce using rule 18 (declarator_2 -> ID [ ] .)


state 42

    (19) declarator_2 -> ID [ expression . ]

    ]               shift and go to state 69


state 43

    (64) expression -> tern_expr .
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ]               reduce using rule 64 (expression -> tern_expr .)
    ,               reduce using rule 64 (expression -> tern_expr .)
    ;               reduce using rule 64 (expression -> tern_expr .)
    )               reduce using rule 64 (expression -> tern_expr .)
    }               reduce using rule 64 (expression -> tern_expr .)
    ?               shift and go to state 70


state 44

    (66) tern_expr -> bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    ?               reduce using rule 66 (tern_expr -> bin_expr .)
    ]               reduce using rule 66 (tern_expr -> bin_expr .)
    ,               reduce using rule 66 (tern_expr -> bin_expr .)
    ;               reduce using rule 66 (tern_expr -> bin_expr .)
    )               reduce using rule 66 (tern_expr -> bin_expr .)
    }               reduce using rule 66 (tern_expr -> bin_expr .)
    :               reduce using rule 66 (tern_expr -> bin_expr .)
    +               shift and go to state 71
    -               shift and go to state 72
    *               shift and go to state 73
    /               shift and go to state 74
    ^               shift and go to state 75
    >               shift and go to state 76
    <               shift and go to state 77


state 45

    (77) pre_unary_expr -> + . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    pre_unary_expr                 shift and go to state 78
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 46

    (78) pre_unary_expr -> - . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    pre_unary_expr                 shift and go to state 79
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 47

    (74) bin_expr -> pre_unary_expr .

    +               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    -               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    *               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    /               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    ^               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    >               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    <               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    ?               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    ]               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    ,               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    ;               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    )               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    }               reduce using rule 74 (bin_expr -> pre_unary_expr .)
    :               reduce using rule 74 (bin_expr -> pre_unary_expr .)


state 48

    (75) pre_unary_expr -> PLUSPLUS . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    pre_unary_expr                 shift and go to state 80
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 49

    (76) pre_unary_expr -> MINUSMINUS . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    pre_unary_expr                 shift and go to state 81
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 50

    (79) pre_unary_expr -> ! . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    pre_unary_expr                 shift and go to state 82
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 51

    (80) pre_unary_expr -> post_unary_expr .
    (81) post_unary_expr -> post_unary_expr . [ expression ]
    (82) post_unary_expr -> post_unary_expr . ( )
    (83) post_unary_expr -> post_unary_expr . ( expressions )
    (84) post_unary_expr -> post_unary_expr . PLUSPLUS
    (85) post_unary_expr -> post_unary_expr . MINUSMINUS
    (86) post_unary_expr -> post_unary_expr . . ID
    (87) post_unary_expr -> post_unary_expr . RARROW ID

    +               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    -               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    *               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    /               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    ^               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    >               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    <               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    ?               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    ]               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    ,               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    ;               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    )               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    }               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    :               reduce using rule 80 (pre_unary_expr -> post_unary_expr .)
    [               shift and go to state 83
    (               shift and go to state 84
    PLUSPLUS        shift and go to state 85
    MINUSMINUS      shift and go to state 86
    .               shift and go to state 87
    RARROW          shift and go to state 88


state 52

    (93) element -> ( . expression )
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 89
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 53

    (88) post_unary_expr -> element .

    [               reduce using rule 88 (post_unary_expr -> element .)
    (               reduce using rule 88 (post_unary_expr -> element .)
    PLUSPLUS        reduce using rule 88 (post_unary_expr -> element .)
    MINUSMINUS      reduce using rule 88 (post_unary_expr -> element .)
    .               reduce using rule 88 (post_unary_expr -> element .)
    RARROW          reduce using rule 88 (post_unary_expr -> element .)
    +               reduce using rule 88 (post_unary_expr -> element .)
    -               reduce using rule 88 (post_unary_expr -> element .)
    *               reduce using rule 88 (post_unary_expr -> element .)
    /               reduce using rule 88 (post_unary_expr -> element .)
    ^               reduce using rule 88 (post_unary_expr -> element .)
    >               reduce using rule 88 (post_unary_expr -> element .)
    <               reduce using rule 88 (post_unary_expr -> element .)
    ?               reduce using rule 88 (post_unary_expr -> element .)
    ]               reduce using rule 88 (post_unary_expr -> element .)
    ,               reduce using rule 88 (post_unary_expr -> element .)
    ;               reduce using rule 88 (post_unary_expr -> element .)
    )               reduce using rule 88 (post_unary_expr -> element .)
    }               reduce using rule 88 (post_unary_expr -> element .)
    :               reduce using rule 88 (post_unary_expr -> element .)


state 54

    (90) element -> NUMBER .

    [               reduce using rule 90 (element -> NUMBER .)
    (               reduce using rule 90 (element -> NUMBER .)
    PLUSPLUS        reduce using rule 90 (element -> NUMBER .)
    MINUSMINUS      reduce using rule 90 (element -> NUMBER .)
    .               reduce using rule 90 (element -> NUMBER .)
    RARROW          reduce using rule 90 (element -> NUMBER .)
    +               reduce using rule 90 (element -> NUMBER .)
    -               reduce using rule 90 (element -> NUMBER .)
    *               reduce using rule 90 (element -> NUMBER .)
    /               reduce using rule 90 (element -> NUMBER .)
    ^               reduce using rule 90 (element -> NUMBER .)
    >               reduce using rule 90 (element -> NUMBER .)
    <               reduce using rule 90 (element -> NUMBER .)
    ?               reduce using rule 90 (element -> NUMBER .)
    ]               reduce using rule 90 (element -> NUMBER .)
    ,               reduce using rule 90 (element -> NUMBER .)
    ;               reduce using rule 90 (element -> NUMBER .)
    )               reduce using rule 90 (element -> NUMBER .)
    }               reduce using rule 90 (element -> NUMBER .)
    :               reduce using rule 90 (element -> NUMBER .)


state 55

    (91) element -> CHR .

    [               reduce using rule 91 (element -> CHR .)
    (               reduce using rule 91 (element -> CHR .)
    PLUSPLUS        reduce using rule 91 (element -> CHR .)
    MINUSMINUS      reduce using rule 91 (element -> CHR .)
    .               reduce using rule 91 (element -> CHR .)
    RARROW          reduce using rule 91 (element -> CHR .)
    +               reduce using rule 91 (element -> CHR .)
    -               reduce using rule 91 (element -> CHR .)
    *               reduce using rule 91 (element -> CHR .)
    /               reduce using rule 91 (element -> CHR .)
    ^               reduce using rule 91 (element -> CHR .)
    >               reduce using rule 91 (element -> CHR .)
    <               reduce using rule 91 (element -> CHR .)
    ?               reduce using rule 91 (element -> CHR .)
    ]               reduce using rule 91 (element -> CHR .)
    ,               reduce using rule 91 (element -> CHR .)
    ;               reduce using rule 91 (element -> CHR .)
    )               reduce using rule 91 (element -> CHR .)
    }               reduce using rule 91 (element -> CHR .)
    :               reduce using rule 91 (element -> CHR .)


state 56

    (92) element -> STR .

    [               reduce using rule 92 (element -> STR .)
    (               reduce using rule 92 (element -> STR .)
    PLUSPLUS        reduce using rule 92 (element -> STR .)
    MINUSMINUS      reduce using rule 92 (element -> STR .)
    .               reduce using rule 92 (element -> STR .)
    RARROW          reduce using rule 92 (element -> STR .)
    +               reduce using rule 92 (element -> STR .)
    -               reduce using rule 92 (element -> STR .)
    *               reduce using rule 92 (element -> STR .)
    /               reduce using rule 92 (element -> STR .)
    ^               reduce using rule 92 (element -> STR .)
    >               reduce using rule 92 (element -> STR .)
    <               reduce using rule 92 (element -> STR .)
    ?               reduce using rule 92 (element -> STR .)
    ]               reduce using rule 92 (element -> STR .)
    ,               reduce using rule 92 (element -> STR .)
    ;               reduce using rule 92 (element -> STR .)
    )               reduce using rule 92 (element -> STR .)
    }               reduce using rule 92 (element -> STR .)
    :               reduce using rule 92 (element -> STR .)


state 57

    (12) declarators -> declarator_1 , declarators .

    ;               reduce using rule 12 (declarators -> declarator_1 , declarators .)


state 58

    (15) declarator_1 -> declarator_2 = initializer .

    ,               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)
    ;               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)


state 59

    (20) initializer -> expression .

    ,               reduce using rule 20 (initializer -> expression .)
    ;               reduce using rule 20 (initializer -> expression .)


state 60

    (21) initializer -> { . expressions }
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expressions                    shift and go to state 90
    expression                     shift and go to state 91
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 61

    (17) declarator_2 -> ID ( . )

    )               shift and go to state 92


state 62

    (22) new_type_dec -> new_type ID { new_type_params . }
    (23) new_type_dec -> new_type ID { new_type_params . } declarators

    }               shift and go to state 93


state 63

    (27) new_type_params -> new_type_param . new_type_params
    (28) new_type_params -> new_type_param .
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE

    }               reduce using rule 28 (new_type_params -> new_type_param .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_param                 shift and go to state 63
    new_type_params                shift and go to state 94
    type                           shift and go to state 64

state 64

    (29) new_type_param -> type . declarators ;
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 95
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 65

    (36) param -> type declarator_2 .

    ,               reduce using rule 36 (param -> type declarator_2 .)
    )               reduce using rule 36 (param -> type declarator_2 .)


state 66

    (30) func_def -> type ID ( params ) . { statements }
    (32) func_def -> type ID ( params ) . { }

    {               shift and go to state 96


state 67

    (31) func_def -> type ID ( ) { . statements }
    (33) func_def -> type ID ( ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               shift and go to state 100
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    type                           shift and go to state 97
    statements                     shift and go to state 99
    statement                      shift and go to state 101
    expression                     shift and go to state 102
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 68

    (34) params -> param , . params
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    param                          shift and go to state 39
    params                         shift and go to state 115
    type                           shift and go to state 36

state 69

    (19) declarator_2 -> ID [ expression ] .

    =               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ,               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ;               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    )               reduce using rule 19 (declarator_2 -> ID [ expression ] .)


state 70

    (65) tern_expr -> tern_expr ? . tern_expr : tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    tern_expr                      shift and go to state 116
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 71

    (67) bin_expr -> bin_expr + . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 117
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 72

    (68) bin_expr -> bin_expr - . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 118
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 73

    (69) bin_expr -> bin_expr * . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 119
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 74

    (70) bin_expr -> bin_expr / . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 120
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 75

    (71) bin_expr -> bin_expr ^ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 121
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 76

    (72) bin_expr -> bin_expr > . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 122
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 77

    (73) bin_expr -> bin_expr < . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    bin_expr                       shift and go to state 123
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 78

    (77) pre_unary_expr -> + pre_unary_expr .

    +               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    -               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    *               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    /               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    ^               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    >               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    <               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    ?               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    ]               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    ,               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    ;               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    )               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    }               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)
    :               reduce using rule 77 (pre_unary_expr -> + pre_unary_expr .)


state 79

    (78) pre_unary_expr -> - pre_unary_expr .

    +               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    -               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    *               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    /               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    ^               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    >               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    <               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    ?               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    ]               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    ,               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    ;               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    )               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    }               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)
    :               reduce using rule 78 (pre_unary_expr -> - pre_unary_expr .)


state 80

    (75) pre_unary_expr -> PLUSPLUS pre_unary_expr .

    +               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    -               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    *               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    /               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ^               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    >               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    <               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ?               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ]               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ,               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ;               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    )               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    }               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    :               reduce using rule 75 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)


state 81

    (76) pre_unary_expr -> MINUSMINUS pre_unary_expr .

    +               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    -               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    *               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    /               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ^               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    >               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    <               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ?               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ]               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ,               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ;               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    )               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    }               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    :               reduce using rule 76 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)


state 82

    (79) pre_unary_expr -> ! pre_unary_expr .

    +               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    -               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    *               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    /               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    ^               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    >               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    <               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    ?               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    ]               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    ,               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    ;               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    )               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    }               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)
    :               reduce using rule 79 (pre_unary_expr -> ! pre_unary_expr .)


state 83

    (81) post_unary_expr -> post_unary_expr [ . expression ]
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    post_unary_expr                shift and go to state 51
    expression                     shift and go to state 124
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    element                        shift and go to state 53

state 84

    (82) post_unary_expr -> post_unary_expr ( . )
    (83) post_unary_expr -> post_unary_expr ( . expressions )
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    )               shift and go to state 125
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    post_unary_expr                shift and go to state 51
    expressions                    shift and go to state 126
    expression                     shift and go to state 91
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    element                        shift and go to state 53

state 85

    (84) post_unary_expr -> post_unary_expr PLUSPLUS .

    [               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    (               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    .               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RARROW          reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    +               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    -               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    *               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    /               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ^               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    >               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    <               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ?               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ]               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ,               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ;               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    )               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    }               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    :               reduce using rule 84 (post_unary_expr -> post_unary_expr PLUSPLUS .)


state 86

    (85) post_unary_expr -> post_unary_expr MINUSMINUS .

    [               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    (               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    .               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RARROW          reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    +               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    -               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    *               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    /               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ^               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    >               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    <               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ?               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ]               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ,               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ;               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    )               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    }               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    :               reduce using rule 85 (post_unary_expr -> post_unary_expr MINUSMINUS .)


state 87

    (86) post_unary_expr -> post_unary_expr . . ID

    ID              shift and go to state 127


state 88

    (87) post_unary_expr -> post_unary_expr RARROW . ID

    ID              shift and go to state 128


state 89

    (93) element -> ( expression . )

    )               shift and go to state 129


state 90

    (21) initializer -> { expressions . }

    }               shift and go to state 130


state 91

    (62) expressions -> expression . , expressions
    (63) expressions -> expression .

    ,               shift and go to state 131
    }               reduce using rule 63 (expressions -> expression .)
    )               reduce using rule 63 (expressions -> expression .)


state 92

    (17) declarator_2 -> ID ( ) .

    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)
    )               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 93

    (22) new_type_dec -> new_type ID { new_type_params } .
    (23) new_type_dec -> new_type ID { new_type_params } . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ;               reduce using rule 22 (new_type_dec -> new_type ID { new_type_params } .)
    ID              shift and go to state 33

    declarators                    shift and go to state 132
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 94

    (27) new_type_params -> new_type_param new_type_params .

    }               reduce using rule 27 (new_type_params -> new_type_param new_type_params .)


state 95

    (29) new_type_param -> type declarators . ;

    ;               shift and go to state 133


state 96

    (30) func_def -> type ID ( params ) { . statements }
    (32) func_def -> type ID ( params ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               shift and go to state 135
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    type                           shift and go to state 97
    statements                     shift and go to state 134
    statement                      shift and go to state 101
    expression                     shift and go to state 102
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 97

    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 98

    (48) statement -> { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    stats_or_null                  shift and go to state 136
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    expression                     shift and go to state 102
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 99

    (31) func_def -> type ID ( ) { statements . }

    }               shift and go to state 139


state 100

    (33) func_def -> type ID ( ) { } .

    INCLUDE         reduce using rule 33 (func_def -> type ID ( ) { } .)
    ;               reduce using rule 33 (func_def -> type ID ( ) { } .)
    VOID            reduce using rule 33 (func_def -> type ID ( ) { } .)
    CHAR            reduce using rule 33 (func_def -> type ID ( ) { } .)
    SHORT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    INT             reduce using rule 33 (func_def -> type ID ( ) { } .)
    LONG            reduce using rule 33 (func_def -> type ID ( ) { } .)
    FLOAT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    DOUBLE          reduce using rule 33 (func_def -> type ID ( ) { } .)
    STRUCT          reduce using rule 33 (func_def -> type ID ( ) { } .)
    CLASS           reduce using rule 33 (func_def -> type ID ( ) { } .)
    $end            reduce using rule 33 (func_def -> type ID ( ) { } .)


state 101

    (37) statements -> statement . statements
    (38) statements -> statement .
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 38 (statements -> statement .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    statement                      shift and go to state 101
    statements                     shift and go to state 140
    expression                     shift and go to state 102
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 102

    (39) statement -> expression . ;

    ;               shift and go to state 141


state 103

    (44) statement -> ; .

    ;               reduce using rule 44 (statement -> ; .)
    {               reduce using rule 44 (statement -> ; .)
    IF              reduce using rule 44 (statement -> ; .)
    WHILE           reduce using rule 44 (statement -> ; .)
    DO              reduce using rule 44 (statement -> ; .)
    FOR             reduce using rule 44 (statement -> ; .)
    BREAK           reduce using rule 44 (statement -> ; .)
    CONTINUE        reduce using rule 44 (statement -> ; .)
    RETURN          reduce using rule 44 (statement -> ; .)
    VOID            reduce using rule 44 (statement -> ; .)
    CHAR            reduce using rule 44 (statement -> ; .)
    SHORT           reduce using rule 44 (statement -> ; .)
    INT             reduce using rule 44 (statement -> ; .)
    LONG            reduce using rule 44 (statement -> ; .)
    FLOAT           reduce using rule 44 (statement -> ; .)
    DOUBLE          reduce using rule 44 (statement -> ; .)
    STRUCT          reduce using rule 44 (statement -> ; .)
    CLASS           reduce using rule 44 (statement -> ; .)
    PLUSPLUS        reduce using rule 44 (statement -> ; .)
    MINUSMINUS      reduce using rule 44 (statement -> ; .)
    +               reduce using rule 44 (statement -> ; .)
    -               reduce using rule 44 (statement -> ; .)
    !               reduce using rule 44 (statement -> ; .)
    ID              reduce using rule 44 (statement -> ; .)
    NUMBER          reduce using rule 44 (statement -> ; .)
    CHR             reduce using rule 44 (statement -> ; .)
    STR             reduce using rule 44 (statement -> ; .)
    (               reduce using rule 44 (statement -> ; .)
    }               reduce using rule 44 (statement -> ; .)


state 104

    (40) statement -> decl . ;

    ;               shift and go to state 142


state 105

    (41) statement -> conditional .

    ;               reduce using rule 41 (statement -> conditional .)
    {               reduce using rule 41 (statement -> conditional .)
    IF              reduce using rule 41 (statement -> conditional .)
    WHILE           reduce using rule 41 (statement -> conditional .)
    DO              reduce using rule 41 (statement -> conditional .)
    FOR             reduce using rule 41 (statement -> conditional .)
    BREAK           reduce using rule 41 (statement -> conditional .)
    CONTINUE        reduce using rule 41 (statement -> conditional .)
    RETURN          reduce using rule 41 (statement -> conditional .)
    VOID            reduce using rule 41 (statement -> conditional .)
    CHAR            reduce using rule 41 (statement -> conditional .)
    SHORT           reduce using rule 41 (statement -> conditional .)
    INT             reduce using rule 41 (statement -> conditional .)
    LONG            reduce using rule 41 (statement -> conditional .)
    FLOAT           reduce using rule 41 (statement -> conditional .)
    DOUBLE          reduce using rule 41 (statement -> conditional .)
    STRUCT          reduce using rule 41 (statement -> conditional .)
    CLASS           reduce using rule 41 (statement -> conditional .)
    PLUSPLUS        reduce using rule 41 (statement -> conditional .)
    MINUSMINUS      reduce using rule 41 (statement -> conditional .)
    +               reduce using rule 41 (statement -> conditional .)
    -               reduce using rule 41 (statement -> conditional .)
    !               reduce using rule 41 (statement -> conditional .)
    ID              reduce using rule 41 (statement -> conditional .)
    NUMBER          reduce using rule 41 (statement -> conditional .)
    CHR             reduce using rule 41 (statement -> conditional .)
    STR             reduce using rule 41 (statement -> conditional .)
    (               reduce using rule 41 (statement -> conditional .)
    }               reduce using rule 41 (statement -> conditional .)


state 106

    (42) statement -> iteration .

    ;               reduce using rule 42 (statement -> iteration .)
    {               reduce using rule 42 (statement -> iteration .)
    IF              reduce using rule 42 (statement -> iteration .)
    WHILE           reduce using rule 42 (statement -> iteration .)
    DO              reduce using rule 42 (statement -> iteration .)
    FOR             reduce using rule 42 (statement -> iteration .)
    BREAK           reduce using rule 42 (statement -> iteration .)
    CONTINUE        reduce using rule 42 (statement -> iteration .)
    RETURN          reduce using rule 42 (statement -> iteration .)
    VOID            reduce using rule 42 (statement -> iteration .)
    CHAR            reduce using rule 42 (statement -> iteration .)
    SHORT           reduce using rule 42 (statement -> iteration .)
    INT             reduce using rule 42 (statement -> iteration .)
    LONG            reduce using rule 42 (statement -> iteration .)
    FLOAT           reduce using rule 42 (statement -> iteration .)
    DOUBLE          reduce using rule 42 (statement -> iteration .)
    STRUCT          reduce using rule 42 (statement -> iteration .)
    CLASS           reduce using rule 42 (statement -> iteration .)
    PLUSPLUS        reduce using rule 42 (statement -> iteration .)
    MINUSMINUS      reduce using rule 42 (statement -> iteration .)
    +               reduce using rule 42 (statement -> iteration .)
    -               reduce using rule 42 (statement -> iteration .)
    !               reduce using rule 42 (statement -> iteration .)
    ID              reduce using rule 42 (statement -> iteration .)
    NUMBER          reduce using rule 42 (statement -> iteration .)
    CHR             reduce using rule 42 (statement -> iteration .)
    STR             reduce using rule 42 (statement -> iteration .)
    (               reduce using rule 42 (statement -> iteration .)
    }               reduce using rule 42 (statement -> iteration .)


state 107

    (43) statement -> jump . ;

    ;               shift and go to state 143


state 108

    (45) conditional -> IF . ( expression ) { stats_or_null }
    (46) conditional -> IF . ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> IF . ( expression ) { stats_or_null } ELSE { stats_or_null }

    (               shift and go to state 144


state 109

    (51) iteration -> WHILE . ( expression ) { stats_or_null }

    (               shift and go to state 145


state 110

    (52) iteration -> DO . { stats_or_null } WHILE ( expression ) ;

    {               shift and go to state 146


state 111

    (53) iteration -> FOR . ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }

    (               shift and go to state 147


state 112

    (58) jump -> BREAK .

    ;               reduce using rule 58 (jump -> BREAK .)


state 113

    (59) jump -> CONTINUE .

    ;               reduce using rule 59 (jump -> CONTINUE .)


state 114

    (60) jump -> RETURN .
    (61) jump -> RETURN . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    ;               reduce using rule 60 (jump -> RETURN .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 148
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 115

    (34) params -> param , params .

    )               reduce using rule 34 (params -> param , params .)


state 116

    (65) tern_expr -> tern_expr ? tern_expr . : tern_expr
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    :               shift and go to state 149
    ?               shift and go to state 70


state 117

    (67) bin_expr -> bin_expr + bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    +               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    -               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ^               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    >               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    <               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ?               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ]               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ,               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ;               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    )               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    }               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    :               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    *               shift and go to state 73
    /               shift and go to state 74

  ! *               [ reduce using rule 67 (bin_expr -> bin_expr + bin_expr .) ]
  ! /               [ reduce using rule 67 (bin_expr -> bin_expr + bin_expr .) ]
  ! +               [ shift and go to state 71 ]
  ! -               [ shift and go to state 72 ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 118

    (68) bin_expr -> bin_expr - bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    +               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    -               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ^               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    >               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    <               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ?               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ]               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ,               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ;               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    )               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    }               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    :               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    *               shift and go to state 73
    /               shift and go to state 74

  ! *               [ reduce using rule 68 (bin_expr -> bin_expr - bin_expr .) ]
  ! /               [ reduce using rule 68 (bin_expr -> bin_expr - bin_expr .) ]
  ! +               [ shift and go to state 71 ]
  ! -               [ shift and go to state 72 ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 119

    (69) bin_expr -> bin_expr * bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    +               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    -               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    *               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    /               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ^               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    >               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    <               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ?               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ]               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ,               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ;               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    )               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    }               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    :               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)

  ! +               [ shift and go to state 71 ]
  ! -               [ shift and go to state 72 ]
  ! *               [ shift and go to state 73 ]
  ! /               [ shift and go to state 74 ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 120

    (70) bin_expr -> bin_expr / bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    +               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    -               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    *               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    /               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ^               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    >               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    <               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ?               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ]               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ,               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ;               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    )               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    }               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    :               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)

  ! +               [ shift and go to state 71 ]
  ! -               [ shift and go to state 72 ]
  ! *               [ shift and go to state 73 ]
  ! /               [ shift and go to state 74 ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 121

    (71) bin_expr -> bin_expr ^ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    ^               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ?               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ]               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ,               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ;               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    )               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    }               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    :               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    +               shift and go to state 71
    -               shift and go to state 72
    *               shift and go to state 73
    /               shift and go to state 74
    >               shift and go to state 76
    <               shift and go to state 77

  ! +               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! -               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! *               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! /               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! >               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! <               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! ^               [ shift and go to state 75 ]


state 122

    (72) bin_expr -> bin_expr > bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    ^               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    >               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    <               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ?               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ]               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ,               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ;               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    )               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    }               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    :               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    +               shift and go to state 71
    -               shift and go to state 72
    *               shift and go to state 73
    /               shift and go to state 74

  ! +               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! -               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! *               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! /               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 123

    (73) bin_expr -> bin_expr < bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr

    ^               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    >               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    <               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ?               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ]               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ,               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ;               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    )               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    }               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    :               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    +               shift and go to state 71
    -               shift and go to state 72
    *               shift and go to state 73
    /               shift and go to state 74

  ! +               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! -               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! *               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! /               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! ^               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]


state 124

    (81) post_unary_expr -> post_unary_expr [ expression . ]

    ]               shift and go to state 150


state 125

    (82) post_unary_expr -> post_unary_expr ( ) .

    [               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    (               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    PLUSPLUS        reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    MINUSMINUS      reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    .               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    RARROW          reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    +               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    -               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    *               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    /               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    ^               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    >               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    <               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    ?               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    ]               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    ,               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    ;               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    )               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    }               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)
    :               reduce using rule 82 (post_unary_expr -> post_unary_expr ( ) .)


state 126

    (83) post_unary_expr -> post_unary_expr ( expressions . )

    )               shift and go to state 151


state 127

    (86) post_unary_expr -> post_unary_expr . ID .

    [               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    (               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    PLUSPLUS        reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    MINUSMINUS      reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    .               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    RARROW          reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    +               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    -               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    *               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    /               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    ^               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    >               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    <               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    ?               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    ]               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    ,               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    ;               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    )               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    }               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)
    :               reduce using rule 86 (post_unary_expr -> post_unary_expr . ID .)


state 128

    (87) post_unary_expr -> post_unary_expr RARROW ID .

    [               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    (               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    PLUSPLUS        reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    MINUSMINUS      reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    .               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    RARROW          reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    +               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    -               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    *               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    /               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    ^               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    >               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    <               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    ?               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    ]               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    ,               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    ;               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    )               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    }               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)
    :               reduce using rule 87 (post_unary_expr -> post_unary_expr RARROW ID .)


state 129

    (93) element -> ( expression ) .

    [               reduce using rule 93 (element -> ( expression ) .)
    (               reduce using rule 93 (element -> ( expression ) .)
    PLUSPLUS        reduce using rule 93 (element -> ( expression ) .)
    MINUSMINUS      reduce using rule 93 (element -> ( expression ) .)
    .               reduce using rule 93 (element -> ( expression ) .)
    RARROW          reduce using rule 93 (element -> ( expression ) .)
    +               reduce using rule 93 (element -> ( expression ) .)
    -               reduce using rule 93 (element -> ( expression ) .)
    *               reduce using rule 93 (element -> ( expression ) .)
    /               reduce using rule 93 (element -> ( expression ) .)
    ^               reduce using rule 93 (element -> ( expression ) .)
    >               reduce using rule 93 (element -> ( expression ) .)
    <               reduce using rule 93 (element -> ( expression ) .)
    ?               reduce using rule 93 (element -> ( expression ) .)
    ]               reduce using rule 93 (element -> ( expression ) .)
    ,               reduce using rule 93 (element -> ( expression ) .)
    ;               reduce using rule 93 (element -> ( expression ) .)
    )               reduce using rule 93 (element -> ( expression ) .)
    }               reduce using rule 93 (element -> ( expression ) .)
    :               reduce using rule 93 (element -> ( expression ) .)


state 130

    (21) initializer -> { expressions } .

    ,               reduce using rule 21 (initializer -> { expressions } .)
    ;               reduce using rule 21 (initializer -> { expressions } .)


state 131

    (62) expressions -> expression , . expressions
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 91
    expressions                    shift and go to state 152
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 132

    (23) new_type_dec -> new_type ID { new_type_params } declarators .

    ;               reduce using rule 23 (new_type_dec -> new_type ID { new_type_params } declarators .)


state 133

    (29) new_type_param -> type declarators ; .

    VOID            reduce using rule 29 (new_type_param -> type declarators ; .)
    CHAR            reduce using rule 29 (new_type_param -> type declarators ; .)
    SHORT           reduce using rule 29 (new_type_param -> type declarators ; .)
    INT             reduce using rule 29 (new_type_param -> type declarators ; .)
    LONG            reduce using rule 29 (new_type_param -> type declarators ; .)
    FLOAT           reduce using rule 29 (new_type_param -> type declarators ; .)
    DOUBLE          reduce using rule 29 (new_type_param -> type declarators ; .)
    }               reduce using rule 29 (new_type_param -> type declarators ; .)


state 134

    (30) func_def -> type ID ( params ) { statements . }

    }               shift and go to state 153


state 135

    (32) func_def -> type ID ( params ) { } .

    INCLUDE         reduce using rule 32 (func_def -> type ID ( params ) { } .)
    ;               reduce using rule 32 (func_def -> type ID ( params ) { } .)
    VOID            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CHAR            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    SHORT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    INT             reduce using rule 32 (func_def -> type ID ( params ) { } .)
    LONG            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    FLOAT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    DOUBLE          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    STRUCT          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CLASS           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    $end            reduce using rule 32 (func_def -> type ID ( params ) { } .)


state 136

    (48) statement -> { stats_or_null . }

    }               shift and go to state 154


state 137

    (49) stats_or_null -> statements .

    }               reduce using rule 49 (stats_or_null -> statements .)


state 138

    (50) stats_or_null -> empty .

    }               reduce using rule 50 (stats_or_null -> empty .)


state 139

    (31) func_def -> type ID ( ) { statements } .

    INCLUDE         reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    ;               reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    VOID            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CHAR            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    SHORT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    INT             reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    LONG            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    FLOAT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    DOUBLE          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    STRUCT          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CLASS           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    $end            reduce using rule 31 (func_def -> type ID ( ) { statements } .)


state 140

    (37) statements -> statement statements .

    }               reduce using rule 37 (statements -> statement statements .)


state 141

    (39) statement -> expression ; .

    ;               reduce using rule 39 (statement -> expression ; .)
    {               reduce using rule 39 (statement -> expression ; .)
    IF              reduce using rule 39 (statement -> expression ; .)
    WHILE           reduce using rule 39 (statement -> expression ; .)
    DO              reduce using rule 39 (statement -> expression ; .)
    FOR             reduce using rule 39 (statement -> expression ; .)
    BREAK           reduce using rule 39 (statement -> expression ; .)
    CONTINUE        reduce using rule 39 (statement -> expression ; .)
    RETURN          reduce using rule 39 (statement -> expression ; .)
    VOID            reduce using rule 39 (statement -> expression ; .)
    CHAR            reduce using rule 39 (statement -> expression ; .)
    SHORT           reduce using rule 39 (statement -> expression ; .)
    INT             reduce using rule 39 (statement -> expression ; .)
    LONG            reduce using rule 39 (statement -> expression ; .)
    FLOAT           reduce using rule 39 (statement -> expression ; .)
    DOUBLE          reduce using rule 39 (statement -> expression ; .)
    STRUCT          reduce using rule 39 (statement -> expression ; .)
    CLASS           reduce using rule 39 (statement -> expression ; .)
    PLUSPLUS        reduce using rule 39 (statement -> expression ; .)
    MINUSMINUS      reduce using rule 39 (statement -> expression ; .)
    +               reduce using rule 39 (statement -> expression ; .)
    -               reduce using rule 39 (statement -> expression ; .)
    !               reduce using rule 39 (statement -> expression ; .)
    ID              reduce using rule 39 (statement -> expression ; .)
    NUMBER          reduce using rule 39 (statement -> expression ; .)
    CHR             reduce using rule 39 (statement -> expression ; .)
    STR             reduce using rule 39 (statement -> expression ; .)
    (               reduce using rule 39 (statement -> expression ; .)
    }               reduce using rule 39 (statement -> expression ; .)


state 142

    (40) statement -> decl ; .

    ;               reduce using rule 40 (statement -> decl ; .)
    {               reduce using rule 40 (statement -> decl ; .)
    IF              reduce using rule 40 (statement -> decl ; .)
    WHILE           reduce using rule 40 (statement -> decl ; .)
    DO              reduce using rule 40 (statement -> decl ; .)
    FOR             reduce using rule 40 (statement -> decl ; .)
    BREAK           reduce using rule 40 (statement -> decl ; .)
    CONTINUE        reduce using rule 40 (statement -> decl ; .)
    RETURN          reduce using rule 40 (statement -> decl ; .)
    VOID            reduce using rule 40 (statement -> decl ; .)
    CHAR            reduce using rule 40 (statement -> decl ; .)
    SHORT           reduce using rule 40 (statement -> decl ; .)
    INT             reduce using rule 40 (statement -> decl ; .)
    LONG            reduce using rule 40 (statement -> decl ; .)
    FLOAT           reduce using rule 40 (statement -> decl ; .)
    DOUBLE          reduce using rule 40 (statement -> decl ; .)
    STRUCT          reduce using rule 40 (statement -> decl ; .)
    CLASS           reduce using rule 40 (statement -> decl ; .)
    PLUSPLUS        reduce using rule 40 (statement -> decl ; .)
    MINUSMINUS      reduce using rule 40 (statement -> decl ; .)
    +               reduce using rule 40 (statement -> decl ; .)
    -               reduce using rule 40 (statement -> decl ; .)
    !               reduce using rule 40 (statement -> decl ; .)
    ID              reduce using rule 40 (statement -> decl ; .)
    NUMBER          reduce using rule 40 (statement -> decl ; .)
    CHR             reduce using rule 40 (statement -> decl ; .)
    STR             reduce using rule 40 (statement -> decl ; .)
    (               reduce using rule 40 (statement -> decl ; .)
    }               reduce using rule 40 (statement -> decl ; .)


state 143

    (43) statement -> jump ; .

    ;               reduce using rule 43 (statement -> jump ; .)
    {               reduce using rule 43 (statement -> jump ; .)
    IF              reduce using rule 43 (statement -> jump ; .)
    WHILE           reduce using rule 43 (statement -> jump ; .)
    DO              reduce using rule 43 (statement -> jump ; .)
    FOR             reduce using rule 43 (statement -> jump ; .)
    BREAK           reduce using rule 43 (statement -> jump ; .)
    CONTINUE        reduce using rule 43 (statement -> jump ; .)
    RETURN          reduce using rule 43 (statement -> jump ; .)
    VOID            reduce using rule 43 (statement -> jump ; .)
    CHAR            reduce using rule 43 (statement -> jump ; .)
    SHORT           reduce using rule 43 (statement -> jump ; .)
    INT             reduce using rule 43 (statement -> jump ; .)
    LONG            reduce using rule 43 (statement -> jump ; .)
    FLOAT           reduce using rule 43 (statement -> jump ; .)
    DOUBLE          reduce using rule 43 (statement -> jump ; .)
    STRUCT          reduce using rule 43 (statement -> jump ; .)
    CLASS           reduce using rule 43 (statement -> jump ; .)
    PLUSPLUS        reduce using rule 43 (statement -> jump ; .)
    MINUSMINUS      reduce using rule 43 (statement -> jump ; .)
    +               reduce using rule 43 (statement -> jump ; .)
    -               reduce using rule 43 (statement -> jump ; .)
    !               reduce using rule 43 (statement -> jump ; .)
    ID              reduce using rule 43 (statement -> jump ; .)
    NUMBER          reduce using rule 43 (statement -> jump ; .)
    CHR             reduce using rule 43 (statement -> jump ; .)
    STR             reduce using rule 43 (statement -> jump ; .)
    (               reduce using rule 43 (statement -> jump ; .)
    }               reduce using rule 43 (statement -> jump ; .)


state 144

    (45) conditional -> IF ( . expression ) { stats_or_null }
    (46) conditional -> IF ( . expression ) { stats_or_null } ELSE conditional
    (47) conditional -> IF ( . expression ) { stats_or_null } ELSE { stats_or_null }
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 155
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 145

    (51) iteration -> WHILE ( . expression ) { stats_or_null }
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 156
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 146

    (52) iteration -> DO { . stats_or_null } WHILE ( expression ) ;
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    stats_or_null                  shift and go to state 157
    expression                     shift and go to state 102
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 147

    (53) iteration -> FOR ( . expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (56) expr_or_null_or_init -> . expr_or_null
    (57) expr_or_null_or_init -> . usual_dec
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (11) usual_dec -> . type declarators
    (64) expression -> . tern_expr
    (101) empty -> .
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    ;               reduce using rule 101 (empty -> .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expr_or_null_or_init           shift and go to state 158
    expr_or_null                   shift and go to state 159
    usual_dec                      shift and go to state 160
    expression                     shift and go to state 161
    empty                          shift and go to state 162
    type                           shift and go to state 97
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 148

    (61) jump -> RETURN expression .

    ;               reduce using rule 61 (jump -> RETURN expression .)


state 149

    (65) tern_expr -> tern_expr ? tern_expr : . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    tern_expr                      shift and go to state 163
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 150

    (81) post_unary_expr -> post_unary_expr [ expression ] .

    [               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    (               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    PLUSPLUS        reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    MINUSMINUS      reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    .               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    RARROW          reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    +               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    -               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    *               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    /               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    ^               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    >               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    <               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    ?               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    ]               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    ,               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    ;               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    )               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    }               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)
    :               reduce using rule 81 (post_unary_expr -> post_unary_expr [ expression ] .)


state 151

    (83) post_unary_expr -> post_unary_expr ( expressions ) .

    [               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    (               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    PLUSPLUS        reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MINUSMINUS      reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    .               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RARROW          reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    +               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    -               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    *               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    /               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ^               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    >               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    <               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ?               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ]               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ,               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ;               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    )               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    }               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)
    :               reduce using rule 83 (post_unary_expr -> post_unary_expr ( expressions ) .)


state 152

    (62) expressions -> expression , expressions .

    }               reduce using rule 62 (expressions -> expression , expressions .)
    )               reduce using rule 62 (expressions -> expression , expressions .)


state 153

    (30) func_def -> type ID ( params ) { statements } .

    INCLUDE         reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    ;               reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    VOID            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CHAR            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    SHORT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    INT             reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    LONG            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    FLOAT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    DOUBLE          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    STRUCT          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CLASS           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    $end            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)


state 154

    (48) statement -> { stats_or_null } .

    ;               reduce using rule 48 (statement -> { stats_or_null } .)
    {               reduce using rule 48 (statement -> { stats_or_null } .)
    IF              reduce using rule 48 (statement -> { stats_or_null } .)
    WHILE           reduce using rule 48 (statement -> { stats_or_null } .)
    DO              reduce using rule 48 (statement -> { stats_or_null } .)
    FOR             reduce using rule 48 (statement -> { stats_or_null } .)
    BREAK           reduce using rule 48 (statement -> { stats_or_null } .)
    CONTINUE        reduce using rule 48 (statement -> { stats_or_null } .)
    RETURN          reduce using rule 48 (statement -> { stats_or_null } .)
    VOID            reduce using rule 48 (statement -> { stats_or_null } .)
    CHAR            reduce using rule 48 (statement -> { stats_or_null } .)
    SHORT           reduce using rule 48 (statement -> { stats_or_null } .)
    INT             reduce using rule 48 (statement -> { stats_or_null } .)
    LONG            reduce using rule 48 (statement -> { stats_or_null } .)
    FLOAT           reduce using rule 48 (statement -> { stats_or_null } .)
    DOUBLE          reduce using rule 48 (statement -> { stats_or_null } .)
    STRUCT          reduce using rule 48 (statement -> { stats_or_null } .)
    CLASS           reduce using rule 48 (statement -> { stats_or_null } .)
    PLUSPLUS        reduce using rule 48 (statement -> { stats_or_null } .)
    MINUSMINUS      reduce using rule 48 (statement -> { stats_or_null } .)
    +               reduce using rule 48 (statement -> { stats_or_null } .)
    -               reduce using rule 48 (statement -> { stats_or_null } .)
    !               reduce using rule 48 (statement -> { stats_or_null } .)
    ID              reduce using rule 48 (statement -> { stats_or_null } .)
    NUMBER          reduce using rule 48 (statement -> { stats_or_null } .)
    CHR             reduce using rule 48 (statement -> { stats_or_null } .)
    STR             reduce using rule 48 (statement -> { stats_or_null } .)
    (               reduce using rule 48 (statement -> { stats_or_null } .)
    }               reduce using rule 48 (statement -> { stats_or_null } .)


state 155

    (45) conditional -> IF ( expression . ) { stats_or_null }
    (46) conditional -> IF ( expression . ) { stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression . ) { stats_or_null } ELSE { stats_or_null }

    )               shift and go to state 164


state 156

    (51) iteration -> WHILE ( expression . ) { stats_or_null }

    )               shift and go to state 165


state 157

    (52) iteration -> DO { stats_or_null . } WHILE ( expression ) ;

    }               shift and go to state 166


state 158

    (53) iteration -> FOR ( expr_or_null_or_init . ; expr_or_null ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 167


state 159

    (56) expr_or_null_or_init -> expr_or_null .

    ;               reduce using rule 56 (expr_or_null_or_init -> expr_or_null .)


state 160

    (57) expr_or_null_or_init -> usual_dec .

    ;               reduce using rule 57 (expr_or_null_or_init -> usual_dec .)


state 161

    (54) expr_or_null -> expression .

    ;               reduce using rule 54 (expr_or_null -> expression .)
    )               reduce using rule 54 (expr_or_null -> expression .)


state 162

    (55) expr_or_null -> empty .

    ;               reduce using rule 55 (expr_or_null -> empty .)
    )               reduce using rule 55 (expr_or_null -> empty .)


state 163

    (65) tern_expr -> tern_expr ? tern_expr : tern_expr .
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ?               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ]               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ,               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ;               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    )               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    }               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    :               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)

  ! ?               [ shift and go to state 70 ]


state 164

    (45) conditional -> IF ( expression ) . { stats_or_null }
    (46) conditional -> IF ( expression ) . { stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression ) . { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 168


state 165

    (51) iteration -> WHILE ( expression ) . { stats_or_null }

    {               shift and go to state 169


state 166

    (52) iteration -> DO { stats_or_null } . WHILE ( expression ) ;

    WHILE           shift and go to state 170


state 167

    (53) iteration -> FOR ( expr_or_null_or_init ; . expr_or_null ; expr_or_null ) { stats_or_null }
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (64) expression -> . tern_expr
    (101) empty -> .
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    ;               reduce using rule 101 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expr_or_null                   shift and go to state 171
    expression                     shift and go to state 161
    empty                          shift and go to state 162
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 168

    (45) conditional -> IF ( expression ) { . stats_or_null }
    (46) conditional -> IF ( expression ) { . stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression ) { . stats_or_null } ELSE { stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 102
    stats_or_null                  shift and go to state 172
    conditional                    shift and go to state 105
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    decl                           shift and go to state 104
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 169

    (51) iteration -> WHILE ( expression ) { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 102
    stats_or_null                  shift and go to state 173
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 170

    (52) iteration -> DO { stats_or_null } WHILE . ( expression ) ;

    (               shift and go to state 174


state 171

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null . ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 175


state 172

    (45) conditional -> IF ( expression ) { stats_or_null . }
    (46) conditional -> IF ( expression ) { stats_or_null . } ELSE conditional
    (47) conditional -> IF ( expression ) { stats_or_null . } ELSE { stats_or_null }

    }               shift and go to state 176


state 173

    (51) iteration -> WHILE ( expression ) { stats_or_null . }

    }               shift and go to state 177


state 174

    (52) iteration -> DO { stats_or_null } WHILE ( . expression ) ;
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 178
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 175

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; . expr_or_null ) { stats_or_null }
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (64) expression -> . tern_expr
    (101) empty -> .
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    )               reduce using rule 101 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expr_or_null                   shift and go to state 179
    expression                     shift and go to state 161
    empty                          shift and go to state 162
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 176

    (45) conditional -> IF ( expression ) { stats_or_null } .
    (46) conditional -> IF ( expression ) { stats_or_null } . ELSE conditional
    (47) conditional -> IF ( expression ) { stats_or_null } . ELSE { stats_or_null }

    ;               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    {               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    IF              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    DO              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    FOR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    VOID            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    INT             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    LONG            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    +               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    -               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    !               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    ID              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CHR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    STR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    (               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    }               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    ELSE            shift and go to state 180


state 177

    (51) iteration -> WHILE ( expression ) { stats_or_null } .

    ;               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    {               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    IF              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DO              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FOR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    VOID            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    INT             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    LONG            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    +               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    -               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    !               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    ID              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    (               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    }               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)


state 178

    (52) iteration -> DO { stats_or_null } WHILE ( expression . ) ;

    )               shift and go to state 181


state 179

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null . ) { stats_or_null }

    )               shift and go to state 182


state 180

    (46) conditional -> IF ( expression ) { stats_or_null } ELSE . conditional
    (47) conditional -> IF ( expression ) { stats_or_null } ELSE . { stats_or_null }
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 183
    IF              shift and go to state 108

    conditional                    shift and go to state 184

state 181

    (52) iteration -> DO { stats_or_null } WHILE ( expression ) . ;

    ;               shift and go to state 185


state 182

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) . { stats_or_null }

    {               shift and go to state 186


state 183

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    expression                     shift and go to state 102
    stats_or_null                  shift and go to state 187
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 184

    (46) conditional -> IF ( expression ) { stats_or_null } ELSE conditional .

    ;               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    {               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    IF              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    WHILE           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DO              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FOR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    BREAK           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CONTINUE        reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    RETURN          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    VOID            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHAR            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    SHORT           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    INT             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    LONG            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FLOAT           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DOUBLE          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STRUCT          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CLASS           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    PLUSPLUS        reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    MINUSMINUS      reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    +               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    -               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    !               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    ID              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    NUMBER          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    (               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    }               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)


state 185

    (52) iteration -> DO { stats_or_null } WHILE ( expression ) ; .

    ;               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    {               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    IF              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    WHILE           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DO              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FOR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    BREAK           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    RETURN          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    VOID            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHAR            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    SHORT           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    INT             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    LONG            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FLOAT           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STRUCT          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CLASS           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    +               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    -               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    !               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    ID              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    NUMBER          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    (               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    }               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)


state 186

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (101) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . pre_unary_expr
    (94) type -> . VOID
    (95) type -> . CHAR
    (96) type -> . SHORT
    (97) type -> . INT
    (98) type -> . LONG
    (99) type -> . FLOAT
    (100) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (75) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (76) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (77) pre_unary_expr -> . + pre_unary_expr
    (78) pre_unary_expr -> . - pre_unary_expr
    (79) pre_unary_expr -> . ! pre_unary_expr
    (80) pre_unary_expr -> . post_unary_expr
    (81) post_unary_expr -> . post_unary_expr [ expression ]
    (82) post_unary_expr -> . post_unary_expr ( )
    (83) post_unary_expr -> . post_unary_expr ( expressions )
    (84) post_unary_expr -> . post_unary_expr PLUSPLUS
    (85) post_unary_expr -> . post_unary_expr MINUSMINUS
    (86) post_unary_expr -> . post_unary_expr . ID
    (87) post_unary_expr -> . post_unary_expr RARROW ID
    (88) post_unary_expr -> . element
    (89) element -> . ID
    (90) element -> . NUMBER
    (91) element -> . CHR
    (92) element -> . STR
    (93) element -> . ( expression )

    }               reduce using rule 101 (empty -> .)
    ;               shift and go to state 103
    {               shift and go to state 98
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    DO              shift and go to state 110
    FOR             shift and go to state 111
    BREAK           shift and go to state 112
    CONTINUE        shift and go to state 113
    RETURN          shift and go to state 114
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56
    (               shift and go to state 52

    stats_or_null                  shift and go to state 188
    statements                     shift and go to state 137
    empty                          shift and go to state 138
    statement                      shift and go to state 101
    expression                     shift and go to state 102
    decl                           shift and go to state 104
    conditional                    shift and go to state 105
    iteration                      shift and go to state 106
    jump                           shift and go to state 107
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 97
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 51
    element                        shift and go to state 53

state 187

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null . }

    }               shift and go to state 189


state 188

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null . }

    }               shift and go to state 190


state 189

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .

    ;               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    {               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    IF              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    WHILE           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DO              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FOR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    BREAK           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CONTINUE        reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    RETURN          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    VOID            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHAR            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    SHORT           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    INT             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    LONG            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FLOAT           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DOUBLE          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STRUCT          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CLASS           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    PLUSPLUS        reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    MINUSMINUS      reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    +               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    -               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    !               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    ID              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    NUMBER          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    (               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    }               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)


state 190

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .

    ;               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    {               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    IF              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    WHILE           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DO              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FOR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    BREAK           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CONTINUE        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    RETURN          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    VOID            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHAR            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    SHORT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    INT             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    LONG            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FLOAT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DOUBLE          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STRUCT          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CLASS           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    +               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    -               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    !               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    ID              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    NUMBER          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    (               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    }               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)

