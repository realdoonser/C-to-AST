Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> include program
Rule 2     program -> external_decl program
Rule 3     program -> include
Rule 4     program -> external_decl
Rule 5     include -> INCLUDE
Rule 6     external_decl -> decl ;
Rule 7     external_decl -> func_def
Rule 8     decl -> usual_dec
Rule 9     decl -> new_type_dec
Rule 10    usual_dec -> type declarators
Rule 11    declarators -> declarator_1 , declarators
Rule 12    declarators -> declarator_1
Rule 13    declarator_1 -> declarator_2
Rule 14    declarator_1 -> declarator_2 = initializer
Rule 15    declarator_2 -> ID
Rule 16    declarator_2 -> ID ( )
Rule 17    declarator_2 -> ID [ ]
Rule 18    declarator_2 -> ID [ expression ]
Rule 19    initializer -> expression
Rule 20    initializer -> { expressions }
Rule 21    new_type_dec -> new_type ID { new_type_params } ;
Rule 22    new_type -> STRUCT
Rule 23    new_type -> CLASS
Rule 24    new_type_params -> new_type_param new_type_params
Rule 25    new_type_params -> new_type_param
Rule 26    new_type_param -> type declarators ;
Rule 27    func_def -> type ID ( params ) { statements }
Rule 28    func_def -> type ID ( ) { statements }
Rule 29    func_def -> type ID ( params ) { }
Rule 30    func_def -> type ID ( ) { }
Rule 31    params -> param , params
Rule 32    params -> param
Rule 33    param -> type declarator_2
Rule 34    statements -> statement statements
Rule 35    statements -> statement
Rule 36    statement -> expression ;
Rule 37    statement -> decl ;
Rule 38    statement -> conditional
Rule 39    statement -> iteration
Rule 40    statement -> jump ;
Rule 41    statement -> ;
Rule 42    conditional -> IF ( expression ) { stats_or_null }
Rule 43    conditional -> IF ( expression ) { stats_or_null } ELSE conditional
Rule 44    conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }
Rule 45    statement -> { stats_or_null }
Rule 46    stats_or_null -> statements
Rule 47    stats_or_null -> empty
Rule 48    iteration -> WHILE ( expression ) { stats_or_null }
Rule 49    iteration -> DO { stats_or_null } WHILE ( expression ) ;
Rule 50    iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
Rule 51    expr_or_null -> expression
Rule 52    expr_or_null -> empty
Rule 53    expr_or_null_or_init -> expr_or_null
Rule 54    expr_or_null_or_init -> usual_dec
Rule 55    assignment_expr -> ID assignmenteq_op expression
Rule 56    assignmenteq_op -> =
Rule 57    assignmenteq_op -> MULTEQ
Rule 58    assignmenteq_op -> ADDEQ
Rule 59    assignmenteq_op -> SUBEQ
Rule 60    assignmenteq_op -> MODEQ
Rule 61    assignmenteq_op -> DIVEQ
Rule 62    jump -> BREAK
Rule 63    jump -> CONTINUE
Rule 64    jump -> RETURN
Rule 65    jump -> RETURN expression
Rule 66    expressions -> expression , expressions
Rule 67    expressions -> expression
Rule 68    expression -> bin_expr
Rule 69    expression -> assignment_expr
Rule 70    expression -> bin_expr ? bin_expr : bin_expr
Rule 71    bin_expr -> pre_unary_expr bin_op bin_expr
Rule 72    bin_expr -> pre_unary_expr
Rule 73    bin_op -> +
Rule 74    bin_op -> -
Rule 75    bin_op -> *
Rule 76    bin_op -> /
Rule 77    bin_op -> LOGAND
Rule 78    bin_op -> LOGOR
Rule 79    bin_op -> LOGEQ
Rule 80    bin_op -> LOGNEQ
Rule 81    bin_op -> LSHIFT
Rule 82    bin_op -> RSHIFT
Rule 83    bin_op -> <
Rule 84    bin_op -> >
Rule 85    bin_op -> LEQ
Rule 86    bin_op -> GEQ
Rule 87    bin_op -> ^
Rule 88    pre_unary_expr -> PLUSPLUS pre_unary_expr
Rule 89    pre_unary_expr -> MINUSMINUS pre_unary_expr
Rule 90    pre_unary_expr -> + pre_unary_expr
Rule 91    pre_unary_expr -> - pre_unary_expr
Rule 92    pre_unary_expr -> ! pre_unary_expr
Rule 93    pre_unary_expr -> post_unary_expr
Rule 94    post_unary_expr -> post_unary_expr [ expression ]
Rule 95    post_unary_expr -> post_unary_expr ( )
Rule 96    post_unary_expr -> post_unary_expr ( expressions )
Rule 97    post_unary_expr -> post_unary_expr PLUSPLUS
Rule 98    post_unary_expr -> post_unary_expr MINUSMINUS
Rule 99    post_unary_expr -> post_unary_expr . ID
Rule 100   post_unary_expr -> post_unary_expr RARROW ID
Rule 101   post_unary_expr -> element
Rule 102   element -> ID
Rule 103   element -> NUMBER
Rule 104   element -> CHR
Rule 105   element -> STR
Rule 106   type -> VOID
Rule 107   type -> CHAR
Rule 108   type -> SHORT
Rule 109   type -> INT
Rule 110   type -> LONG
Rule 111   type -> FLOAT
Rule 112   type -> DOUBLE
Rule 113   empty -> <empty>

Terminals, with rules where they appear

!                    : 92
(                    : 16 27 28 29 30 42 43 44 48 49 50 95 96
)                    : 16 27 28 29 30 42 43 44 48 49 50 95 96
*                    : 75
+                    : 73 90
,                    : 11 31 66
-                    : 74 91
.                    : 99
/                    : 76
:                    : 70
;                    : 6 21 26 36 37 40 41 49 50 50
<                    : 83
=                    : 14 56
>                    : 84
?                    : 70
ADDEQ                : 58
BREAK                : 62
CHAR                 : 107
CHR                  : 104
CLASS                : 23
CONTINUE             : 63
DIVEQ                : 61
DO                   : 49
DOUBLE               : 112
ELSE                 : 43 44
FLOAT                : 111
FOR                  : 50
GEQ                  : 86
ID                   : 15 16 17 18 21 27 28 29 30 55 99 100 102
IF                   : 42 43 44
INCLUDE              : 5
INT                  : 109
LEQ                  : 85
LOGAND               : 77
LOGEQ                : 79
LOGNEQ               : 80
LOGOR                : 78
LONG                 : 110
LSHIFT               : 81
MINUSMINUS           : 89 98
MODEQ                : 60
MULTEQ               : 57
NUMBER               : 103
PLUSPLUS             : 88 97
RARROW               : 100
RETURN               : 64 65
RSHIFT               : 82
SHORT                : 108
STR                  : 105
STRUCT               : 22
SUBEQ                : 59
VOID                 : 106
WHILE                : 48 49
[                    : 17 18 94
]                    : 17 18 94
^                    : 87
error                : 
{                    : 20 21 27 28 29 30 42 43 44 44 45 48 49 50
}                    : 20 21 27 28 29 30 42 43 44 44 45 48 49 50

Nonterminals, with rules where they appear

assignment_expr      : 69
assignmenteq_op      : 55
bin_expr             : 68 70 70 70 71
bin_op               : 71
conditional          : 38 43
decl                 : 6 37
declarator_1         : 11 12
declarator_2         : 13 14 33
declarators          : 10 11 26
element              : 101
empty                : 47 52
expr_or_null         : 50 50 53
expr_or_null_or_init : 50
expression           : 18 19 36 42 43 44 48 49 51 55 65 66 67 94
expressions          : 20 66 96
external_decl        : 2 4
func_def             : 7
include              : 1 3
initializer          : 14
iteration            : 39
jump                 : 40
new_type             : 21
new_type_dec         : 9
new_type_param       : 24 25
new_type_params      : 21 24
param                : 31 32
params               : 27 29 31
post_unary_expr      : 93 94 95 96 97 98 99 100
pre_unary_expr       : 71 72 88 89 90 91 92
program              : 1 2 0
statement            : 34 35
statements           : 27 28 34 46
stats_or_null        : 42 43 44 44 45 48 49 50
type                 : 10 26 27 28 29 30 33
usual_dec            : 8 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (27) func_def -> . type ID ( params ) { statements }
    (28) func_def -> . type ID ( ) { statements }
    (29) func_def -> . type ID ( params ) { }
    (30) func_def -> . type ID ( ) { }
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS

    INCLUDE         shift and go to state 4
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19

    program                        shift and go to state 1
    include                        shift and go to state 2
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 6
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    type                           shift and go to state 9
    new_type                       shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> include . program
    (3) program -> include .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (27) func_def -> . type ID ( params ) { statements }
    (28) func_def -> . type ID ( ) { statements }
    (29) func_def -> . type ID ( params ) { }
    (30) func_def -> . type ID ( ) { }
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS

    $end            reduce using rule 3 (program -> include .)
    INCLUDE         shift and go to state 4
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19

    include                        shift and go to state 2
    program                        shift and go to state 20
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 6
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    type                           shift and go to state 9
    new_type                       shift and go to state 10

state 3

    (2) program -> external_decl . program
    (4) program -> external_decl .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (27) func_def -> . type ID ( params ) { statements }
    (28) func_def -> . type ID ( ) { statements }
    (29) func_def -> . type ID ( params ) { }
    (30) func_def -> . type ID ( ) { }
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS

    $end            reduce using rule 4 (program -> external_decl .)
    INCLUDE         shift and go to state 4
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19

    external_decl                  shift and go to state 3
    program                        shift and go to state 21
    include                        shift and go to state 2
    decl                           shift and go to state 5
    func_def                       shift and go to state 6
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    type                           shift and go to state 9
    new_type                       shift and go to state 10

state 4

    (5) include -> INCLUDE .

    INCLUDE         reduce using rule 5 (include -> INCLUDE .)
    VOID            reduce using rule 5 (include -> INCLUDE .)
    CHAR            reduce using rule 5 (include -> INCLUDE .)
    SHORT           reduce using rule 5 (include -> INCLUDE .)
    INT             reduce using rule 5 (include -> INCLUDE .)
    LONG            reduce using rule 5 (include -> INCLUDE .)
    FLOAT           reduce using rule 5 (include -> INCLUDE .)
    DOUBLE          reduce using rule 5 (include -> INCLUDE .)
    STRUCT          reduce using rule 5 (include -> INCLUDE .)
    CLASS           reduce using rule 5 (include -> INCLUDE .)
    $end            reduce using rule 5 (include -> INCLUDE .)


state 5

    (6) external_decl -> decl . ;

    ;               shift and go to state 22


state 6

    (7) external_decl -> func_def .

    INCLUDE         reduce using rule 7 (external_decl -> func_def .)
    VOID            reduce using rule 7 (external_decl -> func_def .)
    CHAR            reduce using rule 7 (external_decl -> func_def .)
    SHORT           reduce using rule 7 (external_decl -> func_def .)
    INT             reduce using rule 7 (external_decl -> func_def .)
    LONG            reduce using rule 7 (external_decl -> func_def .)
    FLOAT           reduce using rule 7 (external_decl -> func_def .)
    DOUBLE          reduce using rule 7 (external_decl -> func_def .)
    STRUCT          reduce using rule 7 (external_decl -> func_def .)
    CLASS           reduce using rule 7 (external_decl -> func_def .)
    $end            reduce using rule 7 (external_decl -> func_def .)


state 7

    (8) decl -> usual_dec .

    ;               reduce using rule 8 (decl -> usual_dec .)


state 8

    (9) decl -> new_type_dec .

    ;               reduce using rule 9 (decl -> new_type_dec .)


state 9

    (27) func_def -> type . ID ( params ) { statements }
    (28) func_def -> type . ID ( ) { statements }
    (29) func_def -> type . ID ( params ) { }
    (30) func_def -> type . ID ( ) { }
    (10) usual_dec -> type . declarators
    (11) declarators -> . declarator_1 , declarators
    (12) declarators -> . declarator_1
    (13) declarator_1 -> . declarator_2
    (14) declarator_1 -> . declarator_2 = initializer
    (15) declarator_2 -> . ID
    (16) declarator_2 -> . ID ( )
    (17) declarator_2 -> . ID [ ]
    (18) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 23

    declarators                    shift and go to state 24
    declarator_1                   shift and go to state 25
    declarator_2                   shift and go to state 26

state 10

    (21) new_type_dec -> new_type . ID { new_type_params } ;

    ID              shift and go to state 27


state 11

    (106) type -> VOID .

    ID              reduce using rule 106 (type -> VOID .)


state 12

    (107) type -> CHAR .

    ID              reduce using rule 107 (type -> CHAR .)


state 13

    (108) type -> SHORT .

    ID              reduce using rule 108 (type -> SHORT .)


state 14

    (109) type -> INT .

    ID              reduce using rule 109 (type -> INT .)


state 15

    (110) type -> LONG .

    ID              reduce using rule 110 (type -> LONG .)


state 16

    (111) type -> FLOAT .

    ID              reduce using rule 111 (type -> FLOAT .)


state 17

    (112) type -> DOUBLE .

    ID              reduce using rule 112 (type -> DOUBLE .)


state 18

    (22) new_type -> STRUCT .

    ID              reduce using rule 22 (new_type -> STRUCT .)


state 19

    (23) new_type -> CLASS .

    ID              reduce using rule 23 (new_type -> CLASS .)


state 20

    (1) program -> include program .

    $end            reduce using rule 1 (program -> include program .)


state 21

    (2) program -> external_decl program .

    $end            reduce using rule 2 (program -> external_decl program .)


state 22

    (6) external_decl -> decl ; .

    INCLUDE         reduce using rule 6 (external_decl -> decl ; .)
    VOID            reduce using rule 6 (external_decl -> decl ; .)
    CHAR            reduce using rule 6 (external_decl -> decl ; .)
    SHORT           reduce using rule 6 (external_decl -> decl ; .)
    INT             reduce using rule 6 (external_decl -> decl ; .)
    LONG            reduce using rule 6 (external_decl -> decl ; .)
    FLOAT           reduce using rule 6 (external_decl -> decl ; .)
    DOUBLE          reduce using rule 6 (external_decl -> decl ; .)
    STRUCT          reduce using rule 6 (external_decl -> decl ; .)
    CLASS           reduce using rule 6 (external_decl -> decl ; .)
    $end            reduce using rule 6 (external_decl -> decl ; .)


state 23

    (27) func_def -> type ID . ( params ) { statements }
    (28) func_def -> type ID . ( ) { statements }
    (29) func_def -> type ID . ( params ) { }
    (30) func_def -> type ID . ( ) { }
    (15) declarator_2 -> ID .
    (16) declarator_2 -> ID . ( )
    (17) declarator_2 -> ID . [ ]
    (18) declarator_2 -> ID . [ expression ]

    (               shift and go to state 28
    =               reduce using rule 15 (declarator_2 -> ID .)
    ,               reduce using rule 15 (declarator_2 -> ID .)
    ;               reduce using rule 15 (declarator_2 -> ID .)
    [               shift and go to state 29


state 24

    (10) usual_dec -> type declarators .

    ;               reduce using rule 10 (usual_dec -> type declarators .)


state 25

    (11) declarators -> declarator_1 . , declarators
    (12) declarators -> declarator_1 .

    ,               shift and go to state 30
    ;               reduce using rule 12 (declarators -> declarator_1 .)


state 26

    (13) declarator_1 -> declarator_2 .
    (14) declarator_1 -> declarator_2 . = initializer

    ,               reduce using rule 13 (declarator_1 -> declarator_2 .)
    ;               reduce using rule 13 (declarator_1 -> declarator_2 .)
    =               shift and go to state 31


state 27

    (21) new_type_dec -> new_type ID . { new_type_params } ;

    {               shift and go to state 32


state 28

    (27) func_def -> type ID ( . params ) { statements }
    (28) func_def -> type ID ( . ) { statements }
    (29) func_def -> type ID ( . params ) { }
    (30) func_def -> type ID ( . ) { }
    (16) declarator_2 -> ID ( . )
    (31) params -> . param , params
    (32) params -> . param
    (33) param -> . type declarator_2
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE

    )               shift and go to state 35
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17

    type                           shift and go to state 33
    params                         shift and go to state 34
    param                          shift and go to state 36

state 29

    (17) declarator_2 -> ID [ . ]
    (18) declarator_2 -> ID [ . expression ]
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ]               shift and go to state 38
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 39
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 30

    (11) declarators -> declarator_1 , . declarators
    (11) declarators -> . declarator_1 , declarators
    (12) declarators -> . declarator_1
    (13) declarator_1 -> . declarator_2
    (14) declarator_1 -> . declarator_2 = initializer
    (15) declarator_2 -> . ID
    (16) declarator_2 -> . ID ( )
    (17) declarator_2 -> . ID [ ]
    (18) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 54

    declarator_1                   shift and go to state 25
    declarators                    shift and go to state 53
    declarator_2                   shift and go to state 26

state 31

    (14) declarator_1 -> declarator_2 = . initializer
    (19) initializer -> . expression
    (20) initializer -> . { expressions }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    {               shift and go to state 57
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    initializer                    shift and go to state 55
    expression                     shift and go to state 56
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 32

    (21) new_type_dec -> new_type ID { . new_type_params } ;
    (24) new_type_params -> . new_type_param new_type_params
    (25) new_type_params -> . new_type_param
    (26) new_type_param -> . type declarators ;
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17

    new_type_params                shift and go to state 58
    new_type_param                 shift and go to state 59
    type                           shift and go to state 60

state 33

    (33) param -> type . declarator_2
    (15) declarator_2 -> . ID
    (16) declarator_2 -> . ID ( )
    (17) declarator_2 -> . ID [ ]
    (18) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 54

    declarator_2                   shift and go to state 61

state 34

    (27) func_def -> type ID ( params . ) { statements }
    (29) func_def -> type ID ( params . ) { }

    )               shift and go to state 62


state 35

    (28) func_def -> type ID ( ) . { statements }
    (30) func_def -> type ID ( ) . { }
    (16) declarator_2 -> ID ( ) .

    {               shift and go to state 63
    =               reduce using rule 16 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 16 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 16 (declarator_2 -> ID ( ) .)


state 36

    (31) params -> param . , params
    (32) params -> param .

    ,               shift and go to state 64
    )               reduce using rule 32 (params -> param .)


state 37

    (55) assignment_expr -> ID . assignmenteq_op expression
    (102) element -> ID .
    (56) assignmenteq_op -> . =
    (57) assignmenteq_op -> . MULTEQ
    (58) assignmenteq_op -> . ADDEQ
    (59) assignmenteq_op -> . SUBEQ
    (60) assignmenteq_op -> . MODEQ
    (61) assignmenteq_op -> . DIVEQ

    [               reduce using rule 102 (element -> ID .)
    (               reduce using rule 102 (element -> ID .)
    PLUSPLUS        reduce using rule 102 (element -> ID .)
    MINUSMINUS      reduce using rule 102 (element -> ID .)
    .               reduce using rule 102 (element -> ID .)
    RARROW          reduce using rule 102 (element -> ID .)
    +               reduce using rule 102 (element -> ID .)
    -               reduce using rule 102 (element -> ID .)
    *               reduce using rule 102 (element -> ID .)
    /               reduce using rule 102 (element -> ID .)
    LOGAND          reduce using rule 102 (element -> ID .)
    LOGOR           reduce using rule 102 (element -> ID .)
    LOGEQ           reduce using rule 102 (element -> ID .)
    LOGNEQ          reduce using rule 102 (element -> ID .)
    LSHIFT          reduce using rule 102 (element -> ID .)
    RSHIFT          reduce using rule 102 (element -> ID .)
    <               reduce using rule 102 (element -> ID .)
    >               reduce using rule 102 (element -> ID .)
    LEQ             reduce using rule 102 (element -> ID .)
    GEQ             reduce using rule 102 (element -> ID .)
    ^               reduce using rule 102 (element -> ID .)
    ?               reduce using rule 102 (element -> ID .)
    ]               reduce using rule 102 (element -> ID .)
    ,               reduce using rule 102 (element -> ID .)
    ;               reduce using rule 102 (element -> ID .)
    }               reduce using rule 102 (element -> ID .)
    )               reduce using rule 102 (element -> ID .)
    =               shift and go to state 66
    MULTEQ          shift and go to state 67
    ADDEQ           shift and go to state 68
    SUBEQ           shift and go to state 69
    MODEQ           shift and go to state 70
    DIVEQ           shift and go to state 71

    assignmenteq_op                shift and go to state 65

state 38

    (17) declarator_2 -> ID [ ] .

    =               reduce using rule 17 (declarator_2 -> ID [ ] .)
    ,               reduce using rule 17 (declarator_2 -> ID [ ] .)
    ;               reduce using rule 17 (declarator_2 -> ID [ ] .)
    )               reduce using rule 17 (declarator_2 -> ID [ ] .)


state 39

    (18) declarator_2 -> ID [ expression . ]

    ]               shift and go to state 72


state 40

    (68) expression -> bin_expr .
    (70) expression -> bin_expr . ? bin_expr : bin_expr

    ]               reduce using rule 68 (expression -> bin_expr .)
    ,               reduce using rule 68 (expression -> bin_expr .)
    ;               reduce using rule 68 (expression -> bin_expr .)
    }               reduce using rule 68 (expression -> bin_expr .)
    )               reduce using rule 68 (expression -> bin_expr .)
    ?               shift and go to state 73


state 41

    (69) expression -> assignment_expr .

    ]               reduce using rule 69 (expression -> assignment_expr .)
    ,               reduce using rule 69 (expression -> assignment_expr .)
    ;               reduce using rule 69 (expression -> assignment_expr .)
    }               reduce using rule 69 (expression -> assignment_expr .)
    )               reduce using rule 69 (expression -> assignment_expr .)


state 42

    (71) bin_expr -> pre_unary_expr . bin_op bin_expr
    (72) bin_expr -> pre_unary_expr .
    (73) bin_op -> . +
    (74) bin_op -> . -
    (75) bin_op -> . *
    (76) bin_op -> . /
    (77) bin_op -> . LOGAND
    (78) bin_op -> . LOGOR
    (79) bin_op -> . LOGEQ
    (80) bin_op -> . LOGNEQ
    (81) bin_op -> . LSHIFT
    (82) bin_op -> . RSHIFT
    (83) bin_op -> . <
    (84) bin_op -> . >
    (85) bin_op -> . LEQ
    (86) bin_op -> . GEQ
    (87) bin_op -> . ^

    ?               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    ]               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    ,               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    ;               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    }               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    )               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    :               reduce using rule 72 (bin_expr -> pre_unary_expr .)
    +               shift and go to state 75
    -               shift and go to state 76
    *               shift and go to state 77
    /               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LSHIFT          shift and go to state 83
    RSHIFT          shift and go to state 84
    <               shift and go to state 85
    >               shift and go to state 86
    LEQ             shift and go to state 87
    GEQ             shift and go to state 88
    ^               shift and go to state 89

    bin_op                         shift and go to state 74

state 43

    (88) pre_unary_expr -> PLUSPLUS . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 90
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 44

    (89) pre_unary_expr -> MINUSMINUS . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 92
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 45

    (90) pre_unary_expr -> + . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 93
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 46

    (91) pre_unary_expr -> - . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 94
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 47

    (92) pre_unary_expr -> ! . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 95
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 48

    (93) pre_unary_expr -> post_unary_expr .
    (94) post_unary_expr -> post_unary_expr . [ expression ]
    (95) post_unary_expr -> post_unary_expr . ( )
    (96) post_unary_expr -> post_unary_expr . ( expressions )
    (97) post_unary_expr -> post_unary_expr . PLUSPLUS
    (98) post_unary_expr -> post_unary_expr . MINUSMINUS
    (99) post_unary_expr -> post_unary_expr . . ID
    (100) post_unary_expr -> post_unary_expr . RARROW ID

    +               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    -               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    *               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    /               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LOGAND          reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LOGOR           reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LOGEQ           reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LOGNEQ          reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LSHIFT          reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    RSHIFT          reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    <               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    >               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    LEQ             reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    GEQ             reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    ^               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    ?               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    ]               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    ,               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    ;               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    }               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    )               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    :               reduce using rule 93 (pre_unary_expr -> post_unary_expr .)
    [               shift and go to state 96
    (               shift and go to state 97
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 99
    .               shift and go to state 100
    RARROW          shift and go to state 101


state 49

    (101) post_unary_expr -> element .

    [               reduce using rule 101 (post_unary_expr -> element .)
    (               reduce using rule 101 (post_unary_expr -> element .)
    PLUSPLUS        reduce using rule 101 (post_unary_expr -> element .)
    MINUSMINUS      reduce using rule 101 (post_unary_expr -> element .)
    .               reduce using rule 101 (post_unary_expr -> element .)
    RARROW          reduce using rule 101 (post_unary_expr -> element .)
    +               reduce using rule 101 (post_unary_expr -> element .)
    -               reduce using rule 101 (post_unary_expr -> element .)
    *               reduce using rule 101 (post_unary_expr -> element .)
    /               reduce using rule 101 (post_unary_expr -> element .)
    LOGAND          reduce using rule 101 (post_unary_expr -> element .)
    LOGOR           reduce using rule 101 (post_unary_expr -> element .)
    LOGEQ           reduce using rule 101 (post_unary_expr -> element .)
    LOGNEQ          reduce using rule 101 (post_unary_expr -> element .)
    LSHIFT          reduce using rule 101 (post_unary_expr -> element .)
    RSHIFT          reduce using rule 101 (post_unary_expr -> element .)
    <               reduce using rule 101 (post_unary_expr -> element .)
    >               reduce using rule 101 (post_unary_expr -> element .)
    LEQ             reduce using rule 101 (post_unary_expr -> element .)
    GEQ             reduce using rule 101 (post_unary_expr -> element .)
    ^               reduce using rule 101 (post_unary_expr -> element .)
    ?               reduce using rule 101 (post_unary_expr -> element .)
    ]               reduce using rule 101 (post_unary_expr -> element .)
    ,               reduce using rule 101 (post_unary_expr -> element .)
    ;               reduce using rule 101 (post_unary_expr -> element .)
    }               reduce using rule 101 (post_unary_expr -> element .)
    )               reduce using rule 101 (post_unary_expr -> element .)
    :               reduce using rule 101 (post_unary_expr -> element .)


state 50

    (103) element -> NUMBER .

    [               reduce using rule 103 (element -> NUMBER .)
    (               reduce using rule 103 (element -> NUMBER .)
    PLUSPLUS        reduce using rule 103 (element -> NUMBER .)
    MINUSMINUS      reduce using rule 103 (element -> NUMBER .)
    .               reduce using rule 103 (element -> NUMBER .)
    RARROW          reduce using rule 103 (element -> NUMBER .)
    +               reduce using rule 103 (element -> NUMBER .)
    -               reduce using rule 103 (element -> NUMBER .)
    *               reduce using rule 103 (element -> NUMBER .)
    /               reduce using rule 103 (element -> NUMBER .)
    LOGAND          reduce using rule 103 (element -> NUMBER .)
    LOGOR           reduce using rule 103 (element -> NUMBER .)
    LOGEQ           reduce using rule 103 (element -> NUMBER .)
    LOGNEQ          reduce using rule 103 (element -> NUMBER .)
    LSHIFT          reduce using rule 103 (element -> NUMBER .)
    RSHIFT          reduce using rule 103 (element -> NUMBER .)
    <               reduce using rule 103 (element -> NUMBER .)
    >               reduce using rule 103 (element -> NUMBER .)
    LEQ             reduce using rule 103 (element -> NUMBER .)
    GEQ             reduce using rule 103 (element -> NUMBER .)
    ^               reduce using rule 103 (element -> NUMBER .)
    ?               reduce using rule 103 (element -> NUMBER .)
    ]               reduce using rule 103 (element -> NUMBER .)
    ,               reduce using rule 103 (element -> NUMBER .)
    ;               reduce using rule 103 (element -> NUMBER .)
    }               reduce using rule 103 (element -> NUMBER .)
    )               reduce using rule 103 (element -> NUMBER .)
    :               reduce using rule 103 (element -> NUMBER .)


state 51

    (104) element -> CHR .

    [               reduce using rule 104 (element -> CHR .)
    (               reduce using rule 104 (element -> CHR .)
    PLUSPLUS        reduce using rule 104 (element -> CHR .)
    MINUSMINUS      reduce using rule 104 (element -> CHR .)
    .               reduce using rule 104 (element -> CHR .)
    RARROW          reduce using rule 104 (element -> CHR .)
    +               reduce using rule 104 (element -> CHR .)
    -               reduce using rule 104 (element -> CHR .)
    *               reduce using rule 104 (element -> CHR .)
    /               reduce using rule 104 (element -> CHR .)
    LOGAND          reduce using rule 104 (element -> CHR .)
    LOGOR           reduce using rule 104 (element -> CHR .)
    LOGEQ           reduce using rule 104 (element -> CHR .)
    LOGNEQ          reduce using rule 104 (element -> CHR .)
    LSHIFT          reduce using rule 104 (element -> CHR .)
    RSHIFT          reduce using rule 104 (element -> CHR .)
    <               reduce using rule 104 (element -> CHR .)
    >               reduce using rule 104 (element -> CHR .)
    LEQ             reduce using rule 104 (element -> CHR .)
    GEQ             reduce using rule 104 (element -> CHR .)
    ^               reduce using rule 104 (element -> CHR .)
    ?               reduce using rule 104 (element -> CHR .)
    ]               reduce using rule 104 (element -> CHR .)
    ,               reduce using rule 104 (element -> CHR .)
    ;               reduce using rule 104 (element -> CHR .)
    }               reduce using rule 104 (element -> CHR .)
    )               reduce using rule 104 (element -> CHR .)
    :               reduce using rule 104 (element -> CHR .)


state 52

    (105) element -> STR .

    [               reduce using rule 105 (element -> STR .)
    (               reduce using rule 105 (element -> STR .)
    PLUSPLUS        reduce using rule 105 (element -> STR .)
    MINUSMINUS      reduce using rule 105 (element -> STR .)
    .               reduce using rule 105 (element -> STR .)
    RARROW          reduce using rule 105 (element -> STR .)
    +               reduce using rule 105 (element -> STR .)
    -               reduce using rule 105 (element -> STR .)
    *               reduce using rule 105 (element -> STR .)
    /               reduce using rule 105 (element -> STR .)
    LOGAND          reduce using rule 105 (element -> STR .)
    LOGOR           reduce using rule 105 (element -> STR .)
    LOGEQ           reduce using rule 105 (element -> STR .)
    LOGNEQ          reduce using rule 105 (element -> STR .)
    LSHIFT          reduce using rule 105 (element -> STR .)
    RSHIFT          reduce using rule 105 (element -> STR .)
    <               reduce using rule 105 (element -> STR .)
    >               reduce using rule 105 (element -> STR .)
    LEQ             reduce using rule 105 (element -> STR .)
    GEQ             reduce using rule 105 (element -> STR .)
    ^               reduce using rule 105 (element -> STR .)
    ?               reduce using rule 105 (element -> STR .)
    ]               reduce using rule 105 (element -> STR .)
    ,               reduce using rule 105 (element -> STR .)
    ;               reduce using rule 105 (element -> STR .)
    }               reduce using rule 105 (element -> STR .)
    )               reduce using rule 105 (element -> STR .)
    :               reduce using rule 105 (element -> STR .)


state 53

    (11) declarators -> declarator_1 , declarators .

    ;               reduce using rule 11 (declarators -> declarator_1 , declarators .)


state 54

    (15) declarator_2 -> ID .
    (16) declarator_2 -> ID . ( )
    (17) declarator_2 -> ID . [ ]
    (18) declarator_2 -> ID . [ expression ]

    =               reduce using rule 15 (declarator_2 -> ID .)
    ,               reduce using rule 15 (declarator_2 -> ID .)
    ;               reduce using rule 15 (declarator_2 -> ID .)
    )               reduce using rule 15 (declarator_2 -> ID .)
    (               shift and go to state 102
    [               shift and go to state 29


state 55

    (14) declarator_1 -> declarator_2 = initializer .

    ,               reduce using rule 14 (declarator_1 -> declarator_2 = initializer .)
    ;               reduce using rule 14 (declarator_1 -> declarator_2 = initializer .)


state 56

    (19) initializer -> expression .

    ,               reduce using rule 19 (initializer -> expression .)
    ;               reduce using rule 19 (initializer -> expression .)


state 57

    (20) initializer -> { . expressions }
    (66) expressions -> . expression , expressions
    (67) expressions -> . expression
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expressions                    shift and go to state 103
    expression                     shift and go to state 104
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 58

    (21) new_type_dec -> new_type ID { new_type_params . } ;

    }               shift and go to state 105


state 59

    (24) new_type_params -> new_type_param . new_type_params
    (25) new_type_params -> new_type_param .
    (24) new_type_params -> . new_type_param new_type_params
    (25) new_type_params -> . new_type_param
    (26) new_type_param -> . type declarators ;
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE

    }               reduce using rule 25 (new_type_params -> new_type_param .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17

    new_type_param                 shift and go to state 59
    new_type_params                shift and go to state 106
    type                           shift and go to state 60

state 60

    (26) new_type_param -> type . declarators ;
    (11) declarators -> . declarator_1 , declarators
    (12) declarators -> . declarator_1
    (13) declarator_1 -> . declarator_2
    (14) declarator_1 -> . declarator_2 = initializer
    (15) declarator_2 -> . ID
    (16) declarator_2 -> . ID ( )
    (17) declarator_2 -> . ID [ ]
    (18) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 54

    declarators                    shift and go to state 107
    declarator_1                   shift and go to state 25
    declarator_2                   shift and go to state 26

state 61

    (33) param -> type declarator_2 .

    ,               reduce using rule 33 (param -> type declarator_2 .)
    )               reduce using rule 33 (param -> type declarator_2 .)


state 62

    (27) func_def -> type ID ( params ) . { statements }
    (29) func_def -> type ID ( params ) . { }

    {               shift and go to state 108


state 63

    (28) func_def -> type ID ( ) { . statements }
    (30) func_def -> type ID ( ) { . }
    (34) statements -> . statement statements
    (35) statements -> . statement
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               shift and go to state 112
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    type                           shift and go to state 109
    statements                     shift and go to state 111
    statement                      shift and go to state 113
    expression                     shift and go to state 114
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 64

    (31) params -> param , . params
    (31) params -> . param , params
    (32) params -> . param
    (33) param -> . type declarator_2
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17

    param                          shift and go to state 36
    params                         shift and go to state 127
    type                           shift and go to state 33

state 65

    (55) assignment_expr -> ID assignmenteq_op . expression
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 128
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 66

    (56) assignmenteq_op -> = .

    ID              reduce using rule 56 (assignmenteq_op -> = .)
    PLUSPLUS        reduce using rule 56 (assignmenteq_op -> = .)
    MINUSMINUS      reduce using rule 56 (assignmenteq_op -> = .)
    +               reduce using rule 56 (assignmenteq_op -> = .)
    -               reduce using rule 56 (assignmenteq_op -> = .)
    !               reduce using rule 56 (assignmenteq_op -> = .)
    NUMBER          reduce using rule 56 (assignmenteq_op -> = .)
    CHR             reduce using rule 56 (assignmenteq_op -> = .)
    STR             reduce using rule 56 (assignmenteq_op -> = .)


state 67

    (57) assignmenteq_op -> MULTEQ .

    ID              reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    PLUSPLUS        reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    MINUSMINUS      reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    +               reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    -               reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    !               reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    NUMBER          reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    CHR             reduce using rule 57 (assignmenteq_op -> MULTEQ .)
    STR             reduce using rule 57 (assignmenteq_op -> MULTEQ .)


state 68

    (58) assignmenteq_op -> ADDEQ .

    ID              reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    PLUSPLUS        reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    MINUSMINUS      reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    +               reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    -               reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    !               reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    NUMBER          reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    CHR             reduce using rule 58 (assignmenteq_op -> ADDEQ .)
    STR             reduce using rule 58 (assignmenteq_op -> ADDEQ .)


state 69

    (59) assignmenteq_op -> SUBEQ .

    ID              reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    PLUSPLUS        reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    MINUSMINUS      reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    +               reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    -               reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    !               reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    NUMBER          reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    CHR             reduce using rule 59 (assignmenteq_op -> SUBEQ .)
    STR             reduce using rule 59 (assignmenteq_op -> SUBEQ .)


state 70

    (60) assignmenteq_op -> MODEQ .

    ID              reduce using rule 60 (assignmenteq_op -> MODEQ .)
    PLUSPLUS        reduce using rule 60 (assignmenteq_op -> MODEQ .)
    MINUSMINUS      reduce using rule 60 (assignmenteq_op -> MODEQ .)
    +               reduce using rule 60 (assignmenteq_op -> MODEQ .)
    -               reduce using rule 60 (assignmenteq_op -> MODEQ .)
    !               reduce using rule 60 (assignmenteq_op -> MODEQ .)
    NUMBER          reduce using rule 60 (assignmenteq_op -> MODEQ .)
    CHR             reduce using rule 60 (assignmenteq_op -> MODEQ .)
    STR             reduce using rule 60 (assignmenteq_op -> MODEQ .)


state 71

    (61) assignmenteq_op -> DIVEQ .

    ID              reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    PLUSPLUS        reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    MINUSMINUS      reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    +               reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    -               reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    !               reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    NUMBER          reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    CHR             reduce using rule 61 (assignmenteq_op -> DIVEQ .)
    STR             reduce using rule 61 (assignmenteq_op -> DIVEQ .)


state 72

    (18) declarator_2 -> ID [ expression ] .

    =               reduce using rule 18 (declarator_2 -> ID [ expression ] .)
    ,               reduce using rule 18 (declarator_2 -> ID [ expression ] .)
    ;               reduce using rule 18 (declarator_2 -> ID [ expression ] .)
    )               reduce using rule 18 (declarator_2 -> ID [ expression ] .)


state 73

    (70) expression -> bin_expr ? . bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    bin_expr                       shift and go to state 129
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 74

    (71) bin_expr -> pre_unary_expr bin_op . bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    pre_unary_expr                 shift and go to state 42
    bin_expr                       shift and go to state 130
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 75

    (73) bin_op -> + .

    PLUSPLUS        reduce using rule 73 (bin_op -> + .)
    MINUSMINUS      reduce using rule 73 (bin_op -> + .)
    +               reduce using rule 73 (bin_op -> + .)
    -               reduce using rule 73 (bin_op -> + .)
    !               reduce using rule 73 (bin_op -> + .)
    ID              reduce using rule 73 (bin_op -> + .)
    NUMBER          reduce using rule 73 (bin_op -> + .)
    CHR             reduce using rule 73 (bin_op -> + .)
    STR             reduce using rule 73 (bin_op -> + .)


state 76

    (74) bin_op -> - .

    PLUSPLUS        reduce using rule 74 (bin_op -> - .)
    MINUSMINUS      reduce using rule 74 (bin_op -> - .)
    +               reduce using rule 74 (bin_op -> - .)
    -               reduce using rule 74 (bin_op -> - .)
    !               reduce using rule 74 (bin_op -> - .)
    ID              reduce using rule 74 (bin_op -> - .)
    NUMBER          reduce using rule 74 (bin_op -> - .)
    CHR             reduce using rule 74 (bin_op -> - .)
    STR             reduce using rule 74 (bin_op -> - .)


state 77

    (75) bin_op -> * .

    PLUSPLUS        reduce using rule 75 (bin_op -> * .)
    MINUSMINUS      reduce using rule 75 (bin_op -> * .)
    +               reduce using rule 75 (bin_op -> * .)
    -               reduce using rule 75 (bin_op -> * .)
    !               reduce using rule 75 (bin_op -> * .)
    ID              reduce using rule 75 (bin_op -> * .)
    NUMBER          reduce using rule 75 (bin_op -> * .)
    CHR             reduce using rule 75 (bin_op -> * .)
    STR             reduce using rule 75 (bin_op -> * .)


state 78

    (76) bin_op -> / .

    PLUSPLUS        reduce using rule 76 (bin_op -> / .)
    MINUSMINUS      reduce using rule 76 (bin_op -> / .)
    +               reduce using rule 76 (bin_op -> / .)
    -               reduce using rule 76 (bin_op -> / .)
    !               reduce using rule 76 (bin_op -> / .)
    ID              reduce using rule 76 (bin_op -> / .)
    NUMBER          reduce using rule 76 (bin_op -> / .)
    CHR             reduce using rule 76 (bin_op -> / .)
    STR             reduce using rule 76 (bin_op -> / .)


state 79

    (77) bin_op -> LOGAND .

    PLUSPLUS        reduce using rule 77 (bin_op -> LOGAND .)
    MINUSMINUS      reduce using rule 77 (bin_op -> LOGAND .)
    +               reduce using rule 77 (bin_op -> LOGAND .)
    -               reduce using rule 77 (bin_op -> LOGAND .)
    !               reduce using rule 77 (bin_op -> LOGAND .)
    ID              reduce using rule 77 (bin_op -> LOGAND .)
    NUMBER          reduce using rule 77 (bin_op -> LOGAND .)
    CHR             reduce using rule 77 (bin_op -> LOGAND .)
    STR             reduce using rule 77 (bin_op -> LOGAND .)


state 80

    (78) bin_op -> LOGOR .

    PLUSPLUS        reduce using rule 78 (bin_op -> LOGOR .)
    MINUSMINUS      reduce using rule 78 (bin_op -> LOGOR .)
    +               reduce using rule 78 (bin_op -> LOGOR .)
    -               reduce using rule 78 (bin_op -> LOGOR .)
    !               reduce using rule 78 (bin_op -> LOGOR .)
    ID              reduce using rule 78 (bin_op -> LOGOR .)
    NUMBER          reduce using rule 78 (bin_op -> LOGOR .)
    CHR             reduce using rule 78 (bin_op -> LOGOR .)
    STR             reduce using rule 78 (bin_op -> LOGOR .)


state 81

    (79) bin_op -> LOGEQ .

    PLUSPLUS        reduce using rule 79 (bin_op -> LOGEQ .)
    MINUSMINUS      reduce using rule 79 (bin_op -> LOGEQ .)
    +               reduce using rule 79 (bin_op -> LOGEQ .)
    -               reduce using rule 79 (bin_op -> LOGEQ .)
    !               reduce using rule 79 (bin_op -> LOGEQ .)
    ID              reduce using rule 79 (bin_op -> LOGEQ .)
    NUMBER          reduce using rule 79 (bin_op -> LOGEQ .)
    CHR             reduce using rule 79 (bin_op -> LOGEQ .)
    STR             reduce using rule 79 (bin_op -> LOGEQ .)


state 82

    (80) bin_op -> LOGNEQ .

    PLUSPLUS        reduce using rule 80 (bin_op -> LOGNEQ .)
    MINUSMINUS      reduce using rule 80 (bin_op -> LOGNEQ .)
    +               reduce using rule 80 (bin_op -> LOGNEQ .)
    -               reduce using rule 80 (bin_op -> LOGNEQ .)
    !               reduce using rule 80 (bin_op -> LOGNEQ .)
    ID              reduce using rule 80 (bin_op -> LOGNEQ .)
    NUMBER          reduce using rule 80 (bin_op -> LOGNEQ .)
    CHR             reduce using rule 80 (bin_op -> LOGNEQ .)
    STR             reduce using rule 80 (bin_op -> LOGNEQ .)


state 83

    (81) bin_op -> LSHIFT .

    PLUSPLUS        reduce using rule 81 (bin_op -> LSHIFT .)
    MINUSMINUS      reduce using rule 81 (bin_op -> LSHIFT .)
    +               reduce using rule 81 (bin_op -> LSHIFT .)
    -               reduce using rule 81 (bin_op -> LSHIFT .)
    !               reduce using rule 81 (bin_op -> LSHIFT .)
    ID              reduce using rule 81 (bin_op -> LSHIFT .)
    NUMBER          reduce using rule 81 (bin_op -> LSHIFT .)
    CHR             reduce using rule 81 (bin_op -> LSHIFT .)
    STR             reduce using rule 81 (bin_op -> LSHIFT .)


state 84

    (82) bin_op -> RSHIFT .

    PLUSPLUS        reduce using rule 82 (bin_op -> RSHIFT .)
    MINUSMINUS      reduce using rule 82 (bin_op -> RSHIFT .)
    +               reduce using rule 82 (bin_op -> RSHIFT .)
    -               reduce using rule 82 (bin_op -> RSHIFT .)
    !               reduce using rule 82 (bin_op -> RSHIFT .)
    ID              reduce using rule 82 (bin_op -> RSHIFT .)
    NUMBER          reduce using rule 82 (bin_op -> RSHIFT .)
    CHR             reduce using rule 82 (bin_op -> RSHIFT .)
    STR             reduce using rule 82 (bin_op -> RSHIFT .)


state 85

    (83) bin_op -> < .

    PLUSPLUS        reduce using rule 83 (bin_op -> < .)
    MINUSMINUS      reduce using rule 83 (bin_op -> < .)
    +               reduce using rule 83 (bin_op -> < .)
    -               reduce using rule 83 (bin_op -> < .)
    !               reduce using rule 83 (bin_op -> < .)
    ID              reduce using rule 83 (bin_op -> < .)
    NUMBER          reduce using rule 83 (bin_op -> < .)
    CHR             reduce using rule 83 (bin_op -> < .)
    STR             reduce using rule 83 (bin_op -> < .)


state 86

    (84) bin_op -> > .

    PLUSPLUS        reduce using rule 84 (bin_op -> > .)
    MINUSMINUS      reduce using rule 84 (bin_op -> > .)
    +               reduce using rule 84 (bin_op -> > .)
    -               reduce using rule 84 (bin_op -> > .)
    !               reduce using rule 84 (bin_op -> > .)
    ID              reduce using rule 84 (bin_op -> > .)
    NUMBER          reduce using rule 84 (bin_op -> > .)
    CHR             reduce using rule 84 (bin_op -> > .)
    STR             reduce using rule 84 (bin_op -> > .)


state 87

    (85) bin_op -> LEQ .

    PLUSPLUS        reduce using rule 85 (bin_op -> LEQ .)
    MINUSMINUS      reduce using rule 85 (bin_op -> LEQ .)
    +               reduce using rule 85 (bin_op -> LEQ .)
    -               reduce using rule 85 (bin_op -> LEQ .)
    !               reduce using rule 85 (bin_op -> LEQ .)
    ID              reduce using rule 85 (bin_op -> LEQ .)
    NUMBER          reduce using rule 85 (bin_op -> LEQ .)
    CHR             reduce using rule 85 (bin_op -> LEQ .)
    STR             reduce using rule 85 (bin_op -> LEQ .)


state 88

    (86) bin_op -> GEQ .

    PLUSPLUS        reduce using rule 86 (bin_op -> GEQ .)
    MINUSMINUS      reduce using rule 86 (bin_op -> GEQ .)
    +               reduce using rule 86 (bin_op -> GEQ .)
    -               reduce using rule 86 (bin_op -> GEQ .)
    !               reduce using rule 86 (bin_op -> GEQ .)
    ID              reduce using rule 86 (bin_op -> GEQ .)
    NUMBER          reduce using rule 86 (bin_op -> GEQ .)
    CHR             reduce using rule 86 (bin_op -> GEQ .)
    STR             reduce using rule 86 (bin_op -> GEQ .)


state 89

    (87) bin_op -> ^ .

    PLUSPLUS        reduce using rule 87 (bin_op -> ^ .)
    MINUSMINUS      reduce using rule 87 (bin_op -> ^ .)
    +               reduce using rule 87 (bin_op -> ^ .)
    -               reduce using rule 87 (bin_op -> ^ .)
    !               reduce using rule 87 (bin_op -> ^ .)
    ID              reduce using rule 87 (bin_op -> ^ .)
    NUMBER          reduce using rule 87 (bin_op -> ^ .)
    CHR             reduce using rule 87 (bin_op -> ^ .)
    STR             reduce using rule 87 (bin_op -> ^ .)


state 90

    (88) pre_unary_expr -> PLUSPLUS pre_unary_expr .

    +               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    -               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    *               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    /               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGAND          reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGOR           reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGEQ           reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGNEQ          reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LSHIFT          reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    RSHIFT          reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    <               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    >               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LEQ             reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    GEQ             reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ^               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ?               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ]               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ,               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ;               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    }               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    )               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    :               reduce using rule 88 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)


state 91

    (102) element -> ID .

    [               reduce using rule 102 (element -> ID .)
    (               reduce using rule 102 (element -> ID .)
    PLUSPLUS        reduce using rule 102 (element -> ID .)
    MINUSMINUS      reduce using rule 102 (element -> ID .)
    .               reduce using rule 102 (element -> ID .)
    RARROW          reduce using rule 102 (element -> ID .)
    +               reduce using rule 102 (element -> ID .)
    -               reduce using rule 102 (element -> ID .)
    *               reduce using rule 102 (element -> ID .)
    /               reduce using rule 102 (element -> ID .)
    LOGAND          reduce using rule 102 (element -> ID .)
    LOGOR           reduce using rule 102 (element -> ID .)
    LOGEQ           reduce using rule 102 (element -> ID .)
    LOGNEQ          reduce using rule 102 (element -> ID .)
    LSHIFT          reduce using rule 102 (element -> ID .)
    RSHIFT          reduce using rule 102 (element -> ID .)
    <               reduce using rule 102 (element -> ID .)
    >               reduce using rule 102 (element -> ID .)
    LEQ             reduce using rule 102 (element -> ID .)
    GEQ             reduce using rule 102 (element -> ID .)
    ^               reduce using rule 102 (element -> ID .)
    ?               reduce using rule 102 (element -> ID .)
    ]               reduce using rule 102 (element -> ID .)
    ,               reduce using rule 102 (element -> ID .)
    ;               reduce using rule 102 (element -> ID .)
    }               reduce using rule 102 (element -> ID .)
    )               reduce using rule 102 (element -> ID .)
    :               reduce using rule 102 (element -> ID .)


state 92

    (89) pre_unary_expr -> MINUSMINUS pre_unary_expr .

    +               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    -               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    *               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    /               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGAND          reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGOR           reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGEQ           reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGNEQ          reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LSHIFT          reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    RSHIFT          reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    <               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    >               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LEQ             reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    GEQ             reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ^               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ?               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ]               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ,               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ;               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    }               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    )               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    :               reduce using rule 89 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)


state 93

    (90) pre_unary_expr -> + pre_unary_expr .

    +               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    -               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    *               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    /               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LOGAND          reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LOGOR           reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LOGEQ           reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LOGNEQ          reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LSHIFT          reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    RSHIFT          reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    <               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    >               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    LEQ             reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    GEQ             reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    ^               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    ?               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    ]               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    ,               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    ;               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    }               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    )               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)
    :               reduce using rule 90 (pre_unary_expr -> + pre_unary_expr .)


state 94

    (91) pre_unary_expr -> - pre_unary_expr .

    +               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    -               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    *               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    /               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LOGAND          reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LOGOR           reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LOGEQ           reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LOGNEQ          reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LSHIFT          reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    RSHIFT          reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    <               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    >               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    LEQ             reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    GEQ             reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    ^               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    ?               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    ]               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    ,               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    ;               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    }               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    )               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)
    :               reduce using rule 91 (pre_unary_expr -> - pre_unary_expr .)


state 95

    (92) pre_unary_expr -> ! pre_unary_expr .

    +               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    -               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    *               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    /               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LOGAND          reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LOGOR           reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LOGEQ           reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LOGNEQ          reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LSHIFT          reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    RSHIFT          reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    <               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    >               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    LEQ             reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    GEQ             reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    ^               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    ?               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    ]               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    ,               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    ;               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    }               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    )               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)
    :               reduce using rule 92 (pre_unary_expr -> ! pre_unary_expr .)


state 96

    (94) post_unary_expr -> post_unary_expr [ . expression ]
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    post_unary_expr                shift and go to state 48
    expression                     shift and go to state 131
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    element                        shift and go to state 49

state 97

    (95) post_unary_expr -> post_unary_expr ( . )
    (96) post_unary_expr -> post_unary_expr ( . expressions )
    (66) expressions -> . expression , expressions
    (67) expressions -> . expression
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    )               shift and go to state 132
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    post_unary_expr                shift and go to state 48
    expressions                    shift and go to state 133
    expression                     shift and go to state 104
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    element                        shift and go to state 49

state 98

    (97) post_unary_expr -> post_unary_expr PLUSPLUS .

    [               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    (               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    .               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RARROW          reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    +               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    -               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    *               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    /               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGAND          reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGOR           reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGNEQ          reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    <               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    >               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    GEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ^               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ?               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ]               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ,               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ;               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    }               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    )               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    :               reduce using rule 97 (post_unary_expr -> post_unary_expr PLUSPLUS .)


state 99

    (98) post_unary_expr -> post_unary_expr MINUSMINUS .

    [               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    (               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    .               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RARROW          reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    +               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    -               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    *               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    /               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGAND          reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGOR           reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGNEQ          reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    <               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    >               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    GEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ^               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ?               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ]               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ,               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ;               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    }               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    )               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    :               reduce using rule 98 (post_unary_expr -> post_unary_expr MINUSMINUS .)


state 100

    (99) post_unary_expr -> post_unary_expr . . ID

    ID              shift and go to state 134


state 101

    (100) post_unary_expr -> post_unary_expr RARROW . ID

    ID              shift and go to state 135


state 102

    (16) declarator_2 -> ID ( . )

    )               shift and go to state 136


state 103

    (20) initializer -> { expressions . }

    }               shift and go to state 137


state 104

    (66) expressions -> expression . , expressions
    (67) expressions -> expression .

    ,               shift and go to state 138
    }               reduce using rule 67 (expressions -> expression .)
    )               reduce using rule 67 (expressions -> expression .)


state 105

    (21) new_type_dec -> new_type ID { new_type_params } . ;

    ;               shift and go to state 139


state 106

    (24) new_type_params -> new_type_param new_type_params .

    }               reduce using rule 24 (new_type_params -> new_type_param new_type_params .)


state 107

    (26) new_type_param -> type declarators . ;

    ;               shift and go to state 140


state 108

    (27) func_def -> type ID ( params ) { . statements }
    (29) func_def -> type ID ( params ) { . }
    (34) statements -> . statement statements
    (35) statements -> . statement
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               shift and go to state 142
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    type                           shift and go to state 109
    statements                     shift and go to state 141
    statement                      shift and go to state 113
    expression                     shift and go to state 114
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 109

    (10) usual_dec -> type . declarators
    (11) declarators -> . declarator_1 , declarators
    (12) declarators -> . declarator_1
    (13) declarator_1 -> . declarator_2
    (14) declarator_1 -> . declarator_2 = initializer
    (15) declarator_2 -> . ID
    (16) declarator_2 -> . ID ( )
    (17) declarator_2 -> . ID [ ]
    (18) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 54

    declarators                    shift and go to state 24
    declarator_1                   shift and go to state 25
    declarator_2                   shift and go to state 26

state 110

    (45) statement -> { . stats_or_null }
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    stats_or_null                  shift and go to state 143
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    expression                     shift and go to state 114
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 111

    (28) func_def -> type ID ( ) { statements . }

    }               shift and go to state 146


state 112

    (30) func_def -> type ID ( ) { } .

    INCLUDE         reduce using rule 30 (func_def -> type ID ( ) { } .)
    VOID            reduce using rule 30 (func_def -> type ID ( ) { } .)
    CHAR            reduce using rule 30 (func_def -> type ID ( ) { } .)
    SHORT           reduce using rule 30 (func_def -> type ID ( ) { } .)
    INT             reduce using rule 30 (func_def -> type ID ( ) { } .)
    LONG            reduce using rule 30 (func_def -> type ID ( ) { } .)
    FLOAT           reduce using rule 30 (func_def -> type ID ( ) { } .)
    DOUBLE          reduce using rule 30 (func_def -> type ID ( ) { } .)
    STRUCT          reduce using rule 30 (func_def -> type ID ( ) { } .)
    CLASS           reduce using rule 30 (func_def -> type ID ( ) { } .)
    $end            reduce using rule 30 (func_def -> type ID ( ) { } .)


state 113

    (34) statements -> statement . statements
    (35) statements -> statement .
    (34) statements -> . statement statements
    (35) statements -> . statement
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 35 (statements -> statement .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    statement                      shift and go to state 113
    statements                     shift and go to state 147
    expression                     shift and go to state 114
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 114

    (36) statement -> expression . ;

    ;               shift and go to state 148


state 115

    (41) statement -> ; .

    ;               reduce using rule 41 (statement -> ; .)
    {               reduce using rule 41 (statement -> ; .)
    IF              reduce using rule 41 (statement -> ; .)
    WHILE           reduce using rule 41 (statement -> ; .)
    DO              reduce using rule 41 (statement -> ; .)
    FOR             reduce using rule 41 (statement -> ; .)
    BREAK           reduce using rule 41 (statement -> ; .)
    CONTINUE        reduce using rule 41 (statement -> ; .)
    RETURN          reduce using rule 41 (statement -> ; .)
    ID              reduce using rule 41 (statement -> ; .)
    PLUSPLUS        reduce using rule 41 (statement -> ; .)
    MINUSMINUS      reduce using rule 41 (statement -> ; .)
    +               reduce using rule 41 (statement -> ; .)
    -               reduce using rule 41 (statement -> ; .)
    !               reduce using rule 41 (statement -> ; .)
    VOID            reduce using rule 41 (statement -> ; .)
    CHAR            reduce using rule 41 (statement -> ; .)
    SHORT           reduce using rule 41 (statement -> ; .)
    INT             reduce using rule 41 (statement -> ; .)
    LONG            reduce using rule 41 (statement -> ; .)
    FLOAT           reduce using rule 41 (statement -> ; .)
    DOUBLE          reduce using rule 41 (statement -> ; .)
    STRUCT          reduce using rule 41 (statement -> ; .)
    CLASS           reduce using rule 41 (statement -> ; .)
    NUMBER          reduce using rule 41 (statement -> ; .)
    CHR             reduce using rule 41 (statement -> ; .)
    STR             reduce using rule 41 (statement -> ; .)
    }               reduce using rule 41 (statement -> ; .)


state 116

    (37) statement -> decl . ;

    ;               shift and go to state 149


state 117

    (38) statement -> conditional .

    ;               reduce using rule 38 (statement -> conditional .)
    {               reduce using rule 38 (statement -> conditional .)
    IF              reduce using rule 38 (statement -> conditional .)
    WHILE           reduce using rule 38 (statement -> conditional .)
    DO              reduce using rule 38 (statement -> conditional .)
    FOR             reduce using rule 38 (statement -> conditional .)
    BREAK           reduce using rule 38 (statement -> conditional .)
    CONTINUE        reduce using rule 38 (statement -> conditional .)
    RETURN          reduce using rule 38 (statement -> conditional .)
    ID              reduce using rule 38 (statement -> conditional .)
    PLUSPLUS        reduce using rule 38 (statement -> conditional .)
    MINUSMINUS      reduce using rule 38 (statement -> conditional .)
    +               reduce using rule 38 (statement -> conditional .)
    -               reduce using rule 38 (statement -> conditional .)
    !               reduce using rule 38 (statement -> conditional .)
    VOID            reduce using rule 38 (statement -> conditional .)
    CHAR            reduce using rule 38 (statement -> conditional .)
    SHORT           reduce using rule 38 (statement -> conditional .)
    INT             reduce using rule 38 (statement -> conditional .)
    LONG            reduce using rule 38 (statement -> conditional .)
    FLOAT           reduce using rule 38 (statement -> conditional .)
    DOUBLE          reduce using rule 38 (statement -> conditional .)
    STRUCT          reduce using rule 38 (statement -> conditional .)
    CLASS           reduce using rule 38 (statement -> conditional .)
    NUMBER          reduce using rule 38 (statement -> conditional .)
    CHR             reduce using rule 38 (statement -> conditional .)
    STR             reduce using rule 38 (statement -> conditional .)
    }               reduce using rule 38 (statement -> conditional .)


state 118

    (39) statement -> iteration .

    ;               reduce using rule 39 (statement -> iteration .)
    {               reduce using rule 39 (statement -> iteration .)
    IF              reduce using rule 39 (statement -> iteration .)
    WHILE           reduce using rule 39 (statement -> iteration .)
    DO              reduce using rule 39 (statement -> iteration .)
    FOR             reduce using rule 39 (statement -> iteration .)
    BREAK           reduce using rule 39 (statement -> iteration .)
    CONTINUE        reduce using rule 39 (statement -> iteration .)
    RETURN          reduce using rule 39 (statement -> iteration .)
    ID              reduce using rule 39 (statement -> iteration .)
    PLUSPLUS        reduce using rule 39 (statement -> iteration .)
    MINUSMINUS      reduce using rule 39 (statement -> iteration .)
    +               reduce using rule 39 (statement -> iteration .)
    -               reduce using rule 39 (statement -> iteration .)
    !               reduce using rule 39 (statement -> iteration .)
    VOID            reduce using rule 39 (statement -> iteration .)
    CHAR            reduce using rule 39 (statement -> iteration .)
    SHORT           reduce using rule 39 (statement -> iteration .)
    INT             reduce using rule 39 (statement -> iteration .)
    LONG            reduce using rule 39 (statement -> iteration .)
    FLOAT           reduce using rule 39 (statement -> iteration .)
    DOUBLE          reduce using rule 39 (statement -> iteration .)
    STRUCT          reduce using rule 39 (statement -> iteration .)
    CLASS           reduce using rule 39 (statement -> iteration .)
    NUMBER          reduce using rule 39 (statement -> iteration .)
    CHR             reduce using rule 39 (statement -> iteration .)
    STR             reduce using rule 39 (statement -> iteration .)
    }               reduce using rule 39 (statement -> iteration .)


state 119

    (40) statement -> jump . ;

    ;               shift and go to state 150


state 120

    (42) conditional -> IF . ( expression ) { stats_or_null }
    (43) conditional -> IF . ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> IF . ( expression ) { stats_or_null } ELSE { stats_or_null }

    (               shift and go to state 151


state 121

    (48) iteration -> WHILE . ( expression ) { stats_or_null }

    (               shift and go to state 152


state 122

    (49) iteration -> DO . { stats_or_null } WHILE ( expression ) ;

    {               shift and go to state 153


state 123

    (50) iteration -> FOR . ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }

    (               shift and go to state 154


state 124

    (62) jump -> BREAK .

    ;               reduce using rule 62 (jump -> BREAK .)


state 125

    (63) jump -> CONTINUE .

    ;               reduce using rule 63 (jump -> CONTINUE .)


state 126

    (64) jump -> RETURN .
    (65) jump -> RETURN . expression
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ;               reduce using rule 64 (jump -> RETURN .)
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 155
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 127

    (31) params -> param , params .

    )               reduce using rule 31 (params -> param , params .)


state 128

    (55) assignment_expr -> ID assignmenteq_op expression .

    ]               reduce using rule 55 (assignment_expr -> ID assignmenteq_op expression .)
    ,               reduce using rule 55 (assignment_expr -> ID assignmenteq_op expression .)
    ;               reduce using rule 55 (assignment_expr -> ID assignmenteq_op expression .)
    }               reduce using rule 55 (assignment_expr -> ID assignmenteq_op expression .)
    )               reduce using rule 55 (assignment_expr -> ID assignmenteq_op expression .)


state 129

    (70) expression -> bin_expr ? bin_expr . : bin_expr

    :               shift and go to state 156


state 130

    (71) bin_expr -> pre_unary_expr bin_op bin_expr .

    ?               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ]               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ,               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ;               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    }               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    )               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    :               reduce using rule 71 (bin_expr -> pre_unary_expr bin_op bin_expr .)


state 131

    (94) post_unary_expr -> post_unary_expr [ expression . ]

    ]               shift and go to state 157


state 132

    (95) post_unary_expr -> post_unary_expr ( ) .

    [               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    (               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    PLUSPLUS        reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    MINUSMINUS      reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    .               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    RARROW          reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    +               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    -               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    *               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    /               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LOGAND          reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LOGOR           reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LOGEQ           reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LOGNEQ          reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LSHIFT          reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    RSHIFT          reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    <               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    >               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    LEQ             reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    GEQ             reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    ^               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    ?               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    ]               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    ,               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    ;               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    }               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    )               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)
    :               reduce using rule 95 (post_unary_expr -> post_unary_expr ( ) .)


state 133

    (96) post_unary_expr -> post_unary_expr ( expressions . )

    )               shift and go to state 158


state 134

    (99) post_unary_expr -> post_unary_expr . ID .

    [               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    (               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    PLUSPLUS        reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    MINUSMINUS      reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    .               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    RARROW          reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    +               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    -               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    *               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    /               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LOGAND          reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LOGOR           reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LOGEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LOGNEQ          reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    RSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    <               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    >               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    LEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    GEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    ^               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    ?               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    ]               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    ,               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    ;               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    }               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    )               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)
    :               reduce using rule 99 (post_unary_expr -> post_unary_expr . ID .)


state 135

    (100) post_unary_expr -> post_unary_expr RARROW ID .

    [               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    (               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    PLUSPLUS        reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    MINUSMINUS      reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    .               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    RARROW          reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    +               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    -               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    *               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    /               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGAND          reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGOR           reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGNEQ          reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    RSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    <               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    >               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    LEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    GEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    ^               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    ?               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    ]               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    ,               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    ;               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    }               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    )               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)
    :               reduce using rule 100 (post_unary_expr -> post_unary_expr RARROW ID .)


state 136

    (16) declarator_2 -> ID ( ) .

    =               reduce using rule 16 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 16 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 16 (declarator_2 -> ID ( ) .)
    )               reduce using rule 16 (declarator_2 -> ID ( ) .)


state 137

    (20) initializer -> { expressions } .

    ,               reduce using rule 20 (initializer -> { expressions } .)
    ;               reduce using rule 20 (initializer -> { expressions } .)


state 138

    (66) expressions -> expression , . expressions
    (66) expressions -> . expression , expressions
    (67) expressions -> . expression
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 104
    expressions                    shift and go to state 159
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 139

    (21) new_type_dec -> new_type ID { new_type_params } ; .

    ;               reduce using rule 21 (new_type_dec -> new_type ID { new_type_params } ; .)


state 140

    (26) new_type_param -> type declarators ; .

    VOID            reduce using rule 26 (new_type_param -> type declarators ; .)
    CHAR            reduce using rule 26 (new_type_param -> type declarators ; .)
    SHORT           reduce using rule 26 (new_type_param -> type declarators ; .)
    INT             reduce using rule 26 (new_type_param -> type declarators ; .)
    LONG            reduce using rule 26 (new_type_param -> type declarators ; .)
    FLOAT           reduce using rule 26 (new_type_param -> type declarators ; .)
    DOUBLE          reduce using rule 26 (new_type_param -> type declarators ; .)
    }               reduce using rule 26 (new_type_param -> type declarators ; .)


state 141

    (27) func_def -> type ID ( params ) { statements . }

    }               shift and go to state 160


state 142

    (29) func_def -> type ID ( params ) { } .

    INCLUDE         reduce using rule 29 (func_def -> type ID ( params ) { } .)
    VOID            reduce using rule 29 (func_def -> type ID ( params ) { } .)
    CHAR            reduce using rule 29 (func_def -> type ID ( params ) { } .)
    SHORT           reduce using rule 29 (func_def -> type ID ( params ) { } .)
    INT             reduce using rule 29 (func_def -> type ID ( params ) { } .)
    LONG            reduce using rule 29 (func_def -> type ID ( params ) { } .)
    FLOAT           reduce using rule 29 (func_def -> type ID ( params ) { } .)
    DOUBLE          reduce using rule 29 (func_def -> type ID ( params ) { } .)
    STRUCT          reduce using rule 29 (func_def -> type ID ( params ) { } .)
    CLASS           reduce using rule 29 (func_def -> type ID ( params ) { } .)
    $end            reduce using rule 29 (func_def -> type ID ( params ) { } .)


state 143

    (45) statement -> { stats_or_null . }

    }               shift and go to state 161


state 144

    (46) stats_or_null -> statements .

    }               reduce using rule 46 (stats_or_null -> statements .)


state 145

    (47) stats_or_null -> empty .

    }               reduce using rule 47 (stats_or_null -> empty .)


state 146

    (28) func_def -> type ID ( ) { statements } .

    INCLUDE         reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    VOID            reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    CHAR            reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    SHORT           reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    INT             reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    LONG            reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    FLOAT           reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    DOUBLE          reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    STRUCT          reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    CLASS           reduce using rule 28 (func_def -> type ID ( ) { statements } .)
    $end            reduce using rule 28 (func_def -> type ID ( ) { statements } .)


state 147

    (34) statements -> statement statements .

    }               reduce using rule 34 (statements -> statement statements .)


state 148

    (36) statement -> expression ; .

    ;               reduce using rule 36 (statement -> expression ; .)
    {               reduce using rule 36 (statement -> expression ; .)
    IF              reduce using rule 36 (statement -> expression ; .)
    WHILE           reduce using rule 36 (statement -> expression ; .)
    DO              reduce using rule 36 (statement -> expression ; .)
    FOR             reduce using rule 36 (statement -> expression ; .)
    BREAK           reduce using rule 36 (statement -> expression ; .)
    CONTINUE        reduce using rule 36 (statement -> expression ; .)
    RETURN          reduce using rule 36 (statement -> expression ; .)
    ID              reduce using rule 36 (statement -> expression ; .)
    PLUSPLUS        reduce using rule 36 (statement -> expression ; .)
    MINUSMINUS      reduce using rule 36 (statement -> expression ; .)
    +               reduce using rule 36 (statement -> expression ; .)
    -               reduce using rule 36 (statement -> expression ; .)
    !               reduce using rule 36 (statement -> expression ; .)
    VOID            reduce using rule 36 (statement -> expression ; .)
    CHAR            reduce using rule 36 (statement -> expression ; .)
    SHORT           reduce using rule 36 (statement -> expression ; .)
    INT             reduce using rule 36 (statement -> expression ; .)
    LONG            reduce using rule 36 (statement -> expression ; .)
    FLOAT           reduce using rule 36 (statement -> expression ; .)
    DOUBLE          reduce using rule 36 (statement -> expression ; .)
    STRUCT          reduce using rule 36 (statement -> expression ; .)
    CLASS           reduce using rule 36 (statement -> expression ; .)
    NUMBER          reduce using rule 36 (statement -> expression ; .)
    CHR             reduce using rule 36 (statement -> expression ; .)
    STR             reduce using rule 36 (statement -> expression ; .)
    }               reduce using rule 36 (statement -> expression ; .)


state 149

    (37) statement -> decl ; .

    ;               reduce using rule 37 (statement -> decl ; .)
    {               reduce using rule 37 (statement -> decl ; .)
    IF              reduce using rule 37 (statement -> decl ; .)
    WHILE           reduce using rule 37 (statement -> decl ; .)
    DO              reduce using rule 37 (statement -> decl ; .)
    FOR             reduce using rule 37 (statement -> decl ; .)
    BREAK           reduce using rule 37 (statement -> decl ; .)
    CONTINUE        reduce using rule 37 (statement -> decl ; .)
    RETURN          reduce using rule 37 (statement -> decl ; .)
    ID              reduce using rule 37 (statement -> decl ; .)
    PLUSPLUS        reduce using rule 37 (statement -> decl ; .)
    MINUSMINUS      reduce using rule 37 (statement -> decl ; .)
    +               reduce using rule 37 (statement -> decl ; .)
    -               reduce using rule 37 (statement -> decl ; .)
    !               reduce using rule 37 (statement -> decl ; .)
    VOID            reduce using rule 37 (statement -> decl ; .)
    CHAR            reduce using rule 37 (statement -> decl ; .)
    SHORT           reduce using rule 37 (statement -> decl ; .)
    INT             reduce using rule 37 (statement -> decl ; .)
    LONG            reduce using rule 37 (statement -> decl ; .)
    FLOAT           reduce using rule 37 (statement -> decl ; .)
    DOUBLE          reduce using rule 37 (statement -> decl ; .)
    STRUCT          reduce using rule 37 (statement -> decl ; .)
    CLASS           reduce using rule 37 (statement -> decl ; .)
    NUMBER          reduce using rule 37 (statement -> decl ; .)
    CHR             reduce using rule 37 (statement -> decl ; .)
    STR             reduce using rule 37 (statement -> decl ; .)
    }               reduce using rule 37 (statement -> decl ; .)


state 150

    (40) statement -> jump ; .

    ;               reduce using rule 40 (statement -> jump ; .)
    {               reduce using rule 40 (statement -> jump ; .)
    IF              reduce using rule 40 (statement -> jump ; .)
    WHILE           reduce using rule 40 (statement -> jump ; .)
    DO              reduce using rule 40 (statement -> jump ; .)
    FOR             reduce using rule 40 (statement -> jump ; .)
    BREAK           reduce using rule 40 (statement -> jump ; .)
    CONTINUE        reduce using rule 40 (statement -> jump ; .)
    RETURN          reduce using rule 40 (statement -> jump ; .)
    ID              reduce using rule 40 (statement -> jump ; .)
    PLUSPLUS        reduce using rule 40 (statement -> jump ; .)
    MINUSMINUS      reduce using rule 40 (statement -> jump ; .)
    +               reduce using rule 40 (statement -> jump ; .)
    -               reduce using rule 40 (statement -> jump ; .)
    !               reduce using rule 40 (statement -> jump ; .)
    VOID            reduce using rule 40 (statement -> jump ; .)
    CHAR            reduce using rule 40 (statement -> jump ; .)
    SHORT           reduce using rule 40 (statement -> jump ; .)
    INT             reduce using rule 40 (statement -> jump ; .)
    LONG            reduce using rule 40 (statement -> jump ; .)
    FLOAT           reduce using rule 40 (statement -> jump ; .)
    DOUBLE          reduce using rule 40 (statement -> jump ; .)
    STRUCT          reduce using rule 40 (statement -> jump ; .)
    CLASS           reduce using rule 40 (statement -> jump ; .)
    NUMBER          reduce using rule 40 (statement -> jump ; .)
    CHR             reduce using rule 40 (statement -> jump ; .)
    STR             reduce using rule 40 (statement -> jump ; .)
    }               reduce using rule 40 (statement -> jump ; .)


state 151

    (42) conditional -> IF ( . expression ) { stats_or_null }
    (43) conditional -> IF ( . expression ) { stats_or_null } ELSE conditional
    (44) conditional -> IF ( . expression ) { stats_or_null } ELSE { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 162
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 152

    (48) iteration -> WHILE ( . expression ) { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 163
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 153

    (49) iteration -> DO { . stats_or_null } WHILE ( expression ) ;
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    stats_or_null                  shift and go to state 164
    expression                     shift and go to state 114
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 154

    (50) iteration -> FOR ( . expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (53) expr_or_null_or_init -> . expr_or_null
    (54) expr_or_null_or_init -> . usual_dec
    (51) expr_or_null -> . expression
    (52) expr_or_null -> . empty
    (10) usual_dec -> . type declarators
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (113) empty -> .
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ;               reduce using rule 113 (empty -> .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expr_or_null_or_init           shift and go to state 165
    expr_or_null                   shift and go to state 166
    usual_dec                      shift and go to state 167
    expression                     shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 109
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 155

    (65) jump -> RETURN expression .

    ;               reduce using rule 65 (jump -> RETURN expression .)


state 156

    (70) expression -> bin_expr ? bin_expr : . bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    ID              shift and go to state 91
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    bin_expr                       shift and go to state 170
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 157

    (94) post_unary_expr -> post_unary_expr [ expression ] .

    [               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    (               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    PLUSPLUS        reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    MINUSMINUS      reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    .               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    RARROW          reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    +               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    -               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    *               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    /               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGAND          reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGOR           reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGEQ           reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGNEQ          reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LSHIFT          reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    RSHIFT          reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    <               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    >               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    LEQ             reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    GEQ             reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    ^               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    ?               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    ]               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    ,               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    ;               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    }               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    )               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)
    :               reduce using rule 94 (post_unary_expr -> post_unary_expr [ expression ] .)


state 158

    (96) post_unary_expr -> post_unary_expr ( expressions ) .

    [               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    (               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    PLUSPLUS        reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MINUSMINUS      reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    .               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RARROW          reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    +               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    -               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    *               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    /               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGAND          reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGOR           reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGNEQ          reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LSHIFT          reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RSHIFT          reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    <               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    >               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LEQ             reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    GEQ             reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ^               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ?               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ]               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ,               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ;               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    }               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    )               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)
    :               reduce using rule 96 (post_unary_expr -> post_unary_expr ( expressions ) .)


state 159

    (66) expressions -> expression , expressions .

    }               reduce using rule 66 (expressions -> expression , expressions .)
    )               reduce using rule 66 (expressions -> expression , expressions .)


state 160

    (27) func_def -> type ID ( params ) { statements } .

    INCLUDE         reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    VOID            reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    CHAR            reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    SHORT           reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    INT             reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    LONG            reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    FLOAT           reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    DOUBLE          reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    STRUCT          reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    CLASS           reduce using rule 27 (func_def -> type ID ( params ) { statements } .)
    $end            reduce using rule 27 (func_def -> type ID ( params ) { statements } .)


state 161

    (45) statement -> { stats_or_null } .

    ;               reduce using rule 45 (statement -> { stats_or_null } .)
    {               reduce using rule 45 (statement -> { stats_or_null } .)
    IF              reduce using rule 45 (statement -> { stats_or_null } .)
    WHILE           reduce using rule 45 (statement -> { stats_or_null } .)
    DO              reduce using rule 45 (statement -> { stats_or_null } .)
    FOR             reduce using rule 45 (statement -> { stats_or_null } .)
    BREAK           reduce using rule 45 (statement -> { stats_or_null } .)
    CONTINUE        reduce using rule 45 (statement -> { stats_or_null } .)
    RETURN          reduce using rule 45 (statement -> { stats_or_null } .)
    ID              reduce using rule 45 (statement -> { stats_or_null } .)
    PLUSPLUS        reduce using rule 45 (statement -> { stats_or_null } .)
    MINUSMINUS      reduce using rule 45 (statement -> { stats_or_null } .)
    +               reduce using rule 45 (statement -> { stats_or_null } .)
    -               reduce using rule 45 (statement -> { stats_or_null } .)
    !               reduce using rule 45 (statement -> { stats_or_null } .)
    VOID            reduce using rule 45 (statement -> { stats_or_null } .)
    CHAR            reduce using rule 45 (statement -> { stats_or_null } .)
    SHORT           reduce using rule 45 (statement -> { stats_or_null } .)
    INT             reduce using rule 45 (statement -> { stats_or_null } .)
    LONG            reduce using rule 45 (statement -> { stats_or_null } .)
    FLOAT           reduce using rule 45 (statement -> { stats_or_null } .)
    DOUBLE          reduce using rule 45 (statement -> { stats_or_null } .)
    STRUCT          reduce using rule 45 (statement -> { stats_or_null } .)
    CLASS           reduce using rule 45 (statement -> { stats_or_null } .)
    NUMBER          reduce using rule 45 (statement -> { stats_or_null } .)
    CHR             reduce using rule 45 (statement -> { stats_or_null } .)
    STR             reduce using rule 45 (statement -> { stats_or_null } .)
    }               reduce using rule 45 (statement -> { stats_or_null } .)


state 162

    (42) conditional -> IF ( expression . ) { stats_or_null }
    (43) conditional -> IF ( expression . ) { stats_or_null } ELSE conditional
    (44) conditional -> IF ( expression . ) { stats_or_null } ELSE { stats_or_null }

    )               shift and go to state 171


state 163

    (48) iteration -> WHILE ( expression . ) { stats_or_null }

    )               shift and go to state 172


state 164

    (49) iteration -> DO { stats_or_null . } WHILE ( expression ) ;

    }               shift and go to state 173


state 165

    (50) iteration -> FOR ( expr_or_null_or_init . ; expr_or_null ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 174


state 166

    (53) expr_or_null_or_init -> expr_or_null .

    ;               reduce using rule 53 (expr_or_null_or_init -> expr_or_null .)


state 167

    (54) expr_or_null_or_init -> usual_dec .

    ;               reduce using rule 54 (expr_or_null_or_init -> usual_dec .)


state 168

    (51) expr_or_null -> expression .

    ;               reduce using rule 51 (expr_or_null -> expression .)
    )               reduce using rule 51 (expr_or_null -> expression .)


state 169

    (52) expr_or_null -> empty .

    ;               reduce using rule 52 (expr_or_null -> empty .)
    )               reduce using rule 52 (expr_or_null -> empty .)


state 170

    (70) expression -> bin_expr ? bin_expr : bin_expr .

    ]               reduce using rule 70 (expression -> bin_expr ? bin_expr : bin_expr .)
    ,               reduce using rule 70 (expression -> bin_expr ? bin_expr : bin_expr .)
    ;               reduce using rule 70 (expression -> bin_expr ? bin_expr : bin_expr .)
    }               reduce using rule 70 (expression -> bin_expr ? bin_expr : bin_expr .)
    )               reduce using rule 70 (expression -> bin_expr ? bin_expr : bin_expr .)


state 171

    (42) conditional -> IF ( expression ) . { stats_or_null }
    (43) conditional -> IF ( expression ) . { stats_or_null } ELSE conditional
    (44) conditional -> IF ( expression ) . { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 175


state 172

    (48) iteration -> WHILE ( expression ) . { stats_or_null }

    {               shift and go to state 176


state 173

    (49) iteration -> DO { stats_or_null } . WHILE ( expression ) ;

    WHILE           shift and go to state 177


state 174

    (50) iteration -> FOR ( expr_or_null_or_init ; . expr_or_null ; expr_or_null ) { stats_or_null }
    (51) expr_or_null -> . expression
    (52) expr_or_null -> . empty
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (113) empty -> .
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ;               reduce using rule 113 (empty -> .)
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expr_or_null                   shift and go to state 178
    expression                     shift and go to state 168
    empty                          shift and go to state 169
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 175

    (42) conditional -> IF ( expression ) { . stats_or_null }
    (43) conditional -> IF ( expression ) { . stats_or_null } ELSE conditional
    (44) conditional -> IF ( expression ) { . stats_or_null } ELSE { stats_or_null }
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 114
    stats_or_null                  shift and go to state 179
    conditional                    shift and go to state 117
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    decl                           shift and go to state 116
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 176

    (48) iteration -> WHILE ( expression ) { . stats_or_null }
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 114
    stats_or_null                  shift and go to state 180
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 177

    (49) iteration -> DO { stats_or_null } WHILE . ( expression ) ;

    (               shift and go to state 181


state 178

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null . ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 182


state 179

    (42) conditional -> IF ( expression ) { stats_or_null . }
    (43) conditional -> IF ( expression ) { stats_or_null . } ELSE conditional
    (44) conditional -> IF ( expression ) { stats_or_null . } ELSE { stats_or_null }

    }               shift and go to state 183


state 180

    (48) iteration -> WHILE ( expression ) { stats_or_null . }

    }               shift and go to state 184


state 181

    (49) iteration -> DO { stats_or_null } WHILE ( . expression ) ;
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 185
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 182

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; . expr_or_null ) { stats_or_null }
    (51) expr_or_null -> . expression
    (52) expr_or_null -> . empty
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (113) empty -> .
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    )               reduce using rule 113 (empty -> .)
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expr_or_null                   shift and go to state 186
    expression                     shift and go to state 168
    empty                          shift and go to state 169
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    pre_unary_expr                 shift and go to state 42
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 183

    (42) conditional -> IF ( expression ) { stats_or_null } .
    (43) conditional -> IF ( expression ) { stats_or_null } . ELSE conditional
    (44) conditional -> IF ( expression ) { stats_or_null } . ELSE { stats_or_null }

    ;               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    {               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    IF              reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    DO              reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    FOR             reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    ID              reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    +               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    -               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    !               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    VOID            reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    INT             reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    LONG            reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    CHR             reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    STR             reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    }               reduce using rule 42 (conditional -> IF ( expression ) { stats_or_null } .)
    ELSE            shift and go to state 187


state 184

    (48) iteration -> WHILE ( expression ) { stats_or_null } .

    ;               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    {               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    IF              reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DO              reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FOR             reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    ID              reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    +               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    -               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    !               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    VOID            reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    INT             reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    LONG            reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHR             reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STR             reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)
    }               reduce using rule 48 (iteration -> WHILE ( expression ) { stats_or_null } .)


state 185

    (49) iteration -> DO { stats_or_null } WHILE ( expression . ) ;

    )               shift and go to state 188


state 186

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null . ) { stats_or_null }

    )               shift and go to state 189


state 187

    (43) conditional -> IF ( expression ) { stats_or_null } ELSE . conditional
    (44) conditional -> IF ( expression ) { stats_or_null } ELSE . { stats_or_null }
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 190
    IF              shift and go to state 120

    conditional                    shift and go to state 191

state 188

    (49) iteration -> DO { stats_or_null } WHILE ( expression ) . ;

    ;               shift and go to state 192


state 189

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) . { stats_or_null }

    {               shift and go to state 193


state 190

    (44) conditional -> IF ( expression ) { stats_or_null } ELSE { . stats_or_null }
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    expression                     shift and go to state 114
    stats_or_null                  shift and go to state 194
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 191

    (43) conditional -> IF ( expression ) { stats_or_null } ELSE conditional .

    ;               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    {               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    IF              reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    WHILE           reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DO              reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FOR             reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    BREAK           reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CONTINUE        reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    RETURN          reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    ID              reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    PLUSPLUS        reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    MINUSMINUS      reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    +               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    -               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    !               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    VOID            reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHAR            reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    SHORT           reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    INT             reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    LONG            reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FLOAT           reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DOUBLE          reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STRUCT          reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CLASS           reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    NUMBER          reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHR             reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STR             reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    }               reduce using rule 43 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)


state 192

    (49) iteration -> DO { stats_or_null } WHILE ( expression ) ; .

    ;               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    {               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    IF              reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    WHILE           reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DO              reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FOR             reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    BREAK           reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    RETURN          reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    ID              reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    +               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    -               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    !               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    VOID            reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHAR            reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    SHORT           reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    INT             reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    LONG            reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FLOAT           reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STRUCT          reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CLASS           reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    NUMBER          reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHR             reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STR             reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    }               reduce using rule 49 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)


state 193

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { . stats_or_null }
    (46) stats_or_null -> . statements
    (47) stats_or_null -> . empty
    (34) statements -> . statement statements
    (35) statements -> . statement
    (113) empty -> .
    (36) statement -> . expression ;
    (37) statement -> . decl ;
    (38) statement -> . conditional
    (39) statement -> . iteration
    (40) statement -> . jump ;
    (41) statement -> . ;
    (45) statement -> . { stats_or_null }
    (68) expression -> . bin_expr
    (69) expression -> . assignment_expr
    (70) expression -> . bin_expr ? bin_expr : bin_expr
    (8) decl -> . usual_dec
    (9) decl -> . new_type_dec
    (42) conditional -> . IF ( expression ) { stats_or_null }
    (43) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (44) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (48) iteration -> . WHILE ( expression ) { stats_or_null }
    (49) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (50) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (62) jump -> . BREAK
    (63) jump -> . CONTINUE
    (64) jump -> . RETURN
    (65) jump -> . RETURN expression
    (71) bin_expr -> . pre_unary_expr bin_op bin_expr
    (72) bin_expr -> . pre_unary_expr
    (55) assignment_expr -> . ID assignmenteq_op expression
    (10) usual_dec -> . type declarators
    (21) new_type_dec -> . new_type ID { new_type_params } ;
    (88) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (89) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (90) pre_unary_expr -> . + pre_unary_expr
    (91) pre_unary_expr -> . - pre_unary_expr
    (92) pre_unary_expr -> . ! pre_unary_expr
    (93) pre_unary_expr -> . post_unary_expr
    (106) type -> . VOID
    (107) type -> . CHAR
    (108) type -> . SHORT
    (109) type -> . INT
    (110) type -> . LONG
    (111) type -> . FLOAT
    (112) type -> . DOUBLE
    (22) new_type -> . STRUCT
    (23) new_type -> . CLASS
    (94) post_unary_expr -> . post_unary_expr [ expression ]
    (95) post_unary_expr -> . post_unary_expr ( )
    (96) post_unary_expr -> . post_unary_expr ( expressions )
    (97) post_unary_expr -> . post_unary_expr PLUSPLUS
    (98) post_unary_expr -> . post_unary_expr MINUSMINUS
    (99) post_unary_expr -> . post_unary_expr . ID
    (100) post_unary_expr -> . post_unary_expr RARROW ID
    (101) post_unary_expr -> . element
    (102) element -> . ID
    (103) element -> . NUMBER
    (104) element -> . CHR
    (105) element -> . STR

    }               reduce using rule 113 (empty -> .)
    ;               shift and go to state 115
    {               shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121
    DO              shift and go to state 122
    FOR             shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    ID              shift and go to state 37
    PLUSPLUS        shift and go to state 43
    MINUSMINUS      shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 47
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    SHORT           shift and go to state 13
    INT             shift and go to state 14
    LONG            shift and go to state 15
    FLOAT           shift and go to state 16
    DOUBLE          shift and go to state 17
    STRUCT          shift and go to state 18
    CLASS           shift and go to state 19
    NUMBER          shift and go to state 50
    CHR             shift and go to state 51
    STR             shift and go to state 52

    stats_or_null                  shift and go to state 195
    statements                     shift and go to state 144
    empty                          shift and go to state 145
    statement                      shift and go to state 113
    expression                     shift and go to state 114
    decl                           shift and go to state 116
    conditional                    shift and go to state 117
    iteration                      shift and go to state 118
    jump                           shift and go to state 119
    bin_expr                       shift and go to state 40
    assignment_expr                shift and go to state 41
    usual_dec                      shift and go to state 7
    new_type_dec                   shift and go to state 8
    pre_unary_expr                 shift and go to state 42
    type                           shift and go to state 109
    new_type                       shift and go to state 10
    post_unary_expr                shift and go to state 48
    element                        shift and go to state 49

state 194

    (44) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null . }

    }               shift and go to state 196


state 195

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null . }

    }               shift and go to state 197


state 196

    (44) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .

    ;               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    {               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    IF              reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    WHILE           reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DO              reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FOR             reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    BREAK           reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CONTINUE        reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    RETURN          reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    ID              reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    PLUSPLUS        reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    MINUSMINUS      reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    +               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    -               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    !               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    VOID            reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHAR            reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    SHORT           reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    INT             reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    LONG            reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FLOAT           reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DOUBLE          reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STRUCT          reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CLASS           reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    NUMBER          reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHR             reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STR             reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    }               reduce using rule 44 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)


state 197

    (50) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .

    ;               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    {               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    IF              reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    WHILE           reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DO              reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FOR             reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    BREAK           reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CONTINUE        reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    RETURN          reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    ID              reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    +               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    -               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    !               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    VOID            reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHAR            reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    SHORT           reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    INT             reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    LONG            reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FLOAT           reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DOUBLE          reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STRUCT          reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CLASS           reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    NUMBER          reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHR             reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STR             reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    }               reduce using rule 50 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)

