Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> include program
Rule 2     program -> external_decl program
Rule 3     program -> include
Rule 4     program -> external_decl
Rule 5     include -> INCLUDE
Rule 6     external_decl -> decl ;
Rule 7     external_decl -> func_def
Rule 8     external_decl -> ;
Rule 9     decl -> usual_dec
Rule 10    decl -> new_type_dec
Rule 11    usual_dec -> type declarators
Rule 12    declarators -> declarator_1 , declarators
Rule 13    declarators -> declarator_1
Rule 14    declarator_1 -> declarator_2
Rule 15    declarator_1 -> declarator_2 = initializer
Rule 16    declarator_2 -> ID
Rule 17    declarator_2 -> ID ( )
Rule 18    declarator_2 -> ID [ ]
Rule 19    declarator_2 -> ID [ expression ]
Rule 20    initializer -> expression
Rule 21    initializer -> { expressions }
Rule 22    new_type_dec -> new_type ID { new_type_params }
Rule 23    new_type_dec -> new_type ID { new_type_params } declarators
Rule 24    new_type_dec -> new_type ID declarators
Rule 25    new_type -> STRUCT
Rule 26    new_type -> CLASS
Rule 27    new_type_params -> new_type_param new_type_params
Rule 28    new_type_params -> new_type_param
Rule 29    new_type_param -> type declarators ;
Rule 30    func_def -> type ID ( params ) { statements }
Rule 31    func_def -> type ID ( ) { statements }
Rule 32    func_def -> type ID ( params ) { }
Rule 33    func_def -> type ID ( ) { }
Rule 34    params -> param , params
Rule 35    params -> param
Rule 36    param -> type declarator_2
Rule 37    statements -> statement statements
Rule 38    statements -> statement
Rule 39    statement -> expression ;
Rule 40    statement -> decl ;
Rule 41    statement -> block
Rule 42    statement -> conditional
Rule 43    statement -> iteration
Rule 44    statement -> jump ;
Rule 45    statement -> ;
Rule 46    conditional -> IF ( expression ) statement
Rule 47    conditional -> IF ( expression ) statement ELSE statement
Rule 48    block -> { stats_or_null }
Rule 49    stats_or_null -> statements
Rule 50    stats_or_null -> empty
Rule 51    iteration -> WHILE ( expression ) statement
Rule 52    iteration -> DO statement WHILE ( expression ) ;
Rule 53    iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
Rule 54    expr_or_null -> expressions
Rule 55    expr_or_null -> empty
Rule 56    expr_or_null_or_init -> expr_or_null
Rule 57    expr_or_null_or_init -> usual_dec
Rule 58    jump -> BREAK
Rule 59    jump -> CONTINUE
Rule 60    jump -> RETURN
Rule 61    jump -> RETURN expression
Rule 62    expressions -> expression , expressions
Rule 63    expressions -> expression
Rule 64    expression -> tern_expr
Rule 65    tern_expr -> tern_expr ? tern_expr : tern_expr
Rule 66    tern_expr -> bin_expr
Rule 67    bin_expr -> bin_expr + bin_expr
Rule 68    bin_expr -> bin_expr - bin_expr
Rule 69    bin_expr -> bin_expr * bin_expr
Rule 70    bin_expr -> bin_expr / bin_expr
Rule 71    bin_expr -> bin_expr ^ bin_expr
Rule 72    bin_expr -> bin_expr > bin_expr
Rule 73    bin_expr -> bin_expr < bin_expr
Rule 74    bin_expr -> bin_expr LOGAND bin_expr
Rule 75    bin_expr -> bin_expr LOGOR bin_expr
Rule 76    bin_expr -> bin_expr LOGEQ bin_expr
Rule 77    bin_expr -> bin_expr LOGNEQ bin_expr
Rule 78    bin_expr -> bin_expr LEQ bin_expr
Rule 79    bin_expr -> bin_expr GEQ bin_expr
Rule 80    bin_expr -> bin_expr LSHIFT bin_expr
Rule 81    bin_expr -> bin_expr RSHIFT bin_expr
Rule 82    bin_expr -> bin_expr = bin_expr
Rule 83    bin_expr -> bin_expr ADDEQ bin_expr
Rule 84    bin_expr -> bin_expr SUBEQ bin_expr
Rule 85    bin_expr -> bin_expr MULTEQ bin_expr
Rule 86    bin_expr -> bin_expr DIVEQ bin_expr
Rule 87    bin_expr -> bin_expr MODEQ bin_expr
Rule 88    bin_expr -> pre_unary_expr
Rule 89    pre_unary_expr -> PLUSPLUS pre_unary_expr
Rule 90    pre_unary_expr -> MINUSMINUS pre_unary_expr
Rule 91    pre_unary_expr -> + pre_unary_expr
Rule 92    pre_unary_expr -> - pre_unary_expr
Rule 93    pre_unary_expr -> ! pre_unary_expr
Rule 94    pre_unary_expr -> & pre_unary_expr
Rule 95    pre_unary_expr -> post_unary_expr
Rule 96    post_unary_expr -> post_unary_expr [ expression ]
Rule 97    post_unary_expr -> post_unary_expr ( )
Rule 98    post_unary_expr -> post_unary_expr ( expressions )
Rule 99    post_unary_expr -> post_unary_expr PLUSPLUS
Rule 100   post_unary_expr -> post_unary_expr MINUSMINUS
Rule 101   post_unary_expr -> post_unary_expr . ID
Rule 102   post_unary_expr -> post_unary_expr RARROW ID
Rule 103   post_unary_expr -> element
Rule 104   element -> ID
Rule 105   element -> NUMBER
Rule 106   element -> CHR
Rule 107   element -> STR
Rule 108   element -> ( expression )
Rule 109   type -> VOID
Rule 110   type -> CHAR
Rule 111   type -> SHORT
Rule 112   type -> INT
Rule 113   type -> LONG
Rule 114   type -> FLOAT
Rule 115   type -> DOUBLE
Rule 116   empty -> <empty>

Terminals, with rules where they appear

!                    : 93
&                    : 94
(                    : 17 30 31 32 33 46 47 51 52 53 97 98 108
)                    : 17 30 31 32 33 46 47 51 52 53 97 98 108
*                    : 69
+                    : 67 91
,                    : 12 34 62
-                    : 68 92
.                    : 101
/                    : 70
:                    : 65
;                    : 6 8 29 39 40 44 45 52 53 53
<                    : 73
=                    : 15 82
>                    : 72
?                    : 65
ADDEQ                : 83
BREAK                : 58
CHAR                 : 110
CHR                  : 106
CLASS                : 26
CONTINUE             : 59
DIVEQ                : 86
DO                   : 52
DOUBLE               : 115
ELSE                 : 47
FLOAT                : 114
FOR                  : 53
GEQ                  : 79
ID                   : 16 17 18 19 22 23 24 30 31 32 33 101 102 104
IF                   : 46 47
INCLUDE              : 5
INT                  : 112
LEQ                  : 78
LOGAND               : 74
LOGEQ                : 76
LOGNEQ               : 77
LOGOR                : 75
LONG                 : 113
LSHIFT               : 80
MINUSMINUS           : 90 100
MODEQ                : 87
MULTEQ               : 85
NUMBER               : 105
PLUSPLUS             : 89 99
RARROW               : 102
RETURN               : 60 61
RSHIFT               : 81
SHORT                : 111
STR                  : 107
STRUCT               : 25
SUBEQ                : 84
VOID                 : 109
WHILE                : 51 52
[                    : 18 19 96
]                    : 18 19 96
^                    : 71
error                : 
{                    : 21 22 23 30 31 32 33 48
}                    : 21 22 23 30 31 32 33 48

Nonterminals, with rules where they appear

bin_expr             : 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87
block                : 41
conditional          : 42
decl                 : 6 40
declarator_1         : 12 13
declarator_2         : 14 15 36
declarators          : 11 12 23 24 29
element              : 103
empty                : 50 55
expr_or_null         : 53 53 56
expr_or_null_or_init : 53
expression           : 19 20 39 46 47 51 52 61 62 63 96 108
expressions          : 21 54 62 98
external_decl        : 2 4
func_def             : 7
include              : 1 3
initializer          : 15
iteration            : 43
jump                 : 44
new_type             : 22 23 24
new_type_dec         : 10
new_type_param       : 27 28
new_type_params      : 22 23 27
param                : 34 35
params               : 30 32 34
post_unary_expr      : 95 96 97 98 99 100 101 102
pre_unary_expr       : 88 89 90 91 92 93 94
program              : 1 2 0
statement            : 37 38 46 47 47 51 52 53
statements           : 30 31 37 49
stats_or_null        : 48
tern_expr            : 64 65 65 65
type                 : 11 29 30 31 32 33 36
usual_dec            : 9 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    program                        shift and go to state 1
    include                        shift and go to state 2
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> include . program
    (3) program -> include .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 3 (program -> include .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    include                        shift and go to state 2
    program                        shift and go to state 21
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 3

    (2) program -> external_decl . program
    (4) program -> external_decl .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 4 (program -> external_decl .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    external_decl                  shift and go to state 3
    program                        shift and go to state 22
    include                        shift and go to state 2
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 4

    (5) include -> INCLUDE .

    INCLUDE         reduce using rule 5 (include -> INCLUDE .)
    ;               reduce using rule 5 (include -> INCLUDE .)
    VOID            reduce using rule 5 (include -> INCLUDE .)
    CHAR            reduce using rule 5 (include -> INCLUDE .)
    SHORT           reduce using rule 5 (include -> INCLUDE .)
    INT             reduce using rule 5 (include -> INCLUDE .)
    LONG            reduce using rule 5 (include -> INCLUDE .)
    FLOAT           reduce using rule 5 (include -> INCLUDE .)
    DOUBLE          reduce using rule 5 (include -> INCLUDE .)
    STRUCT          reduce using rule 5 (include -> INCLUDE .)
    CLASS           reduce using rule 5 (include -> INCLUDE .)
    $end            reduce using rule 5 (include -> INCLUDE .)


state 5

    (6) external_decl -> decl . ;

    ;               shift and go to state 23


state 6

    (8) external_decl -> ; .

    INCLUDE         reduce using rule 8 (external_decl -> ; .)
    ;               reduce using rule 8 (external_decl -> ; .)
    VOID            reduce using rule 8 (external_decl -> ; .)
    CHAR            reduce using rule 8 (external_decl -> ; .)
    SHORT           reduce using rule 8 (external_decl -> ; .)
    INT             reduce using rule 8 (external_decl -> ; .)
    LONG            reduce using rule 8 (external_decl -> ; .)
    FLOAT           reduce using rule 8 (external_decl -> ; .)
    DOUBLE          reduce using rule 8 (external_decl -> ; .)
    STRUCT          reduce using rule 8 (external_decl -> ; .)
    CLASS           reduce using rule 8 (external_decl -> ; .)
    $end            reduce using rule 8 (external_decl -> ; .)


state 7

    (7) external_decl -> func_def .

    INCLUDE         reduce using rule 7 (external_decl -> func_def .)
    ;               reduce using rule 7 (external_decl -> func_def .)
    VOID            reduce using rule 7 (external_decl -> func_def .)
    CHAR            reduce using rule 7 (external_decl -> func_def .)
    SHORT           reduce using rule 7 (external_decl -> func_def .)
    INT             reduce using rule 7 (external_decl -> func_def .)
    LONG            reduce using rule 7 (external_decl -> func_def .)
    FLOAT           reduce using rule 7 (external_decl -> func_def .)
    DOUBLE          reduce using rule 7 (external_decl -> func_def .)
    STRUCT          reduce using rule 7 (external_decl -> func_def .)
    CLASS           reduce using rule 7 (external_decl -> func_def .)
    $end            reduce using rule 7 (external_decl -> func_def .)


state 8

    (9) decl -> usual_dec .

    ;               reduce using rule 9 (decl -> usual_dec .)


state 9

    (10) decl -> new_type_dec .

    ;               reduce using rule 10 (decl -> new_type_dec .)


state 10

    (30) func_def -> type . ID ( params ) { statements }
    (31) func_def -> type . ID ( ) { statements }
    (32) func_def -> type . ID ( params ) { }
    (33) func_def -> type . ID ( ) { }
    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 24

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 11

    (22) new_type_dec -> new_type . ID { new_type_params }
    (23) new_type_dec -> new_type . ID { new_type_params } declarators
    (24) new_type_dec -> new_type . ID declarators

    ID              shift and go to state 28


state 12

    (109) type -> VOID .

    ID              reduce using rule 109 (type -> VOID .)


state 13

    (110) type -> CHAR .

    ID              reduce using rule 110 (type -> CHAR .)


state 14

    (111) type -> SHORT .

    ID              reduce using rule 111 (type -> SHORT .)


state 15

    (112) type -> INT .

    ID              reduce using rule 112 (type -> INT .)


state 16

    (113) type -> LONG .

    ID              reduce using rule 113 (type -> LONG .)


state 17

    (114) type -> FLOAT .

    ID              reduce using rule 114 (type -> FLOAT .)


state 18

    (115) type -> DOUBLE .

    ID              reduce using rule 115 (type -> DOUBLE .)


state 19

    (25) new_type -> STRUCT .

    ID              reduce using rule 25 (new_type -> STRUCT .)


state 20

    (26) new_type -> CLASS .

    ID              reduce using rule 26 (new_type -> CLASS .)


state 21

    (1) program -> include program .

    $end            reduce using rule 1 (program -> include program .)


state 22

    (2) program -> external_decl program .

    $end            reduce using rule 2 (program -> external_decl program .)


state 23

    (6) external_decl -> decl ; .

    INCLUDE         reduce using rule 6 (external_decl -> decl ; .)
    ;               reduce using rule 6 (external_decl -> decl ; .)
    VOID            reduce using rule 6 (external_decl -> decl ; .)
    CHAR            reduce using rule 6 (external_decl -> decl ; .)
    SHORT           reduce using rule 6 (external_decl -> decl ; .)
    INT             reduce using rule 6 (external_decl -> decl ; .)
    LONG            reduce using rule 6 (external_decl -> decl ; .)
    FLOAT           reduce using rule 6 (external_decl -> decl ; .)
    DOUBLE          reduce using rule 6 (external_decl -> decl ; .)
    STRUCT          reduce using rule 6 (external_decl -> decl ; .)
    CLASS           reduce using rule 6 (external_decl -> decl ; .)
    $end            reduce using rule 6 (external_decl -> decl ; .)


state 24

    (30) func_def -> type ID . ( params ) { statements }
    (31) func_def -> type ID . ( ) { statements }
    (32) func_def -> type ID . ( params ) { }
    (33) func_def -> type ID . ( ) { }
    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    (               shift and go to state 29
    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    [               shift and go to state 30


state 25

    (11) usual_dec -> type declarators .

    ;               reduce using rule 11 (usual_dec -> type declarators .)


state 26

    (12) declarators -> declarator_1 . , declarators
    (13) declarators -> declarator_1 .

    ,               shift and go to state 31
    ;               reduce using rule 13 (declarators -> declarator_1 .)


state 27

    (14) declarator_1 -> declarator_2 .
    (15) declarator_1 -> declarator_2 . = initializer

    ,               reduce using rule 14 (declarator_1 -> declarator_2 .)
    ;               reduce using rule 14 (declarator_1 -> declarator_2 .)
    =               shift and go to state 32


state 28

    (22) new_type_dec -> new_type ID . { new_type_params }
    (23) new_type_dec -> new_type ID . { new_type_params } declarators
    (24) new_type_dec -> new_type ID . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    {               shift and go to state 34
    ID              shift and go to state 33

    declarators                    shift and go to state 35
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 29

    (30) func_def -> type ID ( . params ) { statements }
    (31) func_def -> type ID ( . ) { statements }
    (32) func_def -> type ID ( . params ) { }
    (33) func_def -> type ID ( . ) { }
    (17) declarator_2 -> ID ( . )
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    )               shift and go to state 38
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    type                           shift and go to state 36
    params                         shift and go to state 37
    param                          shift and go to state 39

state 30

    (18) declarator_2 -> ID [ . ]
    (19) declarator_2 -> ID [ . expression ]
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ]               shift and go to state 41
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 42
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 31

    (12) declarators -> declarator_1 , . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_1                   shift and go to state 26
    declarators                    shift and go to state 58
    declarator_2                   shift and go to state 27

state 32

    (15) declarator_1 -> declarator_2 = . initializer
    (20) initializer -> . expression
    (21) initializer -> . { expressions }
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    {               shift and go to state 61
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    initializer                    shift and go to state 59
    expression                     shift and go to state 60
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 33

    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    )               reduce using rule 16 (declarator_2 -> ID .)
    (               shift and go to state 62
    [               shift and go to state 30


state 34

    (22) new_type_dec -> new_type ID { . new_type_params }
    (23) new_type_dec -> new_type ID { . new_type_params } declarators
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_params                shift and go to state 63
    new_type_param                 shift and go to state 64
    type                           shift and go to state 65

state 35

    (24) new_type_dec -> new_type ID declarators .

    ;               reduce using rule 24 (new_type_dec -> new_type ID declarators .)


state 36

    (36) param -> type . declarator_2
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_2                   shift and go to state 66

state 37

    (30) func_def -> type ID ( params . ) { statements }
    (32) func_def -> type ID ( params . ) { }

    )               shift and go to state 67


state 38

    (31) func_def -> type ID ( ) . { statements }
    (33) func_def -> type ID ( ) . { }
    (17) declarator_2 -> ID ( ) .

    {               shift and go to state 68
    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 39

    (34) params -> param . , params
    (35) params -> param .

    ,               shift and go to state 69
    )               reduce using rule 35 (params -> param .)


state 40

    (104) element -> ID .

    [               reduce using rule 104 (element -> ID .)
    (               reduce using rule 104 (element -> ID .)
    PLUSPLUS        reduce using rule 104 (element -> ID .)
    MINUSMINUS      reduce using rule 104 (element -> ID .)
    .               reduce using rule 104 (element -> ID .)
    RARROW          reduce using rule 104 (element -> ID .)
    +               reduce using rule 104 (element -> ID .)
    -               reduce using rule 104 (element -> ID .)
    *               reduce using rule 104 (element -> ID .)
    /               reduce using rule 104 (element -> ID .)
    ^               reduce using rule 104 (element -> ID .)
    >               reduce using rule 104 (element -> ID .)
    <               reduce using rule 104 (element -> ID .)
    LOGAND          reduce using rule 104 (element -> ID .)
    LOGOR           reduce using rule 104 (element -> ID .)
    LOGEQ           reduce using rule 104 (element -> ID .)
    LOGNEQ          reduce using rule 104 (element -> ID .)
    LEQ             reduce using rule 104 (element -> ID .)
    GEQ             reduce using rule 104 (element -> ID .)
    LSHIFT          reduce using rule 104 (element -> ID .)
    RSHIFT          reduce using rule 104 (element -> ID .)
    =               reduce using rule 104 (element -> ID .)
    ADDEQ           reduce using rule 104 (element -> ID .)
    SUBEQ           reduce using rule 104 (element -> ID .)
    MULTEQ          reduce using rule 104 (element -> ID .)
    DIVEQ           reduce using rule 104 (element -> ID .)
    MODEQ           reduce using rule 104 (element -> ID .)
    ?               reduce using rule 104 (element -> ID .)
    ]               reduce using rule 104 (element -> ID .)
    ,               reduce using rule 104 (element -> ID .)
    ;               reduce using rule 104 (element -> ID .)
    )               reduce using rule 104 (element -> ID .)
    }               reduce using rule 104 (element -> ID .)
    :               reduce using rule 104 (element -> ID .)


state 41

    (18) declarator_2 -> ID [ ] .

    =               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ,               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ;               reduce using rule 18 (declarator_2 -> ID [ ] .)
    )               reduce using rule 18 (declarator_2 -> ID [ ] .)


state 42

    (19) declarator_2 -> ID [ expression . ]

    ]               shift and go to state 70


state 43

    (64) expression -> tern_expr .
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ]               reduce using rule 64 (expression -> tern_expr .)
    ,               reduce using rule 64 (expression -> tern_expr .)
    ;               reduce using rule 64 (expression -> tern_expr .)
    )               reduce using rule 64 (expression -> tern_expr .)
    }               reduce using rule 64 (expression -> tern_expr .)
    ?               shift and go to state 71


state 44

    (66) tern_expr -> bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ?               reduce using rule 66 (tern_expr -> bin_expr .)
    ]               reduce using rule 66 (tern_expr -> bin_expr .)
    ,               reduce using rule 66 (tern_expr -> bin_expr .)
    ;               reduce using rule 66 (tern_expr -> bin_expr .)
    )               reduce using rule 66 (tern_expr -> bin_expr .)
    }               reduce using rule 66 (tern_expr -> bin_expr .)
    :               reduce using rule 66 (tern_expr -> bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86
    =               shift and go to state 87
    ADDEQ           shift and go to state 88
    SUBEQ           shift and go to state 89
    MULTEQ          shift and go to state 90
    DIVEQ           shift and go to state 91
    MODEQ           shift and go to state 92


state 45

    (91) pre_unary_expr -> + . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 93
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 46

    (92) pre_unary_expr -> - . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 94
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 47

    (88) bin_expr -> pre_unary_expr .

    +               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    -               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    *               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    /               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ^               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    >               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    <               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LOGAND          reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LOGOR           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LOGEQ           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LOGNEQ          reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LEQ             reduce using rule 88 (bin_expr -> pre_unary_expr .)
    GEQ             reduce using rule 88 (bin_expr -> pre_unary_expr .)
    LSHIFT          reduce using rule 88 (bin_expr -> pre_unary_expr .)
    RSHIFT          reduce using rule 88 (bin_expr -> pre_unary_expr .)
    =               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ADDEQ           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    SUBEQ           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    MULTEQ          reduce using rule 88 (bin_expr -> pre_unary_expr .)
    DIVEQ           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    MODEQ           reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ?               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ]               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ,               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    ;               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    )               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    }               reduce using rule 88 (bin_expr -> pre_unary_expr .)
    :               reduce using rule 88 (bin_expr -> pre_unary_expr .)


state 48

    (89) pre_unary_expr -> PLUSPLUS . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 95
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 49

    (90) pre_unary_expr -> MINUSMINUS . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 96
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 50

    (93) pre_unary_expr -> ! . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 97
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 51

    (94) pre_unary_expr -> & . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    pre_unary_expr                 shift and go to state 98
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 52

    (95) pre_unary_expr -> post_unary_expr .
    (96) post_unary_expr -> post_unary_expr . [ expression ]
    (97) post_unary_expr -> post_unary_expr . ( )
    (98) post_unary_expr -> post_unary_expr . ( expressions )
    (99) post_unary_expr -> post_unary_expr . PLUSPLUS
    (100) post_unary_expr -> post_unary_expr . MINUSMINUS
    (101) post_unary_expr -> post_unary_expr . . ID
    (102) post_unary_expr -> post_unary_expr . RARROW ID

    +               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    -               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    *               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    /               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ^               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    >               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    <               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LOGAND          reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LOGOR           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LOGEQ           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LOGNEQ          reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LEQ             reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    GEQ             reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    LSHIFT          reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    RSHIFT          reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    =               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ADDEQ           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    SUBEQ           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    MULTEQ          reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    DIVEQ           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    MODEQ           reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ?               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ]               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ,               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    ;               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    )               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    }               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    :               reduce using rule 95 (pre_unary_expr -> post_unary_expr .)
    [               shift and go to state 99
    (               shift and go to state 100
    PLUSPLUS        shift and go to state 101
    MINUSMINUS      shift and go to state 102
    .               shift and go to state 103
    RARROW          shift and go to state 104


state 53

    (108) element -> ( . expression )
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 105
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 54

    (103) post_unary_expr -> element .

    [               reduce using rule 103 (post_unary_expr -> element .)
    (               reduce using rule 103 (post_unary_expr -> element .)
    PLUSPLUS        reduce using rule 103 (post_unary_expr -> element .)
    MINUSMINUS      reduce using rule 103 (post_unary_expr -> element .)
    .               reduce using rule 103 (post_unary_expr -> element .)
    RARROW          reduce using rule 103 (post_unary_expr -> element .)
    +               reduce using rule 103 (post_unary_expr -> element .)
    -               reduce using rule 103 (post_unary_expr -> element .)
    *               reduce using rule 103 (post_unary_expr -> element .)
    /               reduce using rule 103 (post_unary_expr -> element .)
    ^               reduce using rule 103 (post_unary_expr -> element .)
    >               reduce using rule 103 (post_unary_expr -> element .)
    <               reduce using rule 103 (post_unary_expr -> element .)
    LOGAND          reduce using rule 103 (post_unary_expr -> element .)
    LOGOR           reduce using rule 103 (post_unary_expr -> element .)
    LOGEQ           reduce using rule 103 (post_unary_expr -> element .)
    LOGNEQ          reduce using rule 103 (post_unary_expr -> element .)
    LEQ             reduce using rule 103 (post_unary_expr -> element .)
    GEQ             reduce using rule 103 (post_unary_expr -> element .)
    LSHIFT          reduce using rule 103 (post_unary_expr -> element .)
    RSHIFT          reduce using rule 103 (post_unary_expr -> element .)
    =               reduce using rule 103 (post_unary_expr -> element .)
    ADDEQ           reduce using rule 103 (post_unary_expr -> element .)
    SUBEQ           reduce using rule 103 (post_unary_expr -> element .)
    MULTEQ          reduce using rule 103 (post_unary_expr -> element .)
    DIVEQ           reduce using rule 103 (post_unary_expr -> element .)
    MODEQ           reduce using rule 103 (post_unary_expr -> element .)
    ?               reduce using rule 103 (post_unary_expr -> element .)
    ]               reduce using rule 103 (post_unary_expr -> element .)
    ,               reduce using rule 103 (post_unary_expr -> element .)
    ;               reduce using rule 103 (post_unary_expr -> element .)
    )               reduce using rule 103 (post_unary_expr -> element .)
    }               reduce using rule 103 (post_unary_expr -> element .)
    :               reduce using rule 103 (post_unary_expr -> element .)


state 55

    (105) element -> NUMBER .

    [               reduce using rule 105 (element -> NUMBER .)
    (               reduce using rule 105 (element -> NUMBER .)
    PLUSPLUS        reduce using rule 105 (element -> NUMBER .)
    MINUSMINUS      reduce using rule 105 (element -> NUMBER .)
    .               reduce using rule 105 (element -> NUMBER .)
    RARROW          reduce using rule 105 (element -> NUMBER .)
    +               reduce using rule 105 (element -> NUMBER .)
    -               reduce using rule 105 (element -> NUMBER .)
    *               reduce using rule 105 (element -> NUMBER .)
    /               reduce using rule 105 (element -> NUMBER .)
    ^               reduce using rule 105 (element -> NUMBER .)
    >               reduce using rule 105 (element -> NUMBER .)
    <               reduce using rule 105 (element -> NUMBER .)
    LOGAND          reduce using rule 105 (element -> NUMBER .)
    LOGOR           reduce using rule 105 (element -> NUMBER .)
    LOGEQ           reduce using rule 105 (element -> NUMBER .)
    LOGNEQ          reduce using rule 105 (element -> NUMBER .)
    LEQ             reduce using rule 105 (element -> NUMBER .)
    GEQ             reduce using rule 105 (element -> NUMBER .)
    LSHIFT          reduce using rule 105 (element -> NUMBER .)
    RSHIFT          reduce using rule 105 (element -> NUMBER .)
    =               reduce using rule 105 (element -> NUMBER .)
    ADDEQ           reduce using rule 105 (element -> NUMBER .)
    SUBEQ           reduce using rule 105 (element -> NUMBER .)
    MULTEQ          reduce using rule 105 (element -> NUMBER .)
    DIVEQ           reduce using rule 105 (element -> NUMBER .)
    MODEQ           reduce using rule 105 (element -> NUMBER .)
    ?               reduce using rule 105 (element -> NUMBER .)
    ]               reduce using rule 105 (element -> NUMBER .)
    ,               reduce using rule 105 (element -> NUMBER .)
    ;               reduce using rule 105 (element -> NUMBER .)
    )               reduce using rule 105 (element -> NUMBER .)
    }               reduce using rule 105 (element -> NUMBER .)
    :               reduce using rule 105 (element -> NUMBER .)


state 56

    (106) element -> CHR .

    [               reduce using rule 106 (element -> CHR .)
    (               reduce using rule 106 (element -> CHR .)
    PLUSPLUS        reduce using rule 106 (element -> CHR .)
    MINUSMINUS      reduce using rule 106 (element -> CHR .)
    .               reduce using rule 106 (element -> CHR .)
    RARROW          reduce using rule 106 (element -> CHR .)
    +               reduce using rule 106 (element -> CHR .)
    -               reduce using rule 106 (element -> CHR .)
    *               reduce using rule 106 (element -> CHR .)
    /               reduce using rule 106 (element -> CHR .)
    ^               reduce using rule 106 (element -> CHR .)
    >               reduce using rule 106 (element -> CHR .)
    <               reduce using rule 106 (element -> CHR .)
    LOGAND          reduce using rule 106 (element -> CHR .)
    LOGOR           reduce using rule 106 (element -> CHR .)
    LOGEQ           reduce using rule 106 (element -> CHR .)
    LOGNEQ          reduce using rule 106 (element -> CHR .)
    LEQ             reduce using rule 106 (element -> CHR .)
    GEQ             reduce using rule 106 (element -> CHR .)
    LSHIFT          reduce using rule 106 (element -> CHR .)
    RSHIFT          reduce using rule 106 (element -> CHR .)
    =               reduce using rule 106 (element -> CHR .)
    ADDEQ           reduce using rule 106 (element -> CHR .)
    SUBEQ           reduce using rule 106 (element -> CHR .)
    MULTEQ          reduce using rule 106 (element -> CHR .)
    DIVEQ           reduce using rule 106 (element -> CHR .)
    MODEQ           reduce using rule 106 (element -> CHR .)
    ?               reduce using rule 106 (element -> CHR .)
    ]               reduce using rule 106 (element -> CHR .)
    ,               reduce using rule 106 (element -> CHR .)
    ;               reduce using rule 106 (element -> CHR .)
    )               reduce using rule 106 (element -> CHR .)
    }               reduce using rule 106 (element -> CHR .)
    :               reduce using rule 106 (element -> CHR .)


state 57

    (107) element -> STR .

    [               reduce using rule 107 (element -> STR .)
    (               reduce using rule 107 (element -> STR .)
    PLUSPLUS        reduce using rule 107 (element -> STR .)
    MINUSMINUS      reduce using rule 107 (element -> STR .)
    .               reduce using rule 107 (element -> STR .)
    RARROW          reduce using rule 107 (element -> STR .)
    +               reduce using rule 107 (element -> STR .)
    -               reduce using rule 107 (element -> STR .)
    *               reduce using rule 107 (element -> STR .)
    /               reduce using rule 107 (element -> STR .)
    ^               reduce using rule 107 (element -> STR .)
    >               reduce using rule 107 (element -> STR .)
    <               reduce using rule 107 (element -> STR .)
    LOGAND          reduce using rule 107 (element -> STR .)
    LOGOR           reduce using rule 107 (element -> STR .)
    LOGEQ           reduce using rule 107 (element -> STR .)
    LOGNEQ          reduce using rule 107 (element -> STR .)
    LEQ             reduce using rule 107 (element -> STR .)
    GEQ             reduce using rule 107 (element -> STR .)
    LSHIFT          reduce using rule 107 (element -> STR .)
    RSHIFT          reduce using rule 107 (element -> STR .)
    =               reduce using rule 107 (element -> STR .)
    ADDEQ           reduce using rule 107 (element -> STR .)
    SUBEQ           reduce using rule 107 (element -> STR .)
    MULTEQ          reduce using rule 107 (element -> STR .)
    DIVEQ           reduce using rule 107 (element -> STR .)
    MODEQ           reduce using rule 107 (element -> STR .)
    ?               reduce using rule 107 (element -> STR .)
    ]               reduce using rule 107 (element -> STR .)
    ,               reduce using rule 107 (element -> STR .)
    ;               reduce using rule 107 (element -> STR .)
    )               reduce using rule 107 (element -> STR .)
    }               reduce using rule 107 (element -> STR .)
    :               reduce using rule 107 (element -> STR .)


state 58

    (12) declarators -> declarator_1 , declarators .

    ;               reduce using rule 12 (declarators -> declarator_1 , declarators .)


state 59

    (15) declarator_1 -> declarator_2 = initializer .

    ,               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)
    ;               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)


state 60

    (20) initializer -> expression .

    ,               reduce using rule 20 (initializer -> expression .)
    ;               reduce using rule 20 (initializer -> expression .)


state 61

    (21) initializer -> { . expressions }
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expressions                    shift and go to state 106
    expression                     shift and go to state 107
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 62

    (17) declarator_2 -> ID ( . )

    )               shift and go to state 108


state 63

    (22) new_type_dec -> new_type ID { new_type_params . }
    (23) new_type_dec -> new_type ID { new_type_params . } declarators

    }               shift and go to state 109


state 64

    (27) new_type_params -> new_type_param . new_type_params
    (28) new_type_params -> new_type_param .
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    }               reduce using rule 28 (new_type_params -> new_type_param .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_param                 shift and go to state 64
    new_type_params                shift and go to state 110
    type                           shift and go to state 65

state 65

    (29) new_type_param -> type . declarators ;
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 111
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 66

    (36) param -> type declarator_2 .

    ,               reduce using rule 36 (param -> type declarator_2 .)
    )               reduce using rule 36 (param -> type declarator_2 .)


state 67

    (30) func_def -> type ID ( params ) . { statements }
    (32) func_def -> type ID ( params ) . { }

    {               shift and go to state 112


state 68

    (31) func_def -> type ID ( ) { . statements }
    (33) func_def -> type ID ( ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    }               shift and go to state 116
    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    type                           shift and go to state 113
    statements                     shift and go to state 115
    statement                      shift and go to state 117
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 69

    (34) params -> param , . params
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    param                          shift and go to state 39
    params                         shift and go to state 132
    type                           shift and go to state 36

state 70

    (19) declarator_2 -> ID [ expression ] .

    =               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ,               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ;               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    )               reduce using rule 19 (declarator_2 -> ID [ expression ] .)


state 71

    (65) tern_expr -> tern_expr ? . tern_expr : tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    tern_expr                      shift and go to state 133
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 72

    (67) bin_expr -> bin_expr + . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 134
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 73

    (68) bin_expr -> bin_expr - . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 135
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 74

    (69) bin_expr -> bin_expr * . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 136
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 75

    (70) bin_expr -> bin_expr / . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 137
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 76

    (71) bin_expr -> bin_expr ^ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 138
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 77

    (72) bin_expr -> bin_expr > . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 139
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 78

    (73) bin_expr -> bin_expr < . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 140
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 79

    (74) bin_expr -> bin_expr LOGAND . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 141
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 80

    (75) bin_expr -> bin_expr LOGOR . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 142
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 81

    (76) bin_expr -> bin_expr LOGEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 143
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 82

    (77) bin_expr -> bin_expr LOGNEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 144
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 83

    (78) bin_expr -> bin_expr LEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 145
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 84

    (79) bin_expr -> bin_expr GEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 146
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 85

    (80) bin_expr -> bin_expr LSHIFT . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 147
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 86

    (81) bin_expr -> bin_expr RSHIFT . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 148
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 87

    (82) bin_expr -> bin_expr = . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 149
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 88

    (83) bin_expr -> bin_expr ADDEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 150
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 89

    (84) bin_expr -> bin_expr SUBEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 151
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 90

    (85) bin_expr -> bin_expr MULTEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 152
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 91

    (86) bin_expr -> bin_expr DIVEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 153
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 92

    (87) bin_expr -> bin_expr MODEQ . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    bin_expr                       shift and go to state 154
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 93

    (91) pre_unary_expr -> + pre_unary_expr .

    +               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    -               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    *               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    /               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ^               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    >               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    <               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LOGAND          reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LOGOR           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LOGEQ           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LOGNEQ          reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LEQ             reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    GEQ             reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    LSHIFT          reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    RSHIFT          reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    =               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ADDEQ           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    SUBEQ           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    MULTEQ          reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    DIVEQ           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    MODEQ           reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ?               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ]               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ,               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    ;               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    )               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    }               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)
    :               reduce using rule 91 (pre_unary_expr -> + pre_unary_expr .)


state 94

    (92) pre_unary_expr -> - pre_unary_expr .

    +               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    -               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    *               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    /               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ^               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    >               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    <               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LOGAND          reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LOGOR           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LOGEQ           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LOGNEQ          reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LEQ             reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    GEQ             reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    LSHIFT          reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    RSHIFT          reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    =               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ADDEQ           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    SUBEQ           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    MULTEQ          reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    DIVEQ           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    MODEQ           reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ?               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ]               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ,               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    ;               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    )               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    }               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)
    :               reduce using rule 92 (pre_unary_expr -> - pre_unary_expr .)


state 95

    (89) pre_unary_expr -> PLUSPLUS pre_unary_expr .

    +               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    -               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    *               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    /               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ^               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    >               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    <               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGAND          reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGOR           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGEQ           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGNEQ          reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LEQ             reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    GEQ             reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LSHIFT          reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    RSHIFT          reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    =               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ADDEQ           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    SUBEQ           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    MULTEQ          reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    DIVEQ           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    MODEQ           reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ?               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ]               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ,               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ;               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    )               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    }               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    :               reduce using rule 89 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)


state 96

    (90) pre_unary_expr -> MINUSMINUS pre_unary_expr .

    +               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    -               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    *               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    /               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ^               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    >               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    <               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGAND          reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGOR           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGEQ           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGNEQ          reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LEQ             reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    GEQ             reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LSHIFT          reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    RSHIFT          reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    =               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ADDEQ           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    SUBEQ           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    MULTEQ          reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    DIVEQ           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    MODEQ           reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ?               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ]               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ,               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ;               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    )               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    }               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    :               reduce using rule 90 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)


state 97

    (93) pre_unary_expr -> ! pre_unary_expr .

    +               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    -               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    *               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    /               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ^               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    >               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    <               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LOGAND          reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LOGOR           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LOGEQ           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LOGNEQ          reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LEQ             reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    GEQ             reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    LSHIFT          reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    RSHIFT          reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    =               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ADDEQ           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    SUBEQ           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    MULTEQ          reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    DIVEQ           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    MODEQ           reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ?               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ]               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ,               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    ;               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    )               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    }               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)
    :               reduce using rule 93 (pre_unary_expr -> ! pre_unary_expr .)


state 98

    (94) pre_unary_expr -> & pre_unary_expr .

    +               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    -               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    *               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    /               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ^               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    >               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    <               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LOGAND          reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LOGOR           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LOGEQ           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LOGNEQ          reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LEQ             reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    GEQ             reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    LSHIFT          reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    RSHIFT          reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    =               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ADDEQ           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    SUBEQ           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    MULTEQ          reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    DIVEQ           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    MODEQ           reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ?               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ]               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ,               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    ;               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    )               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    }               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)
    :               reduce using rule 94 (pre_unary_expr -> & pre_unary_expr .)


state 99

    (96) post_unary_expr -> post_unary_expr [ . expression ]
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    post_unary_expr                shift and go to state 52
    expression                     shift and go to state 155
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    element                        shift and go to state 54

state 100

    (97) post_unary_expr -> post_unary_expr ( . )
    (98) post_unary_expr -> post_unary_expr ( . expressions )
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    )               shift and go to state 156
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    post_unary_expr                shift and go to state 52
    expressions                    shift and go to state 157
    expression                     shift and go to state 107
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    element                        shift and go to state 54

state 101

    (99) post_unary_expr -> post_unary_expr PLUSPLUS .

    [               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    (               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    .               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RARROW          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    +               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    -               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    *               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    /               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ^               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    >               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    <               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGAND          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGOR           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGNEQ          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    GEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    =               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ADDEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    SUBEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MULTEQ          reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    DIVEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MODEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ?               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ]               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ,               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ;               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    )               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    }               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    :               reduce using rule 99 (post_unary_expr -> post_unary_expr PLUSPLUS .)


state 102

    (100) post_unary_expr -> post_unary_expr MINUSMINUS .

    [               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    (               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    .               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RARROW          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    +               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    -               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    *               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    /               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ^               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    >               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    <               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGAND          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGOR           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGNEQ          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    GEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    =               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ADDEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    SUBEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MULTEQ          reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    DIVEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MODEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ?               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ]               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ,               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ;               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    )               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    }               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    :               reduce using rule 100 (post_unary_expr -> post_unary_expr MINUSMINUS .)


state 103

    (101) post_unary_expr -> post_unary_expr . . ID

    ID              shift and go to state 158


state 104

    (102) post_unary_expr -> post_unary_expr RARROW . ID

    ID              shift and go to state 159


state 105

    (108) element -> ( expression . )

    )               shift and go to state 160


state 106

    (21) initializer -> { expressions . }

    }               shift and go to state 161


state 107

    (62) expressions -> expression . , expressions
    (63) expressions -> expression .

    ,               shift and go to state 162
    }               reduce using rule 63 (expressions -> expression .)
    )               reduce using rule 63 (expressions -> expression .)
    ;               reduce using rule 63 (expressions -> expression .)


state 108

    (17) declarator_2 -> ID ( ) .

    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)
    )               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 109

    (22) new_type_dec -> new_type ID { new_type_params } .
    (23) new_type_dec -> new_type ID { new_type_params } . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ;               reduce using rule 22 (new_type_dec -> new_type ID { new_type_params } .)
    ID              shift and go to state 33

    declarators                    shift and go to state 163
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 110

    (27) new_type_params -> new_type_param new_type_params .

    }               reduce using rule 27 (new_type_params -> new_type_param new_type_params .)


state 111

    (29) new_type_param -> type declarators . ;

    ;               shift and go to state 164


state 112

    (30) func_def -> type ID ( params ) { . statements }
    (32) func_def -> type ID ( params ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    }               shift and go to state 166
    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    type                           shift and go to state 113
    statements                     shift and go to state 165
    statement                      shift and go to state 117
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 113

    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 114

    (48) block -> { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    stats_or_null                  shift and go to state 167
    statements                     shift and go to state 168
    empty                          shift and go to state 169
    statement                      shift and go to state 117
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 115

    (31) func_def -> type ID ( ) { statements . }

    }               shift and go to state 170


state 116

    (33) func_def -> type ID ( ) { } .

    INCLUDE         reduce using rule 33 (func_def -> type ID ( ) { } .)
    ;               reduce using rule 33 (func_def -> type ID ( ) { } .)
    VOID            reduce using rule 33 (func_def -> type ID ( ) { } .)
    CHAR            reduce using rule 33 (func_def -> type ID ( ) { } .)
    SHORT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    INT             reduce using rule 33 (func_def -> type ID ( ) { } .)
    LONG            reduce using rule 33 (func_def -> type ID ( ) { } .)
    FLOAT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    DOUBLE          reduce using rule 33 (func_def -> type ID ( ) { } .)
    STRUCT          reduce using rule 33 (func_def -> type ID ( ) { } .)
    CLASS           reduce using rule 33 (func_def -> type ID ( ) { } .)
    $end            reduce using rule 33 (func_def -> type ID ( ) { } .)


state 117

    (37) statements -> statement . statements
    (38) statements -> statement .
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    }               reduce using rule 38 (statements -> statement .)
    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    statement                      shift and go to state 117
    statements                     shift and go to state 171
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 118

    (39) statement -> expression . ;

    ;               shift and go to state 172


state 119

    (45) statement -> ; .

    ;               reduce using rule 45 (statement -> ; .)
    {               reduce using rule 45 (statement -> ; .)
    IF              reduce using rule 45 (statement -> ; .)
    WHILE           reduce using rule 45 (statement -> ; .)
    DO              reduce using rule 45 (statement -> ; .)
    FOR             reduce using rule 45 (statement -> ; .)
    BREAK           reduce using rule 45 (statement -> ; .)
    CONTINUE        reduce using rule 45 (statement -> ; .)
    RETURN          reduce using rule 45 (statement -> ; .)
    VOID            reduce using rule 45 (statement -> ; .)
    CHAR            reduce using rule 45 (statement -> ; .)
    SHORT           reduce using rule 45 (statement -> ; .)
    INT             reduce using rule 45 (statement -> ; .)
    LONG            reduce using rule 45 (statement -> ; .)
    FLOAT           reduce using rule 45 (statement -> ; .)
    DOUBLE          reduce using rule 45 (statement -> ; .)
    STRUCT          reduce using rule 45 (statement -> ; .)
    CLASS           reduce using rule 45 (statement -> ; .)
    PLUSPLUS        reduce using rule 45 (statement -> ; .)
    MINUSMINUS      reduce using rule 45 (statement -> ; .)
    +               reduce using rule 45 (statement -> ; .)
    -               reduce using rule 45 (statement -> ; .)
    !               reduce using rule 45 (statement -> ; .)
    &               reduce using rule 45 (statement -> ; .)
    ID              reduce using rule 45 (statement -> ; .)
    NUMBER          reduce using rule 45 (statement -> ; .)
    CHR             reduce using rule 45 (statement -> ; .)
    STR             reduce using rule 45 (statement -> ; .)
    (               reduce using rule 45 (statement -> ; .)
    }               reduce using rule 45 (statement -> ; .)
    ELSE            reduce using rule 45 (statement -> ; .)


state 120

    (40) statement -> decl . ;

    ;               shift and go to state 173


state 121

    (41) statement -> block .

    ;               reduce using rule 41 (statement -> block .)
    {               reduce using rule 41 (statement -> block .)
    IF              reduce using rule 41 (statement -> block .)
    WHILE           reduce using rule 41 (statement -> block .)
    DO              reduce using rule 41 (statement -> block .)
    FOR             reduce using rule 41 (statement -> block .)
    BREAK           reduce using rule 41 (statement -> block .)
    CONTINUE        reduce using rule 41 (statement -> block .)
    RETURN          reduce using rule 41 (statement -> block .)
    VOID            reduce using rule 41 (statement -> block .)
    CHAR            reduce using rule 41 (statement -> block .)
    SHORT           reduce using rule 41 (statement -> block .)
    INT             reduce using rule 41 (statement -> block .)
    LONG            reduce using rule 41 (statement -> block .)
    FLOAT           reduce using rule 41 (statement -> block .)
    DOUBLE          reduce using rule 41 (statement -> block .)
    STRUCT          reduce using rule 41 (statement -> block .)
    CLASS           reduce using rule 41 (statement -> block .)
    PLUSPLUS        reduce using rule 41 (statement -> block .)
    MINUSMINUS      reduce using rule 41 (statement -> block .)
    +               reduce using rule 41 (statement -> block .)
    -               reduce using rule 41 (statement -> block .)
    !               reduce using rule 41 (statement -> block .)
    &               reduce using rule 41 (statement -> block .)
    ID              reduce using rule 41 (statement -> block .)
    NUMBER          reduce using rule 41 (statement -> block .)
    CHR             reduce using rule 41 (statement -> block .)
    STR             reduce using rule 41 (statement -> block .)
    (               reduce using rule 41 (statement -> block .)
    }               reduce using rule 41 (statement -> block .)
    ELSE            reduce using rule 41 (statement -> block .)


state 122

    (42) statement -> conditional .

    ;               reduce using rule 42 (statement -> conditional .)
    {               reduce using rule 42 (statement -> conditional .)
    IF              reduce using rule 42 (statement -> conditional .)
    WHILE           reduce using rule 42 (statement -> conditional .)
    DO              reduce using rule 42 (statement -> conditional .)
    FOR             reduce using rule 42 (statement -> conditional .)
    BREAK           reduce using rule 42 (statement -> conditional .)
    CONTINUE        reduce using rule 42 (statement -> conditional .)
    RETURN          reduce using rule 42 (statement -> conditional .)
    VOID            reduce using rule 42 (statement -> conditional .)
    CHAR            reduce using rule 42 (statement -> conditional .)
    SHORT           reduce using rule 42 (statement -> conditional .)
    INT             reduce using rule 42 (statement -> conditional .)
    LONG            reduce using rule 42 (statement -> conditional .)
    FLOAT           reduce using rule 42 (statement -> conditional .)
    DOUBLE          reduce using rule 42 (statement -> conditional .)
    STRUCT          reduce using rule 42 (statement -> conditional .)
    CLASS           reduce using rule 42 (statement -> conditional .)
    PLUSPLUS        reduce using rule 42 (statement -> conditional .)
    MINUSMINUS      reduce using rule 42 (statement -> conditional .)
    +               reduce using rule 42 (statement -> conditional .)
    -               reduce using rule 42 (statement -> conditional .)
    !               reduce using rule 42 (statement -> conditional .)
    &               reduce using rule 42 (statement -> conditional .)
    ID              reduce using rule 42 (statement -> conditional .)
    NUMBER          reduce using rule 42 (statement -> conditional .)
    CHR             reduce using rule 42 (statement -> conditional .)
    STR             reduce using rule 42 (statement -> conditional .)
    (               reduce using rule 42 (statement -> conditional .)
    }               reduce using rule 42 (statement -> conditional .)
    ELSE            reduce using rule 42 (statement -> conditional .)


state 123

    (43) statement -> iteration .

    ;               reduce using rule 43 (statement -> iteration .)
    {               reduce using rule 43 (statement -> iteration .)
    IF              reduce using rule 43 (statement -> iteration .)
    WHILE           reduce using rule 43 (statement -> iteration .)
    DO              reduce using rule 43 (statement -> iteration .)
    FOR             reduce using rule 43 (statement -> iteration .)
    BREAK           reduce using rule 43 (statement -> iteration .)
    CONTINUE        reduce using rule 43 (statement -> iteration .)
    RETURN          reduce using rule 43 (statement -> iteration .)
    VOID            reduce using rule 43 (statement -> iteration .)
    CHAR            reduce using rule 43 (statement -> iteration .)
    SHORT           reduce using rule 43 (statement -> iteration .)
    INT             reduce using rule 43 (statement -> iteration .)
    LONG            reduce using rule 43 (statement -> iteration .)
    FLOAT           reduce using rule 43 (statement -> iteration .)
    DOUBLE          reduce using rule 43 (statement -> iteration .)
    STRUCT          reduce using rule 43 (statement -> iteration .)
    CLASS           reduce using rule 43 (statement -> iteration .)
    PLUSPLUS        reduce using rule 43 (statement -> iteration .)
    MINUSMINUS      reduce using rule 43 (statement -> iteration .)
    +               reduce using rule 43 (statement -> iteration .)
    -               reduce using rule 43 (statement -> iteration .)
    !               reduce using rule 43 (statement -> iteration .)
    &               reduce using rule 43 (statement -> iteration .)
    ID              reduce using rule 43 (statement -> iteration .)
    NUMBER          reduce using rule 43 (statement -> iteration .)
    CHR             reduce using rule 43 (statement -> iteration .)
    STR             reduce using rule 43 (statement -> iteration .)
    (               reduce using rule 43 (statement -> iteration .)
    }               reduce using rule 43 (statement -> iteration .)
    ELSE            reduce using rule 43 (statement -> iteration .)


state 124

    (44) statement -> jump . ;

    ;               shift and go to state 174


state 125

    (46) conditional -> IF . ( expression ) statement
    (47) conditional -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 175


state 126

    (51) iteration -> WHILE . ( expression ) statement

    (               shift and go to state 176


state 127

    (52) iteration -> DO . statement WHILE ( expression ) ;
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    statement                      shift and go to state 177
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 128

    (53) iteration -> FOR . ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement

    (               shift and go to state 178


state 129

    (58) jump -> BREAK .

    ;               reduce using rule 58 (jump -> BREAK .)


state 130

    (59) jump -> CONTINUE .

    ;               reduce using rule 59 (jump -> CONTINUE .)


state 131

    (60) jump -> RETURN .
    (61) jump -> RETURN . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               reduce using rule 60 (jump -> RETURN .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 179
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 132

    (34) params -> param , params .

    )               reduce using rule 34 (params -> param , params .)


state 133

    (65) tern_expr -> tern_expr ? tern_expr . : tern_expr
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    :               shift and go to state 180
    ?               shift and go to state 71


state 134

    (67) bin_expr -> bin_expr + bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    +               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    -               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ^               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    >               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    <               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LOGAND          reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LOGOR           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LOGEQ           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LOGNEQ          reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LEQ             reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    GEQ             reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    LSHIFT          reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    RSHIFT          reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    =               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ADDEQ           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    SUBEQ           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    MULTEQ          reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    DIVEQ           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    MODEQ           reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ?               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ]               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ,               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    ;               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    )               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    }               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    :               reduce using rule 67 (bin_expr -> bin_expr + bin_expr .)
    *               shift and go to state 74
    /               shift and go to state 75

  ! *               [ reduce using rule 67 (bin_expr -> bin_expr + bin_expr .) ]
  ! /               [ reduce using rule 67 (bin_expr -> bin_expr + bin_expr .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 135

    (68) bin_expr -> bin_expr - bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    +               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    -               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ^               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    >               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    <               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LOGAND          reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LOGOR           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LOGEQ           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LOGNEQ          reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LEQ             reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    GEQ             reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    LSHIFT          reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    RSHIFT          reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    =               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ADDEQ           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    SUBEQ           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    MULTEQ          reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    DIVEQ           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    MODEQ           reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ?               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ]               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ,               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    ;               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    )               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    }               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    :               reduce using rule 68 (bin_expr -> bin_expr - bin_expr .)
    *               shift and go to state 74
    /               shift and go to state 75

  ! *               [ reduce using rule 68 (bin_expr -> bin_expr - bin_expr .) ]
  ! /               [ reduce using rule 68 (bin_expr -> bin_expr - bin_expr .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 136

    (69) bin_expr -> bin_expr * bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    +               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    -               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    *               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    /               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ^               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    >               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    <               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LOGAND          reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LOGOR           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LOGEQ           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LOGNEQ          reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LEQ             reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    GEQ             reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    LSHIFT          reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    RSHIFT          reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    =               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ADDEQ           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    SUBEQ           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    MULTEQ          reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    DIVEQ           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    MODEQ           reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ?               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ]               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ,               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    ;               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    )               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    }               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)
    :               reduce using rule 69 (bin_expr -> bin_expr * bin_expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 137

    (70) bin_expr -> bin_expr / bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    +               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    -               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    *               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    /               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ^               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    >               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    <               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LOGAND          reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LOGOR           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LOGEQ           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LOGNEQ          reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LEQ             reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    GEQ             reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    LSHIFT          reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    RSHIFT          reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    =               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ADDEQ           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    SUBEQ           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    MULTEQ          reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    DIVEQ           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    MODEQ           reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ?               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ]               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ,               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    ;               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    )               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    }               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)
    :               reduce using rule 70 (bin_expr -> bin_expr / bin_expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 138

    (71) bin_expr -> bin_expr ^ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    LOGAND          reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    LOGOR           reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    =               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ADDEQ           reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    SUBEQ           reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    MULTEQ          reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    DIVEQ           reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    MODEQ           reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ?               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ]               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ,               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    ;               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    )               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    }               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    :               reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 77
    <               shift and go to state 78
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! -               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! *               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! /               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! >               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! <               [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! LEQ             [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! GEQ             [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 71 (bin_expr -> bin_expr ^ bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 139

    (72) bin_expr -> bin_expr > bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    >               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    <               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    LOGAND          reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    LOGOR           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    LOGEQ           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    LOGNEQ          reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    LEQ             reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    GEQ             reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    =               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ADDEQ           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    SUBEQ           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    MULTEQ          reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    DIVEQ           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    MODEQ           reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ?               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ]               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ,               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    ;               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    )               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    }               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    :               reduce using rule 72 (bin_expr -> bin_expr > bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! -               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! *               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! /               [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! LSHIFT          [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! RSHIFT          [ reduce using rule 72 (bin_expr -> bin_expr > bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 140

    (73) bin_expr -> bin_expr < bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    >               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    <               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    LOGAND          reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    LOGOR           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    LOGEQ           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    LOGNEQ          reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    LEQ             reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    GEQ             reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    =               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ADDEQ           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    SUBEQ           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    MULTEQ          reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    DIVEQ           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    MODEQ           reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ?               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ]               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ,               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    ;               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    )               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    }               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    :               reduce using rule 73 (bin_expr -> bin_expr < bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! -               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! *               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! /               [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! LSHIFT          [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! RSHIFT          [ reduce using rule 73 (bin_expr -> bin_expr < bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 141

    (74) bin_expr -> bin_expr LOGAND bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    LOGAND          reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    LOGOR           reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    =               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    ADDEQ           reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    SUBEQ           reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    MULTEQ          reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    DIVEQ           reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    MODEQ           reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    ?               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    ]               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    ,               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    ;               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    )               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    }               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    :               reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! -               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! *               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! /               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! ^               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! >               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! <               [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! LOGEQ           [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! LEQ             [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! GEQ             [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! LSHIFT          [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! RSHIFT          [ reduce using rule 74 (bin_expr -> bin_expr LOGAND bin_expr .) ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 142

    (75) bin_expr -> bin_expr LOGOR bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    LOGOR           reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    =               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    ADDEQ           reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    SUBEQ           reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    MULTEQ          reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    DIVEQ           reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    MODEQ           reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    ?               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    ]               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    ,               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    ;               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    )               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    }               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    :               reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! -               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! *               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! /               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! ^               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! >               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! <               [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LOGAND          [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LOGEQ           [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LEQ             [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! GEQ             [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LSHIFT          [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! RSHIFT          [ reduce using rule 75 (bin_expr -> bin_expr LOGOR bin_expr .) ]
  ! LOGOR           [ shift and go to state 80 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 143

    (76) bin_expr -> bin_expr LOGEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    LOGAND          reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    LOGOR           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    LOGEQ           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    LOGNEQ          reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    =               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    ADDEQ           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    SUBEQ           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    MULTEQ          reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    DIVEQ           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    MODEQ           reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    ?               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    ]               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    ,               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    ;               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    )               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    }               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    :               reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 77
    <               shift and go to state 78
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! -               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! *               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! /               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! >               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! <               [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 76 (bin_expr -> bin_expr LOGEQ bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 144

    (77) bin_expr -> bin_expr LOGNEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    LOGAND          reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    LOGOR           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    LOGEQ           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    LOGNEQ          reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    =               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    ADDEQ           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    SUBEQ           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    MULTEQ          reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    DIVEQ           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    MODEQ           reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    ?               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    ]               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    ,               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    ;               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    )               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    }               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    :               reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    >               shift and go to state 77
    <               shift and go to state 78
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! -               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! *               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! /               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! >               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! <               [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 77 (bin_expr -> bin_expr LOGNEQ bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 145

    (78) bin_expr -> bin_expr LEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    >               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    <               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    LOGAND          reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    LOGOR           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    LOGEQ           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    LOGNEQ          reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    LEQ             reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    GEQ             reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    =               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    ADDEQ           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    SUBEQ           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    MULTEQ          reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    DIVEQ           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    MODEQ           reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    ?               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    ]               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    ,               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    ;               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    )               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    }               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    :               reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! -               [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! *               [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! /               [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 78 (bin_expr -> bin_expr LEQ bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 146

    (79) bin_expr -> bin_expr GEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    >               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    <               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    LOGAND          reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    LOGOR           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    LOGEQ           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    LOGNEQ          reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    LEQ             reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    GEQ             reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    =               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    ADDEQ           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    SUBEQ           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    MULTEQ          reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    DIVEQ           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    MODEQ           reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    ?               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    ]               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    ,               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    ;               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    )               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    }               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    :               reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! -               [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! *               [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! /               [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 79 (bin_expr -> bin_expr GEQ bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 147

    (80) bin_expr -> bin_expr LSHIFT bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    >               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    <               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LOGAND          reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LOGOR           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LOGEQ           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LOGNEQ          reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LEQ             reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    GEQ             reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    LSHIFT          reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    RSHIFT          reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    =               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    ADDEQ           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    SUBEQ           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    MULTEQ          reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    DIVEQ           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    MODEQ           reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    ?               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    ]               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    ,               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    ;               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    )               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    }               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    :               reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .) ]
  ! -               [ reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .) ]
  ! *               [ reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .) ]
  ! /               [ reduce using rule 80 (bin_expr -> bin_expr LSHIFT bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 148

    (81) bin_expr -> bin_expr RSHIFT bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    ^               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    >               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    <               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LOGAND          reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LOGOR           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LOGEQ           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LOGNEQ          reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LEQ             reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    GEQ             reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    LSHIFT          reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    RSHIFT          reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    =               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    ADDEQ           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    SUBEQ           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    MULTEQ          reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    DIVEQ           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    MODEQ           reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    ?               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    ]               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    ,               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    ;               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    )               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    }               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    :               reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .) ]
  ! -               [ reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .) ]
  ! *               [ reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .) ]
  ! /               [ reduce using rule 81 (bin_expr -> bin_expr RSHIFT bin_expr .) ]
  ! ^               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! <               [ shift and go to state 78 ]
  ! LOGAND          [ shift and go to state 79 ]
  ! LOGOR           [ shift and go to state 80 ]
  ! LOGEQ           [ shift and go to state 81 ]
  ! LOGNEQ          [ shift and go to state 82 ]
  ! LEQ             [ shift and go to state 83 ]
  ! GEQ             [ shift and go to state 84 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 86 ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 149

    (82) bin_expr -> bin_expr = bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    ADDEQ           reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    SUBEQ           reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    MULTEQ          reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    DIVEQ           reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    MODEQ           reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    ?               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    ]               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    ,               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    ;               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    )               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    }               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    :               reduce using rule 82 (bin_expr -> bin_expr = bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! -               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! *               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! /               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! ^               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! >               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! <               [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LOGAND          [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LOGOR           [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LOGEQ           [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LEQ             [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! GEQ             [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! LSHIFT          [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! RSHIFT          [ reduce using rule 82 (bin_expr -> bin_expr = bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 150

    (83) bin_expr -> bin_expr ADDEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    ADDEQ           reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    SUBEQ           reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    MULTEQ          reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    DIVEQ           reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    MODEQ           reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    ?               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    ]               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    ,               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    ;               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    )               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    }               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    :               reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! -               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! *               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! /               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! ^               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! >               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! <               [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LOGAND          [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LOGOR           [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 83 (bin_expr -> bin_expr ADDEQ bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 151

    (84) bin_expr -> bin_expr SUBEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    ADDEQ           reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    SUBEQ           reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    MULTEQ          reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    DIVEQ           reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    MODEQ           reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    ?               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    ]               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    ,               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    ;               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    )               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    }               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    :               reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! -               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! *               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! /               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! ^               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! >               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! <               [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LOGAND          [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LOGOR           [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 84 (bin_expr -> bin_expr SUBEQ bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 152

    (85) bin_expr -> bin_expr MULTEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    ADDEQ           reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    SUBEQ           reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    MULTEQ          reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    DIVEQ           reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    MODEQ           reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    ?               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    ]               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    ,               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    ;               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    )               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    }               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    :               reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! -               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! *               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! /               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! ^               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! >               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! <               [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LOGAND          [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LOGOR           [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 85 (bin_expr -> bin_expr MULTEQ bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 153

    (86) bin_expr -> bin_expr DIVEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    ADDEQ           reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    SUBEQ           reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    MULTEQ          reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    DIVEQ           reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    MODEQ           reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    ?               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    ]               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    ,               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    ;               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    )               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    }               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    :               reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! -               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! *               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! /               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! ^               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! >               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! <               [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LOGAND          [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LOGOR           [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 86 (bin_expr -> bin_expr DIVEQ bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 154

    (87) bin_expr -> bin_expr MODEQ bin_expr .
    (67) bin_expr -> bin_expr . + bin_expr
    (68) bin_expr -> bin_expr . - bin_expr
    (69) bin_expr -> bin_expr . * bin_expr
    (70) bin_expr -> bin_expr . / bin_expr
    (71) bin_expr -> bin_expr . ^ bin_expr
    (72) bin_expr -> bin_expr . > bin_expr
    (73) bin_expr -> bin_expr . < bin_expr
    (74) bin_expr -> bin_expr . LOGAND bin_expr
    (75) bin_expr -> bin_expr . LOGOR bin_expr
    (76) bin_expr -> bin_expr . LOGEQ bin_expr
    (77) bin_expr -> bin_expr . LOGNEQ bin_expr
    (78) bin_expr -> bin_expr . LEQ bin_expr
    (79) bin_expr -> bin_expr . GEQ bin_expr
    (80) bin_expr -> bin_expr . LSHIFT bin_expr
    (81) bin_expr -> bin_expr . RSHIFT bin_expr
    (82) bin_expr -> bin_expr . = bin_expr
    (83) bin_expr -> bin_expr . ADDEQ bin_expr
    (84) bin_expr -> bin_expr . SUBEQ bin_expr
    (85) bin_expr -> bin_expr . MULTEQ bin_expr
    (86) bin_expr -> bin_expr . DIVEQ bin_expr
    (87) bin_expr -> bin_expr . MODEQ bin_expr

    =               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    ADDEQ           reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    SUBEQ           reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    MULTEQ          reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    DIVEQ           reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    MODEQ           reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    ?               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    ]               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    ,               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    ;               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    )               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    }               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    :               reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    ^               shift and go to state 76
    >               shift and go to state 77
    <               shift and go to state 78
    LOGAND          shift and go to state 79
    LOGOR           shift and go to state 80
    LOGEQ           shift and go to state 81
    LOGNEQ          shift and go to state 82
    LEQ             shift and go to state 83
    GEQ             shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 86

  ! +               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! -               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! *               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! /               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! ^               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! >               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! <               [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LOGAND          [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LOGOR           [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LOGEQ           [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LOGNEQ          [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LEQ             [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! GEQ             [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! LSHIFT          [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! RSHIFT          [ reduce using rule 87 (bin_expr -> bin_expr MODEQ bin_expr .) ]
  ! =               [ shift and go to state 87 ]
  ! ADDEQ           [ shift and go to state 88 ]
  ! SUBEQ           [ shift and go to state 89 ]
  ! MULTEQ          [ shift and go to state 90 ]
  ! DIVEQ           [ shift and go to state 91 ]
  ! MODEQ           [ shift and go to state 92 ]


state 155

    (96) post_unary_expr -> post_unary_expr [ expression . ]

    ]               shift and go to state 181


state 156

    (97) post_unary_expr -> post_unary_expr ( ) .

    [               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    (               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    PLUSPLUS        reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    MINUSMINUS      reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    .               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    RARROW          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    +               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    -               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    *               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    /               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ^               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    >               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    <               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LOGAND          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LOGOR           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LOGEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LOGNEQ          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    GEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    LSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    RSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    =               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ADDEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    SUBEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    MULTEQ          reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    DIVEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    MODEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ?               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ]               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ,               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    ;               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    )               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    }               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)
    :               reduce using rule 97 (post_unary_expr -> post_unary_expr ( ) .)


state 157

    (98) post_unary_expr -> post_unary_expr ( expressions . )

    )               shift and go to state 182


state 158

    (101) post_unary_expr -> post_unary_expr . ID .

    [               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    (               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    PLUSPLUS        reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    MINUSMINUS      reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    .               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    RARROW          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    +               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    -               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    *               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    /               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ^               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    >               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    <               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LOGAND          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LOGOR           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LOGEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LOGNEQ          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LEQ             reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    GEQ             reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    LSHIFT          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    RSHIFT          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    =               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ADDEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    SUBEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    MULTEQ          reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    DIVEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    MODEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ?               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ]               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ,               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    ;               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    )               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    }               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)
    :               reduce using rule 101 (post_unary_expr -> post_unary_expr . ID .)


state 159

    (102) post_unary_expr -> post_unary_expr RARROW ID .

    [               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    (               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    PLUSPLUS        reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    MINUSMINUS      reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    .               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    RARROW          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    +               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    -               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    *               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    /               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ^               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    >               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    <               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGAND          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGOR           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGNEQ          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LEQ             reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    GEQ             reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    LSHIFT          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    RSHIFT          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    =               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ADDEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    SUBEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    MULTEQ          reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    DIVEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    MODEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ?               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ]               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ,               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    ;               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    )               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    }               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)
    :               reduce using rule 102 (post_unary_expr -> post_unary_expr RARROW ID .)


state 160

    (108) element -> ( expression ) .

    [               reduce using rule 108 (element -> ( expression ) .)
    (               reduce using rule 108 (element -> ( expression ) .)
    PLUSPLUS        reduce using rule 108 (element -> ( expression ) .)
    MINUSMINUS      reduce using rule 108 (element -> ( expression ) .)
    .               reduce using rule 108 (element -> ( expression ) .)
    RARROW          reduce using rule 108 (element -> ( expression ) .)
    +               reduce using rule 108 (element -> ( expression ) .)
    -               reduce using rule 108 (element -> ( expression ) .)
    *               reduce using rule 108 (element -> ( expression ) .)
    /               reduce using rule 108 (element -> ( expression ) .)
    ^               reduce using rule 108 (element -> ( expression ) .)
    >               reduce using rule 108 (element -> ( expression ) .)
    <               reduce using rule 108 (element -> ( expression ) .)
    LOGAND          reduce using rule 108 (element -> ( expression ) .)
    LOGOR           reduce using rule 108 (element -> ( expression ) .)
    LOGEQ           reduce using rule 108 (element -> ( expression ) .)
    LOGNEQ          reduce using rule 108 (element -> ( expression ) .)
    LEQ             reduce using rule 108 (element -> ( expression ) .)
    GEQ             reduce using rule 108 (element -> ( expression ) .)
    LSHIFT          reduce using rule 108 (element -> ( expression ) .)
    RSHIFT          reduce using rule 108 (element -> ( expression ) .)
    =               reduce using rule 108 (element -> ( expression ) .)
    ADDEQ           reduce using rule 108 (element -> ( expression ) .)
    SUBEQ           reduce using rule 108 (element -> ( expression ) .)
    MULTEQ          reduce using rule 108 (element -> ( expression ) .)
    DIVEQ           reduce using rule 108 (element -> ( expression ) .)
    MODEQ           reduce using rule 108 (element -> ( expression ) .)
    ?               reduce using rule 108 (element -> ( expression ) .)
    ]               reduce using rule 108 (element -> ( expression ) .)
    ,               reduce using rule 108 (element -> ( expression ) .)
    ;               reduce using rule 108 (element -> ( expression ) .)
    )               reduce using rule 108 (element -> ( expression ) .)
    }               reduce using rule 108 (element -> ( expression ) .)
    :               reduce using rule 108 (element -> ( expression ) .)


state 161

    (21) initializer -> { expressions } .

    ,               reduce using rule 21 (initializer -> { expressions } .)
    ;               reduce using rule 21 (initializer -> { expressions } .)


state 162

    (62) expressions -> expression , . expressions
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 107
    expressions                    shift and go to state 183
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 163

    (23) new_type_dec -> new_type ID { new_type_params } declarators .

    ;               reduce using rule 23 (new_type_dec -> new_type ID { new_type_params } declarators .)


state 164

    (29) new_type_param -> type declarators ; .

    VOID            reduce using rule 29 (new_type_param -> type declarators ; .)
    CHAR            reduce using rule 29 (new_type_param -> type declarators ; .)
    SHORT           reduce using rule 29 (new_type_param -> type declarators ; .)
    INT             reduce using rule 29 (new_type_param -> type declarators ; .)
    LONG            reduce using rule 29 (new_type_param -> type declarators ; .)
    FLOAT           reduce using rule 29 (new_type_param -> type declarators ; .)
    DOUBLE          reduce using rule 29 (new_type_param -> type declarators ; .)
    }               reduce using rule 29 (new_type_param -> type declarators ; .)


state 165

    (30) func_def -> type ID ( params ) { statements . }

    }               shift and go to state 184


state 166

    (32) func_def -> type ID ( params ) { } .

    INCLUDE         reduce using rule 32 (func_def -> type ID ( params ) { } .)
    ;               reduce using rule 32 (func_def -> type ID ( params ) { } .)
    VOID            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CHAR            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    SHORT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    INT             reduce using rule 32 (func_def -> type ID ( params ) { } .)
    LONG            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    FLOAT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    DOUBLE          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    STRUCT          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CLASS           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    $end            reduce using rule 32 (func_def -> type ID ( params ) { } .)


state 167

    (48) block -> { stats_or_null . }

    }               shift and go to state 185


state 168

    (49) stats_or_null -> statements .

    }               reduce using rule 49 (stats_or_null -> statements .)


state 169

    (50) stats_or_null -> empty .

    }               reduce using rule 50 (stats_or_null -> empty .)


state 170

    (31) func_def -> type ID ( ) { statements } .

    INCLUDE         reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    ;               reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    VOID            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CHAR            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    SHORT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    INT             reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    LONG            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    FLOAT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    DOUBLE          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    STRUCT          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CLASS           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    $end            reduce using rule 31 (func_def -> type ID ( ) { statements } .)


state 171

    (37) statements -> statement statements .

    }               reduce using rule 37 (statements -> statement statements .)


state 172

    (39) statement -> expression ; .

    ;               reduce using rule 39 (statement -> expression ; .)
    {               reduce using rule 39 (statement -> expression ; .)
    IF              reduce using rule 39 (statement -> expression ; .)
    WHILE           reduce using rule 39 (statement -> expression ; .)
    DO              reduce using rule 39 (statement -> expression ; .)
    FOR             reduce using rule 39 (statement -> expression ; .)
    BREAK           reduce using rule 39 (statement -> expression ; .)
    CONTINUE        reduce using rule 39 (statement -> expression ; .)
    RETURN          reduce using rule 39 (statement -> expression ; .)
    VOID            reduce using rule 39 (statement -> expression ; .)
    CHAR            reduce using rule 39 (statement -> expression ; .)
    SHORT           reduce using rule 39 (statement -> expression ; .)
    INT             reduce using rule 39 (statement -> expression ; .)
    LONG            reduce using rule 39 (statement -> expression ; .)
    FLOAT           reduce using rule 39 (statement -> expression ; .)
    DOUBLE          reduce using rule 39 (statement -> expression ; .)
    STRUCT          reduce using rule 39 (statement -> expression ; .)
    CLASS           reduce using rule 39 (statement -> expression ; .)
    PLUSPLUS        reduce using rule 39 (statement -> expression ; .)
    MINUSMINUS      reduce using rule 39 (statement -> expression ; .)
    +               reduce using rule 39 (statement -> expression ; .)
    -               reduce using rule 39 (statement -> expression ; .)
    !               reduce using rule 39 (statement -> expression ; .)
    &               reduce using rule 39 (statement -> expression ; .)
    ID              reduce using rule 39 (statement -> expression ; .)
    NUMBER          reduce using rule 39 (statement -> expression ; .)
    CHR             reduce using rule 39 (statement -> expression ; .)
    STR             reduce using rule 39 (statement -> expression ; .)
    (               reduce using rule 39 (statement -> expression ; .)
    }               reduce using rule 39 (statement -> expression ; .)
    ELSE            reduce using rule 39 (statement -> expression ; .)


state 173

    (40) statement -> decl ; .

    ;               reduce using rule 40 (statement -> decl ; .)
    {               reduce using rule 40 (statement -> decl ; .)
    IF              reduce using rule 40 (statement -> decl ; .)
    WHILE           reduce using rule 40 (statement -> decl ; .)
    DO              reduce using rule 40 (statement -> decl ; .)
    FOR             reduce using rule 40 (statement -> decl ; .)
    BREAK           reduce using rule 40 (statement -> decl ; .)
    CONTINUE        reduce using rule 40 (statement -> decl ; .)
    RETURN          reduce using rule 40 (statement -> decl ; .)
    VOID            reduce using rule 40 (statement -> decl ; .)
    CHAR            reduce using rule 40 (statement -> decl ; .)
    SHORT           reduce using rule 40 (statement -> decl ; .)
    INT             reduce using rule 40 (statement -> decl ; .)
    LONG            reduce using rule 40 (statement -> decl ; .)
    FLOAT           reduce using rule 40 (statement -> decl ; .)
    DOUBLE          reduce using rule 40 (statement -> decl ; .)
    STRUCT          reduce using rule 40 (statement -> decl ; .)
    CLASS           reduce using rule 40 (statement -> decl ; .)
    PLUSPLUS        reduce using rule 40 (statement -> decl ; .)
    MINUSMINUS      reduce using rule 40 (statement -> decl ; .)
    +               reduce using rule 40 (statement -> decl ; .)
    -               reduce using rule 40 (statement -> decl ; .)
    !               reduce using rule 40 (statement -> decl ; .)
    &               reduce using rule 40 (statement -> decl ; .)
    ID              reduce using rule 40 (statement -> decl ; .)
    NUMBER          reduce using rule 40 (statement -> decl ; .)
    CHR             reduce using rule 40 (statement -> decl ; .)
    STR             reduce using rule 40 (statement -> decl ; .)
    (               reduce using rule 40 (statement -> decl ; .)
    }               reduce using rule 40 (statement -> decl ; .)
    ELSE            reduce using rule 40 (statement -> decl ; .)


state 174

    (44) statement -> jump ; .

    ;               reduce using rule 44 (statement -> jump ; .)
    {               reduce using rule 44 (statement -> jump ; .)
    IF              reduce using rule 44 (statement -> jump ; .)
    WHILE           reduce using rule 44 (statement -> jump ; .)
    DO              reduce using rule 44 (statement -> jump ; .)
    FOR             reduce using rule 44 (statement -> jump ; .)
    BREAK           reduce using rule 44 (statement -> jump ; .)
    CONTINUE        reduce using rule 44 (statement -> jump ; .)
    RETURN          reduce using rule 44 (statement -> jump ; .)
    VOID            reduce using rule 44 (statement -> jump ; .)
    CHAR            reduce using rule 44 (statement -> jump ; .)
    SHORT           reduce using rule 44 (statement -> jump ; .)
    INT             reduce using rule 44 (statement -> jump ; .)
    LONG            reduce using rule 44 (statement -> jump ; .)
    FLOAT           reduce using rule 44 (statement -> jump ; .)
    DOUBLE          reduce using rule 44 (statement -> jump ; .)
    STRUCT          reduce using rule 44 (statement -> jump ; .)
    CLASS           reduce using rule 44 (statement -> jump ; .)
    PLUSPLUS        reduce using rule 44 (statement -> jump ; .)
    MINUSMINUS      reduce using rule 44 (statement -> jump ; .)
    +               reduce using rule 44 (statement -> jump ; .)
    -               reduce using rule 44 (statement -> jump ; .)
    !               reduce using rule 44 (statement -> jump ; .)
    &               reduce using rule 44 (statement -> jump ; .)
    ID              reduce using rule 44 (statement -> jump ; .)
    NUMBER          reduce using rule 44 (statement -> jump ; .)
    CHR             reduce using rule 44 (statement -> jump ; .)
    STR             reduce using rule 44 (statement -> jump ; .)
    (               reduce using rule 44 (statement -> jump ; .)
    }               reduce using rule 44 (statement -> jump ; .)
    ELSE            reduce using rule 44 (statement -> jump ; .)


state 175

    (46) conditional -> IF ( . expression ) statement
    (47) conditional -> IF ( . expression ) statement ELSE statement
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 186
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 176

    (51) iteration -> WHILE ( . expression ) statement
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 187
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 177

    (52) iteration -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 188


state 178

    (53) iteration -> FOR ( . expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (56) expr_or_null_or_init -> . expr_or_null
    (57) expr_or_null_or_init -> . usual_dec
    (54) expr_or_null -> . expressions
    (55) expr_or_null -> . empty
    (11) usual_dec -> . type declarators
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (116) empty -> .
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               reduce using rule 116 (empty -> .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expr_or_null_or_init           shift and go to state 189
    expr_or_null                   shift and go to state 190
    usual_dec                      shift and go to state 191
    expressions                    shift and go to state 192
    empty                          shift and go to state 193
    type                           shift and go to state 113
    expression                     shift and go to state 107
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 179

    (61) jump -> RETURN expression .

    ;               reduce using rule 61 (jump -> RETURN expression .)


state 180

    (65) tern_expr -> tern_expr ? tern_expr : . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    tern_expr                      shift and go to state 194
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 181

    (96) post_unary_expr -> post_unary_expr [ expression ] .

    [               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    (               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    PLUSPLUS        reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    MINUSMINUS      reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    .               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    RARROW          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    +               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    -               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    *               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    /               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ^               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    >               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    <               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGAND          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGOR           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGNEQ          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LEQ             reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    GEQ             reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    LSHIFT          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    RSHIFT          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    =               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ADDEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    SUBEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    MULTEQ          reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    DIVEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    MODEQ           reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ?               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ]               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ,               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    ;               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    )               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    }               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)
    :               reduce using rule 96 (post_unary_expr -> post_unary_expr [ expression ] .)


state 182

    (98) post_unary_expr -> post_unary_expr ( expressions ) .

    [               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    (               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    PLUSPLUS        reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MINUSMINUS      reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    .               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RARROW          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    +               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    -               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    *               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    /               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ^               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    >               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    <               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGAND          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGOR           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGNEQ          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    GEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    =               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ADDEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    SUBEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MULTEQ          reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    DIVEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MODEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ?               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ]               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ,               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ;               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    )               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    }               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)
    :               reduce using rule 98 (post_unary_expr -> post_unary_expr ( expressions ) .)


state 183

    (62) expressions -> expression , expressions .

    }               reduce using rule 62 (expressions -> expression , expressions .)
    )               reduce using rule 62 (expressions -> expression , expressions .)
    ;               reduce using rule 62 (expressions -> expression , expressions .)


state 184

    (30) func_def -> type ID ( params ) { statements } .

    INCLUDE         reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    ;               reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    VOID            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CHAR            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    SHORT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    INT             reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    LONG            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    FLOAT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    DOUBLE          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    STRUCT          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CLASS           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    $end            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)


state 185

    (48) block -> { stats_or_null } .

    ;               reduce using rule 48 (block -> { stats_or_null } .)
    {               reduce using rule 48 (block -> { stats_or_null } .)
    IF              reduce using rule 48 (block -> { stats_or_null } .)
    WHILE           reduce using rule 48 (block -> { stats_or_null } .)
    DO              reduce using rule 48 (block -> { stats_or_null } .)
    FOR             reduce using rule 48 (block -> { stats_or_null } .)
    BREAK           reduce using rule 48 (block -> { stats_or_null } .)
    CONTINUE        reduce using rule 48 (block -> { stats_or_null } .)
    RETURN          reduce using rule 48 (block -> { stats_or_null } .)
    VOID            reduce using rule 48 (block -> { stats_or_null } .)
    CHAR            reduce using rule 48 (block -> { stats_or_null } .)
    SHORT           reduce using rule 48 (block -> { stats_or_null } .)
    INT             reduce using rule 48 (block -> { stats_or_null } .)
    LONG            reduce using rule 48 (block -> { stats_or_null } .)
    FLOAT           reduce using rule 48 (block -> { stats_or_null } .)
    DOUBLE          reduce using rule 48 (block -> { stats_or_null } .)
    STRUCT          reduce using rule 48 (block -> { stats_or_null } .)
    CLASS           reduce using rule 48 (block -> { stats_or_null } .)
    PLUSPLUS        reduce using rule 48 (block -> { stats_or_null } .)
    MINUSMINUS      reduce using rule 48 (block -> { stats_or_null } .)
    +               reduce using rule 48 (block -> { stats_or_null } .)
    -               reduce using rule 48 (block -> { stats_or_null } .)
    !               reduce using rule 48 (block -> { stats_or_null } .)
    &               reduce using rule 48 (block -> { stats_or_null } .)
    ID              reduce using rule 48 (block -> { stats_or_null } .)
    NUMBER          reduce using rule 48 (block -> { stats_or_null } .)
    CHR             reduce using rule 48 (block -> { stats_or_null } .)
    STR             reduce using rule 48 (block -> { stats_or_null } .)
    (               reduce using rule 48 (block -> { stats_or_null } .)
    }               reduce using rule 48 (block -> { stats_or_null } .)
    ELSE            reduce using rule 48 (block -> { stats_or_null } .)


state 186

    (46) conditional -> IF ( expression . ) statement
    (47) conditional -> IF ( expression . ) statement ELSE statement

    )               shift and go to state 195


state 187

    (51) iteration -> WHILE ( expression . ) statement

    )               shift and go to state 196


state 188

    (52) iteration -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 197


state 189

    (53) iteration -> FOR ( expr_or_null_or_init . ; expr_or_null ; expr_or_null ) statement

    ;               shift and go to state 198


state 190

    (56) expr_or_null_or_init -> expr_or_null .

    ;               reduce using rule 56 (expr_or_null_or_init -> expr_or_null .)


state 191

    (57) expr_or_null_or_init -> usual_dec .

    ;               reduce using rule 57 (expr_or_null_or_init -> usual_dec .)


state 192

    (54) expr_or_null -> expressions .

    ;               reduce using rule 54 (expr_or_null -> expressions .)
    )               reduce using rule 54 (expr_or_null -> expressions .)


state 193

    (55) expr_or_null -> empty .

    ;               reduce using rule 55 (expr_or_null -> empty .)
    )               reduce using rule 55 (expr_or_null -> empty .)


state 194

    (65) tern_expr -> tern_expr ? tern_expr : tern_expr .
    (65) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ?               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ]               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ,               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ;               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    )               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    }               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    :               reduce using rule 65 (tern_expr -> tern_expr ? tern_expr : tern_expr .)

  ! ?               [ shift and go to state 71 ]


state 195

    (46) conditional -> IF ( expression ) . statement
    (47) conditional -> IF ( expression ) . statement ELSE statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 118
    statement                      shift and go to state 199
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 196

    (51) iteration -> WHILE ( expression ) . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 118
    statement                      shift and go to state 200
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 197

    (52) iteration -> DO statement WHILE ( . expression ) ;
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 201
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 198

    (53) iteration -> FOR ( expr_or_null_or_init ; . expr_or_null ; expr_or_null ) statement
    (54) expr_or_null -> . expressions
    (55) expr_or_null -> . empty
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (116) empty -> .
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               reduce using rule 116 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expr_or_null                   shift and go to state 202
    expressions                    shift and go to state 192
    empty                          shift and go to state 193
    expression                     shift and go to state 107
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 199

    (46) conditional -> IF ( expression ) statement .
    (47) conditional -> IF ( expression ) statement . ELSE statement

    ;               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    {               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    IF              reduce using rule 46 (conditional -> IF ( expression ) statement .)
    WHILE           reduce using rule 46 (conditional -> IF ( expression ) statement .)
    DO              reduce using rule 46 (conditional -> IF ( expression ) statement .)
    FOR             reduce using rule 46 (conditional -> IF ( expression ) statement .)
    BREAK           reduce using rule 46 (conditional -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 46 (conditional -> IF ( expression ) statement .)
    RETURN          reduce using rule 46 (conditional -> IF ( expression ) statement .)
    VOID            reduce using rule 46 (conditional -> IF ( expression ) statement .)
    CHAR            reduce using rule 46 (conditional -> IF ( expression ) statement .)
    SHORT           reduce using rule 46 (conditional -> IF ( expression ) statement .)
    INT             reduce using rule 46 (conditional -> IF ( expression ) statement .)
    LONG            reduce using rule 46 (conditional -> IF ( expression ) statement .)
    FLOAT           reduce using rule 46 (conditional -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 46 (conditional -> IF ( expression ) statement .)
    STRUCT          reduce using rule 46 (conditional -> IF ( expression ) statement .)
    CLASS           reduce using rule 46 (conditional -> IF ( expression ) statement .)
    PLUSPLUS        reduce using rule 46 (conditional -> IF ( expression ) statement .)
    MINUSMINUS      reduce using rule 46 (conditional -> IF ( expression ) statement .)
    +               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    -               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    !               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    &               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    ID              reduce using rule 46 (conditional -> IF ( expression ) statement .)
    NUMBER          reduce using rule 46 (conditional -> IF ( expression ) statement .)
    CHR             reduce using rule 46 (conditional -> IF ( expression ) statement .)
    STR             reduce using rule 46 (conditional -> IF ( expression ) statement .)
    (               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    }               reduce using rule 46 (conditional -> IF ( expression ) statement .)
    ELSE            shift and go to state 203

  ! ELSE            [ reduce using rule 46 (conditional -> IF ( expression ) statement .) ]


state 200

    (51) iteration -> WHILE ( expression ) statement .

    ;               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    {               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    IF              reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    DO              reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    FOR             reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    VOID            reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    INT             reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    LONG            reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    CLASS           reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    PLUSPLUS        reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    MINUSMINUS      reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    +               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    -               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    !               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    &               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    ID              reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    NUMBER          reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    CHR             reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    STR             reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    (               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    }               reduce using rule 51 (iteration -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 51 (iteration -> WHILE ( expression ) statement .)


state 201

    (52) iteration -> DO statement WHILE ( expression . ) ;

    )               shift and go to state 204


state 202

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null . ; expr_or_null ) statement

    ;               shift and go to state 205


state 203

    (47) conditional -> IF ( expression ) statement ELSE . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expression                     shift and go to state 118
    statement                      shift and go to state 206
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 204

    (52) iteration -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 207


state 205

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; . expr_or_null ) statement
    (54) expr_or_null -> . expressions
    (55) expr_or_null -> . empty
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (116) empty -> .
    (64) expression -> . tern_expr
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    )               reduce using rule 116 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    expr_or_null                   shift and go to state 208
    expressions                    shift and go to state 192
    empty                          shift and go to state 193
    expression                     shift and go to state 107
    tern_expr                      shift and go to state 43
    bin_expr                       shift and go to state 44
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 206

    (47) conditional -> IF ( expression ) statement ELSE statement .

    ;               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    CLASS           reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    PLUSPLUS        reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    MINUSMINUS      reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    NUMBER          reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    CHR             reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    STR             reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 47 (conditional -> IF ( expression ) statement ELSE statement .)


state 207

    (52) iteration -> DO statement WHILE ( expression ) ; .

    ;               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    CLASS           reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    ID              reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    NUMBER          reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    CHR             reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    STR             reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    }               reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 52 (iteration -> DO statement WHILE ( expression ) ; .)


state 208

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null . ) statement

    )               shift and go to state 209


state 209

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . block
    (42) statement -> . conditional
    (43) statement -> . iteration
    (44) statement -> . jump ;
    (45) statement -> . ;
    (64) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (48) block -> . { stats_or_null }
    (46) conditional -> . IF ( expression ) statement
    (47) conditional -> . IF ( expression ) statement ELSE statement
    (51) iteration -> . WHILE ( expression ) statement
    (52) iteration -> . DO statement WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (65) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (66) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (67) bin_expr -> . bin_expr + bin_expr
    (68) bin_expr -> . bin_expr - bin_expr
    (69) bin_expr -> . bin_expr * bin_expr
    (70) bin_expr -> . bin_expr / bin_expr
    (71) bin_expr -> . bin_expr ^ bin_expr
    (72) bin_expr -> . bin_expr > bin_expr
    (73) bin_expr -> . bin_expr < bin_expr
    (74) bin_expr -> . bin_expr LOGAND bin_expr
    (75) bin_expr -> . bin_expr LOGOR bin_expr
    (76) bin_expr -> . bin_expr LOGEQ bin_expr
    (77) bin_expr -> . bin_expr LOGNEQ bin_expr
    (78) bin_expr -> . bin_expr LEQ bin_expr
    (79) bin_expr -> . bin_expr GEQ bin_expr
    (80) bin_expr -> . bin_expr LSHIFT bin_expr
    (81) bin_expr -> . bin_expr RSHIFT bin_expr
    (82) bin_expr -> . bin_expr = bin_expr
    (83) bin_expr -> . bin_expr ADDEQ bin_expr
    (84) bin_expr -> . bin_expr SUBEQ bin_expr
    (85) bin_expr -> . bin_expr MULTEQ bin_expr
    (86) bin_expr -> . bin_expr DIVEQ bin_expr
    (87) bin_expr -> . bin_expr MODEQ bin_expr
    (88) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (89) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (90) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (91) pre_unary_expr -> . + pre_unary_expr
    (92) pre_unary_expr -> . - pre_unary_expr
    (93) pre_unary_expr -> . ! pre_unary_expr
    (94) pre_unary_expr -> . & pre_unary_expr
    (95) pre_unary_expr -> . post_unary_expr
    (96) post_unary_expr -> . post_unary_expr [ expression ]
    (97) post_unary_expr -> . post_unary_expr ( )
    (98) post_unary_expr -> . post_unary_expr ( expressions )
    (99) post_unary_expr -> . post_unary_expr PLUSPLUS
    (100) post_unary_expr -> . post_unary_expr MINUSMINUS
    (101) post_unary_expr -> . post_unary_expr . ID
    (102) post_unary_expr -> . post_unary_expr RARROW ID
    (103) post_unary_expr -> . element
    (104) element -> . ID
    (105) element -> . NUMBER
    (106) element -> . CHR
    (107) element -> . STR
    (108) element -> . ( expression )

    ;               shift and go to state 119
    {               shift and go to state 114
    IF              shift and go to state 125
    WHILE           shift and go to state 126
    DO              shift and go to state 127
    FOR             shift and go to state 128
    BREAK           shift and go to state 129
    CONTINUE        shift and go to state 130
    RETURN          shift and go to state 131
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    +               shift and go to state 45
    -               shift and go to state 46
    !               shift and go to state 50
    &               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 55
    CHR             shift and go to state 56
    STR             shift and go to state 57
    (               shift and go to state 53

    statement                      shift and go to state 210
    expression                     shift and go to state 118
    decl                           shift and go to state 120
    block                          shift and go to state 121
    conditional                    shift and go to state 122
    iteration                      shift and go to state 123
    jump                           shift and go to state 124
    tern_expr                      shift and go to state 43
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 44
    type                           shift and go to state 113
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 47
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 54

state 210

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .

    ;               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    {               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    IF              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    WHILE           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    DO              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    FOR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    BREAK           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    CONTINUE        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    RETURN          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    VOID            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    CHAR            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    SHORT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    INT             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    LONG            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    FLOAT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    DOUBLE          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    STRUCT          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    CLASS           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    PLUSPLUS        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    MINUSMINUS      reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    +               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    -               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    !               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    &               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    ID              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    NUMBER          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    CHR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    STR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    (               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    }               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)
    ELSE            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) statement .)

