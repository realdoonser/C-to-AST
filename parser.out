Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> include program
Rule 2     program -> external_decl program
Rule 3     program -> include
Rule 4     program -> external_decl
Rule 5     include -> INCLUDE
Rule 6     external_decl -> decl ;
Rule 7     external_decl -> func_def
Rule 8     external_decl -> ;
Rule 9     decl -> usual_dec
Rule 10    decl -> new_type_dec
Rule 11    usual_dec -> type declarators
Rule 12    declarators -> declarator_1 , declarators
Rule 13    declarators -> declarator_1
Rule 14    declarator_1 -> declarator_2
Rule 15    declarator_1 -> declarator_2 = initializer
Rule 16    declarator_2 -> ID
Rule 17    declarator_2 -> ID ( )
Rule 18    declarator_2 -> ID [ ]
Rule 19    declarator_2 -> ID [ expression ]
Rule 20    initializer -> expression
Rule 21    initializer -> { expressions }
Rule 22    new_type_dec -> new_type ID { new_type_params }
Rule 23    new_type_dec -> new_type ID { new_type_params } declarators
Rule 24    new_type_dec -> new_type ID declarators
Rule 25    new_type -> STRUCT
Rule 26    new_type -> CLASS
Rule 27    new_type_params -> new_type_param new_type_params
Rule 28    new_type_params -> new_type_param
Rule 29    new_type_param -> type declarators ;
Rule 30    func_def -> type ID ( params ) { statements }
Rule 31    func_def -> type ID ( ) { statements }
Rule 32    func_def -> type ID ( params ) { }
Rule 33    func_def -> type ID ( ) { }
Rule 34    params -> param , params
Rule 35    params -> param
Rule 36    param -> type declarator_2
Rule 37    statements -> statement statements
Rule 38    statements -> statement
Rule 39    statement -> expression ;
Rule 40    statement -> decl ;
Rule 41    statement -> conditional
Rule 42    statement -> iteration
Rule 43    statement -> jump ;
Rule 44    statement -> ;
Rule 45    conditional -> IF ( expression ) { stats_or_null }
Rule 46    conditional -> IF ( expression ) { stats_or_null } ELSE conditional
Rule 47    conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }
Rule 48    statement -> { stats_or_null }
Rule 49    stats_or_null -> statements
Rule 50    stats_or_null -> empty
Rule 51    iteration -> WHILE ( expression ) { stats_or_null }
Rule 52    iteration -> DO { stats_or_null } WHILE ( expression ) ;
Rule 53    iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
Rule 54    expr_or_null -> expression
Rule 55    expr_or_null -> empty
Rule 56    expr_or_null_or_init -> expr_or_null
Rule 57    expr_or_null_or_init -> usual_dec
Rule 58    jump -> BREAK
Rule 59    jump -> CONTINUE
Rule 60    jump -> RETURN
Rule 61    jump -> RETURN expression
Rule 62    expressions -> expression , expressions
Rule 63    expressions -> expression
Rule 64    expression -> expression = expression
Rule 65    expression -> expression ADDEQ expression
Rule 66    expression -> expression SUBEQ expression
Rule 67    expression -> expression MULTEQ expression
Rule 68    expression -> expression DIVEQ expression
Rule 69    expression -> expression MODEQ expression
Rule 70    expression -> ( expression )
Rule 71    expression -> tern_expr
Rule 72    tern_expr -> tern_expr ? tern_expr : tern_expr
Rule 73    tern_expr -> bin_expr
Rule 74    bin_expr -> pre_unary_expr bin_op bin_expr
Rule 75    bin_expr -> pre_unary_expr
Rule 76    bin_op -> +
Rule 77    bin_op -> -
Rule 78    bin_op -> *
Rule 79    bin_op -> /
Rule 80    bin_op -> LOGAND
Rule 81    bin_op -> LOGOR
Rule 82    bin_op -> LOGEQ
Rule 83    bin_op -> LOGNEQ
Rule 84    bin_op -> LSHIFT
Rule 85    bin_op -> RSHIFT
Rule 86    bin_op -> <
Rule 87    bin_op -> >
Rule 88    bin_op -> LEQ
Rule 89    bin_op -> GEQ
Rule 90    bin_op -> ^
Rule 91    pre_unary_expr -> PLUSPLUS pre_unary_expr
Rule 92    pre_unary_expr -> MINUSMINUS pre_unary_expr
Rule 93    pre_unary_expr -> + pre_unary_expr
Rule 94    pre_unary_expr -> - pre_unary_expr
Rule 95    pre_unary_expr -> ! pre_unary_expr
Rule 96    pre_unary_expr -> post_unary_expr
Rule 97    post_unary_expr -> post_unary_expr [ expression ]
Rule 98    post_unary_expr -> post_unary_expr ( )
Rule 99    post_unary_expr -> post_unary_expr ( expressions )
Rule 100   post_unary_expr -> post_unary_expr PLUSPLUS
Rule 101   post_unary_expr -> post_unary_expr MINUSMINUS
Rule 102   post_unary_expr -> post_unary_expr . ID
Rule 103   post_unary_expr -> post_unary_expr RARROW ID
Rule 104   post_unary_expr -> element
Rule 105   element -> ID
Rule 106   element -> NUMBER
Rule 107   element -> CHR
Rule 108   element -> STR
Rule 109   type -> VOID
Rule 110   type -> CHAR
Rule 111   type -> SHORT
Rule 112   type -> INT
Rule 113   type -> LONG
Rule 114   type -> FLOAT
Rule 115   type -> DOUBLE
Rule 116   empty -> <empty>

Terminals, with rules where they appear

!                    : 95
(                    : 17 30 31 32 33 45 46 47 51 52 53 70 98 99
)                    : 17 30 31 32 33 45 46 47 51 52 53 70 98 99
*                    : 78
+                    : 76 93
,                    : 12 34 62
-                    : 77 94
.                    : 102
/                    : 79
:                    : 72
;                    : 6 8 29 39 40 43 44 52 53 53
<                    : 86
=                    : 15 64
>                    : 87
?                    : 72
ADDEQ                : 65
BREAK                : 58
CHAR                 : 110
CHR                  : 107
CLASS                : 26
CONTINUE             : 59
DIVEQ                : 68
DO                   : 52
DOUBLE               : 115
ELSE                 : 46 47
FLOAT                : 114
FOR                  : 53
GEQ                  : 89
ID                   : 16 17 18 19 22 23 24 30 31 32 33 102 103 105
IF                   : 45 46 47
INCLUDE              : 5
INT                  : 112
LEQ                  : 88
LOGAND               : 80
LOGEQ                : 82
LOGNEQ               : 83
LOGOR                : 81
LONG                 : 113
LSHIFT               : 84
MINUSMINUS           : 92 101
MODEQ                : 69
MULTEQ               : 67
NUMBER               : 106
PLUSPLUS             : 91 100
RARROW               : 103
RETURN               : 60 61
RSHIFT               : 85
SHORT                : 111
STR                  : 108
STRUCT               : 25
SUBEQ                : 66
VOID                 : 109
WHILE                : 51 52
[                    : 18 19 97
]                    : 18 19 97
^                    : 90
error                : 
{                    : 21 22 23 30 31 32 33 45 46 47 47 48 51 52 53
}                    : 21 22 23 30 31 32 33 45 46 47 47 48 51 52 53

Nonterminals, with rules where they appear

bin_expr             : 73 74
bin_op               : 74
conditional          : 41 46
decl                 : 6 40
declarator_1         : 12 13
declarator_2         : 14 15 36
declarators          : 11 12 23 24 29
element              : 104
empty                : 50 55
expr_or_null         : 53 53 56
expr_or_null_or_init : 53
expression           : 19 20 39 45 46 47 51 52 54 61 62 63 64 64 65 65 66 66 67 67 68 68 69 69 70 97
expressions          : 21 62 99
external_decl        : 2 4
func_def             : 7
include              : 1 3
initializer          : 15
iteration            : 42
jump                 : 43
new_type             : 22 23 24
new_type_dec         : 10
new_type_param       : 27 28
new_type_params      : 22 23 27
param                : 34 35
params               : 30 32 34
post_unary_expr      : 96 97 98 99 100 101 102 103
pre_unary_expr       : 74 75 91 92 93 94 95
program              : 1 2 0
statement            : 37 38
statements           : 30 31 37 49
stats_or_null        : 45 46 47 47 48 51 52 53
tern_expr            : 71 72 72 72
type                 : 11 29 30 31 32 33 36
usual_dec            : 9 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    program                        shift and go to state 1
    include                        shift and go to state 2
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> include . program
    (3) program -> include .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 3 (program -> include .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    include                        shift and go to state 2
    program                        shift and go to state 21
    external_decl                  shift and go to state 3
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 3

    (2) program -> external_decl . program
    (4) program -> external_decl .
    (1) program -> . include program
    (2) program -> . external_decl program
    (3) program -> . include
    (4) program -> . external_decl
    (5) include -> . INCLUDE
    (6) external_decl -> . decl ;
    (7) external_decl -> . func_def
    (8) external_decl -> . ;
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (30) func_def -> . type ID ( params ) { statements }
    (31) func_def -> . type ID ( ) { statements }
    (32) func_def -> . type ID ( params ) { }
    (33) func_def -> . type ID ( ) { }
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS

    $end            reduce using rule 4 (program -> external_decl .)
    INCLUDE         shift and go to state 4
    ;               shift and go to state 6
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20

    external_decl                  shift and go to state 3
    program                        shift and go to state 22
    include                        shift and go to state 2
    decl                           shift and go to state 5
    func_def                       shift and go to state 7
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    type                           shift and go to state 10
    new_type                       shift and go to state 11

state 4

    (5) include -> INCLUDE .

    INCLUDE         reduce using rule 5 (include -> INCLUDE .)
    ;               reduce using rule 5 (include -> INCLUDE .)
    VOID            reduce using rule 5 (include -> INCLUDE .)
    CHAR            reduce using rule 5 (include -> INCLUDE .)
    SHORT           reduce using rule 5 (include -> INCLUDE .)
    INT             reduce using rule 5 (include -> INCLUDE .)
    LONG            reduce using rule 5 (include -> INCLUDE .)
    FLOAT           reduce using rule 5 (include -> INCLUDE .)
    DOUBLE          reduce using rule 5 (include -> INCLUDE .)
    STRUCT          reduce using rule 5 (include -> INCLUDE .)
    CLASS           reduce using rule 5 (include -> INCLUDE .)
    $end            reduce using rule 5 (include -> INCLUDE .)


state 5

    (6) external_decl -> decl . ;

    ;               shift and go to state 23


state 6

    (8) external_decl -> ; .

    INCLUDE         reduce using rule 8 (external_decl -> ; .)
    ;               reduce using rule 8 (external_decl -> ; .)
    VOID            reduce using rule 8 (external_decl -> ; .)
    CHAR            reduce using rule 8 (external_decl -> ; .)
    SHORT           reduce using rule 8 (external_decl -> ; .)
    INT             reduce using rule 8 (external_decl -> ; .)
    LONG            reduce using rule 8 (external_decl -> ; .)
    FLOAT           reduce using rule 8 (external_decl -> ; .)
    DOUBLE          reduce using rule 8 (external_decl -> ; .)
    STRUCT          reduce using rule 8 (external_decl -> ; .)
    CLASS           reduce using rule 8 (external_decl -> ; .)
    $end            reduce using rule 8 (external_decl -> ; .)


state 7

    (7) external_decl -> func_def .

    INCLUDE         reduce using rule 7 (external_decl -> func_def .)
    ;               reduce using rule 7 (external_decl -> func_def .)
    VOID            reduce using rule 7 (external_decl -> func_def .)
    CHAR            reduce using rule 7 (external_decl -> func_def .)
    SHORT           reduce using rule 7 (external_decl -> func_def .)
    INT             reduce using rule 7 (external_decl -> func_def .)
    LONG            reduce using rule 7 (external_decl -> func_def .)
    FLOAT           reduce using rule 7 (external_decl -> func_def .)
    DOUBLE          reduce using rule 7 (external_decl -> func_def .)
    STRUCT          reduce using rule 7 (external_decl -> func_def .)
    CLASS           reduce using rule 7 (external_decl -> func_def .)
    $end            reduce using rule 7 (external_decl -> func_def .)


state 8

    (9) decl -> usual_dec .

    ;               reduce using rule 9 (decl -> usual_dec .)


state 9

    (10) decl -> new_type_dec .

    ;               reduce using rule 10 (decl -> new_type_dec .)


state 10

    (30) func_def -> type . ID ( params ) { statements }
    (31) func_def -> type . ID ( ) { statements }
    (32) func_def -> type . ID ( params ) { }
    (33) func_def -> type . ID ( ) { }
    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 24

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 11

    (22) new_type_dec -> new_type . ID { new_type_params }
    (23) new_type_dec -> new_type . ID { new_type_params } declarators
    (24) new_type_dec -> new_type . ID declarators

    ID              shift and go to state 28


state 12

    (109) type -> VOID .

    ID              reduce using rule 109 (type -> VOID .)


state 13

    (110) type -> CHAR .

    ID              reduce using rule 110 (type -> CHAR .)


state 14

    (111) type -> SHORT .

    ID              reduce using rule 111 (type -> SHORT .)


state 15

    (112) type -> INT .

    ID              reduce using rule 112 (type -> INT .)


state 16

    (113) type -> LONG .

    ID              reduce using rule 113 (type -> LONG .)


state 17

    (114) type -> FLOAT .

    ID              reduce using rule 114 (type -> FLOAT .)


state 18

    (115) type -> DOUBLE .

    ID              reduce using rule 115 (type -> DOUBLE .)


state 19

    (25) new_type -> STRUCT .

    ID              reduce using rule 25 (new_type -> STRUCT .)


state 20

    (26) new_type -> CLASS .

    ID              reduce using rule 26 (new_type -> CLASS .)


state 21

    (1) program -> include program .

    $end            reduce using rule 1 (program -> include program .)


state 22

    (2) program -> external_decl program .

    $end            reduce using rule 2 (program -> external_decl program .)


state 23

    (6) external_decl -> decl ; .

    INCLUDE         reduce using rule 6 (external_decl -> decl ; .)
    ;               reduce using rule 6 (external_decl -> decl ; .)
    VOID            reduce using rule 6 (external_decl -> decl ; .)
    CHAR            reduce using rule 6 (external_decl -> decl ; .)
    SHORT           reduce using rule 6 (external_decl -> decl ; .)
    INT             reduce using rule 6 (external_decl -> decl ; .)
    LONG            reduce using rule 6 (external_decl -> decl ; .)
    FLOAT           reduce using rule 6 (external_decl -> decl ; .)
    DOUBLE          reduce using rule 6 (external_decl -> decl ; .)
    STRUCT          reduce using rule 6 (external_decl -> decl ; .)
    CLASS           reduce using rule 6 (external_decl -> decl ; .)
    $end            reduce using rule 6 (external_decl -> decl ; .)


state 24

    (30) func_def -> type ID . ( params ) { statements }
    (31) func_def -> type ID . ( ) { statements }
    (32) func_def -> type ID . ( params ) { }
    (33) func_def -> type ID . ( ) { }
    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    (               shift and go to state 29
    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    [               shift and go to state 30


state 25

    (11) usual_dec -> type declarators .

    ;               reduce using rule 11 (usual_dec -> type declarators .)


state 26

    (12) declarators -> declarator_1 . , declarators
    (13) declarators -> declarator_1 .

    ,               shift and go to state 31
    ;               reduce using rule 13 (declarators -> declarator_1 .)


state 27

    (14) declarator_1 -> declarator_2 .
    (15) declarator_1 -> declarator_2 . = initializer

    ,               reduce using rule 14 (declarator_1 -> declarator_2 .)
    ;               reduce using rule 14 (declarator_1 -> declarator_2 .)
    =               shift and go to state 32


state 28

    (22) new_type_dec -> new_type ID . { new_type_params }
    (23) new_type_dec -> new_type ID . { new_type_params } declarators
    (24) new_type_dec -> new_type ID . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    {               shift and go to state 34
    ID              shift and go to state 33

    declarators                    shift and go to state 35
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 29

    (30) func_def -> type ID ( . params ) { statements }
    (31) func_def -> type ID ( . ) { statements }
    (32) func_def -> type ID ( . params ) { }
    (33) func_def -> type ID ( . ) { }
    (17) declarator_2 -> ID ( . )
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    )               shift and go to state 38
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    type                           shift and go to state 36
    params                         shift and go to state 37
    param                          shift and go to state 39

state 30

    (18) declarator_2 -> ID [ . ]
    (19) declarator_2 -> ID [ . expression ]
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    ]               shift and go to state 41
    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 42
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 31

    (12) declarators -> declarator_1 , . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_1                   shift and go to state 26
    declarators                    shift and go to state 57
    declarator_2                   shift and go to state 27

state 32

    (15) declarator_1 -> declarator_2 = . initializer
    (20) initializer -> . expression
    (21) initializer -> . { expressions }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    {               shift and go to state 60
    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    initializer                    shift and go to state 58
    expression                     shift and go to state 59
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 33

    (16) declarator_2 -> ID .
    (17) declarator_2 -> ID . ( )
    (18) declarator_2 -> ID . [ ]
    (19) declarator_2 -> ID . [ expression ]

    =               reduce using rule 16 (declarator_2 -> ID .)
    ,               reduce using rule 16 (declarator_2 -> ID .)
    ;               reduce using rule 16 (declarator_2 -> ID .)
    )               reduce using rule 16 (declarator_2 -> ID .)
    (               shift and go to state 61
    [               shift and go to state 30


state 34

    (22) new_type_dec -> new_type ID { . new_type_params }
    (23) new_type_dec -> new_type ID { . new_type_params } declarators
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_params                shift and go to state 62
    new_type_param                 shift and go to state 63
    type                           shift and go to state 64

state 35

    (24) new_type_dec -> new_type ID declarators .

    ;               reduce using rule 24 (new_type_dec -> new_type ID declarators .)


state 36

    (36) param -> type . declarator_2
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarator_2                   shift and go to state 65

state 37

    (30) func_def -> type ID ( params . ) { statements }
    (32) func_def -> type ID ( params . ) { }

    )               shift and go to state 66


state 38

    (31) func_def -> type ID ( ) . { statements }
    (33) func_def -> type ID ( ) . { }
    (17) declarator_2 -> ID ( ) .

    {               shift and go to state 67
    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 39

    (34) params -> param . , params
    (35) params -> param .

    ,               shift and go to state 68
    )               reduce using rule 35 (params -> param .)


state 40

    (105) element -> ID .

    [               reduce using rule 105 (element -> ID .)
    (               reduce using rule 105 (element -> ID .)
    PLUSPLUS        reduce using rule 105 (element -> ID .)
    MINUSMINUS      reduce using rule 105 (element -> ID .)
    .               reduce using rule 105 (element -> ID .)
    RARROW          reduce using rule 105 (element -> ID .)
    +               reduce using rule 105 (element -> ID .)
    -               reduce using rule 105 (element -> ID .)
    *               reduce using rule 105 (element -> ID .)
    /               reduce using rule 105 (element -> ID .)
    LOGAND          reduce using rule 105 (element -> ID .)
    LOGOR           reduce using rule 105 (element -> ID .)
    LOGEQ           reduce using rule 105 (element -> ID .)
    LOGNEQ          reduce using rule 105 (element -> ID .)
    LSHIFT          reduce using rule 105 (element -> ID .)
    RSHIFT          reduce using rule 105 (element -> ID .)
    <               reduce using rule 105 (element -> ID .)
    >               reduce using rule 105 (element -> ID .)
    LEQ             reduce using rule 105 (element -> ID .)
    GEQ             reduce using rule 105 (element -> ID .)
    ^               reduce using rule 105 (element -> ID .)
    ?               reduce using rule 105 (element -> ID .)
    ]               reduce using rule 105 (element -> ID .)
    =               reduce using rule 105 (element -> ID .)
    ADDEQ           reduce using rule 105 (element -> ID .)
    SUBEQ           reduce using rule 105 (element -> ID .)
    MULTEQ          reduce using rule 105 (element -> ID .)
    DIVEQ           reduce using rule 105 (element -> ID .)
    MODEQ           reduce using rule 105 (element -> ID .)
    ,               reduce using rule 105 (element -> ID .)
    ;               reduce using rule 105 (element -> ID .)
    )               reduce using rule 105 (element -> ID .)
    }               reduce using rule 105 (element -> ID .)
    :               reduce using rule 105 (element -> ID .)


state 41

    (18) declarator_2 -> ID [ ] .

    =               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ,               reduce using rule 18 (declarator_2 -> ID [ ] .)
    ;               reduce using rule 18 (declarator_2 -> ID [ ] .)
    )               reduce using rule 18 (declarator_2 -> ID [ ] .)


state 42

    (19) declarator_2 -> ID [ expression . ]
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               shift and go to state 69
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 43

    (70) expression -> ( . expression )
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 76
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 44

    (71) expression -> tern_expr .
    (72) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ]               reduce using rule 71 (expression -> tern_expr .)
    =               reduce using rule 71 (expression -> tern_expr .)
    ADDEQ           reduce using rule 71 (expression -> tern_expr .)
    SUBEQ           reduce using rule 71 (expression -> tern_expr .)
    MULTEQ          reduce using rule 71 (expression -> tern_expr .)
    DIVEQ           reduce using rule 71 (expression -> tern_expr .)
    MODEQ           reduce using rule 71 (expression -> tern_expr .)
    ,               reduce using rule 71 (expression -> tern_expr .)
    ;               reduce using rule 71 (expression -> tern_expr .)
    )               reduce using rule 71 (expression -> tern_expr .)
    }               reduce using rule 71 (expression -> tern_expr .)
    ?               shift and go to state 77


state 45

    (73) tern_expr -> bin_expr .

    ?               reduce using rule 73 (tern_expr -> bin_expr .)
    ]               reduce using rule 73 (tern_expr -> bin_expr .)
    =               reduce using rule 73 (tern_expr -> bin_expr .)
    ADDEQ           reduce using rule 73 (tern_expr -> bin_expr .)
    SUBEQ           reduce using rule 73 (tern_expr -> bin_expr .)
    MULTEQ          reduce using rule 73 (tern_expr -> bin_expr .)
    DIVEQ           reduce using rule 73 (tern_expr -> bin_expr .)
    MODEQ           reduce using rule 73 (tern_expr -> bin_expr .)
    ,               reduce using rule 73 (tern_expr -> bin_expr .)
    ;               reduce using rule 73 (tern_expr -> bin_expr .)
    )               reduce using rule 73 (tern_expr -> bin_expr .)
    }               reduce using rule 73 (tern_expr -> bin_expr .)
    :               reduce using rule 73 (tern_expr -> bin_expr .)


state 46

    (74) bin_expr -> pre_unary_expr . bin_op bin_expr
    (75) bin_expr -> pre_unary_expr .
    (76) bin_op -> . +
    (77) bin_op -> . -
    (78) bin_op -> . *
    (79) bin_op -> . /
    (80) bin_op -> . LOGAND
    (81) bin_op -> . LOGOR
    (82) bin_op -> . LOGEQ
    (83) bin_op -> . LOGNEQ
    (84) bin_op -> . LSHIFT
    (85) bin_op -> . RSHIFT
    (86) bin_op -> . <
    (87) bin_op -> . >
    (88) bin_op -> . LEQ
    (89) bin_op -> . GEQ
    (90) bin_op -> . ^

    ?               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    ]               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    =               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    ADDEQ           reduce using rule 75 (bin_expr -> pre_unary_expr .)
    SUBEQ           reduce using rule 75 (bin_expr -> pre_unary_expr .)
    MULTEQ          reduce using rule 75 (bin_expr -> pre_unary_expr .)
    DIVEQ           reduce using rule 75 (bin_expr -> pre_unary_expr .)
    MODEQ           reduce using rule 75 (bin_expr -> pre_unary_expr .)
    ,               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    ;               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    )               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    }               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    :               reduce using rule 75 (bin_expr -> pre_unary_expr .)
    +               shift and go to state 79
    -               shift and go to state 80
    *               shift and go to state 81
    /               shift and go to state 82
    LOGAND          shift and go to state 83
    LOGOR           shift and go to state 84
    LOGEQ           shift and go to state 85
    LOGNEQ          shift and go to state 86
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    <               shift and go to state 89
    >               shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92
    ^               shift and go to state 93

    bin_op                         shift and go to state 78

state 47

    (91) pre_unary_expr -> PLUSPLUS . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 94
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 48

    (92) pre_unary_expr -> MINUSMINUS . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 95
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 49

    (93) pre_unary_expr -> + . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 96
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 50

    (94) pre_unary_expr -> - . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 97
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 51

    (95) pre_unary_expr -> ! . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 98
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 52

    (96) pre_unary_expr -> post_unary_expr .
    (97) post_unary_expr -> post_unary_expr . [ expression ]
    (98) post_unary_expr -> post_unary_expr . ( )
    (99) post_unary_expr -> post_unary_expr . ( expressions )
    (100) post_unary_expr -> post_unary_expr . PLUSPLUS
    (101) post_unary_expr -> post_unary_expr . MINUSMINUS
    (102) post_unary_expr -> post_unary_expr . . ID
    (103) post_unary_expr -> post_unary_expr . RARROW ID

    +               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    -               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    *               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    /               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LOGAND          reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LOGOR           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LOGEQ           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LOGNEQ          reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LSHIFT          reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    RSHIFT          reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    <               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    >               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    LEQ             reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    GEQ             reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ^               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ?               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ]               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    =               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ADDEQ           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    SUBEQ           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    MULTEQ          reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    DIVEQ           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    MODEQ           reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ,               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    ;               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    )               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    }               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    :               reduce using rule 96 (pre_unary_expr -> post_unary_expr .)
    [               shift and go to state 99
    (               shift and go to state 100
    PLUSPLUS        shift and go to state 101
    MINUSMINUS      shift and go to state 102
    .               shift and go to state 103
    RARROW          shift and go to state 104


state 53

    (104) post_unary_expr -> element .

    [               reduce using rule 104 (post_unary_expr -> element .)
    (               reduce using rule 104 (post_unary_expr -> element .)
    PLUSPLUS        reduce using rule 104 (post_unary_expr -> element .)
    MINUSMINUS      reduce using rule 104 (post_unary_expr -> element .)
    .               reduce using rule 104 (post_unary_expr -> element .)
    RARROW          reduce using rule 104 (post_unary_expr -> element .)
    +               reduce using rule 104 (post_unary_expr -> element .)
    -               reduce using rule 104 (post_unary_expr -> element .)
    *               reduce using rule 104 (post_unary_expr -> element .)
    /               reduce using rule 104 (post_unary_expr -> element .)
    LOGAND          reduce using rule 104 (post_unary_expr -> element .)
    LOGOR           reduce using rule 104 (post_unary_expr -> element .)
    LOGEQ           reduce using rule 104 (post_unary_expr -> element .)
    LOGNEQ          reduce using rule 104 (post_unary_expr -> element .)
    LSHIFT          reduce using rule 104 (post_unary_expr -> element .)
    RSHIFT          reduce using rule 104 (post_unary_expr -> element .)
    <               reduce using rule 104 (post_unary_expr -> element .)
    >               reduce using rule 104 (post_unary_expr -> element .)
    LEQ             reduce using rule 104 (post_unary_expr -> element .)
    GEQ             reduce using rule 104 (post_unary_expr -> element .)
    ^               reduce using rule 104 (post_unary_expr -> element .)
    ?               reduce using rule 104 (post_unary_expr -> element .)
    ]               reduce using rule 104 (post_unary_expr -> element .)
    =               reduce using rule 104 (post_unary_expr -> element .)
    ADDEQ           reduce using rule 104 (post_unary_expr -> element .)
    SUBEQ           reduce using rule 104 (post_unary_expr -> element .)
    MULTEQ          reduce using rule 104 (post_unary_expr -> element .)
    DIVEQ           reduce using rule 104 (post_unary_expr -> element .)
    MODEQ           reduce using rule 104 (post_unary_expr -> element .)
    ,               reduce using rule 104 (post_unary_expr -> element .)
    ;               reduce using rule 104 (post_unary_expr -> element .)
    )               reduce using rule 104 (post_unary_expr -> element .)
    }               reduce using rule 104 (post_unary_expr -> element .)
    :               reduce using rule 104 (post_unary_expr -> element .)


state 54

    (106) element -> NUMBER .

    [               reduce using rule 106 (element -> NUMBER .)
    (               reduce using rule 106 (element -> NUMBER .)
    PLUSPLUS        reduce using rule 106 (element -> NUMBER .)
    MINUSMINUS      reduce using rule 106 (element -> NUMBER .)
    .               reduce using rule 106 (element -> NUMBER .)
    RARROW          reduce using rule 106 (element -> NUMBER .)
    +               reduce using rule 106 (element -> NUMBER .)
    -               reduce using rule 106 (element -> NUMBER .)
    *               reduce using rule 106 (element -> NUMBER .)
    /               reduce using rule 106 (element -> NUMBER .)
    LOGAND          reduce using rule 106 (element -> NUMBER .)
    LOGOR           reduce using rule 106 (element -> NUMBER .)
    LOGEQ           reduce using rule 106 (element -> NUMBER .)
    LOGNEQ          reduce using rule 106 (element -> NUMBER .)
    LSHIFT          reduce using rule 106 (element -> NUMBER .)
    RSHIFT          reduce using rule 106 (element -> NUMBER .)
    <               reduce using rule 106 (element -> NUMBER .)
    >               reduce using rule 106 (element -> NUMBER .)
    LEQ             reduce using rule 106 (element -> NUMBER .)
    GEQ             reduce using rule 106 (element -> NUMBER .)
    ^               reduce using rule 106 (element -> NUMBER .)
    ?               reduce using rule 106 (element -> NUMBER .)
    ]               reduce using rule 106 (element -> NUMBER .)
    =               reduce using rule 106 (element -> NUMBER .)
    ADDEQ           reduce using rule 106 (element -> NUMBER .)
    SUBEQ           reduce using rule 106 (element -> NUMBER .)
    MULTEQ          reduce using rule 106 (element -> NUMBER .)
    DIVEQ           reduce using rule 106 (element -> NUMBER .)
    MODEQ           reduce using rule 106 (element -> NUMBER .)
    ,               reduce using rule 106 (element -> NUMBER .)
    ;               reduce using rule 106 (element -> NUMBER .)
    )               reduce using rule 106 (element -> NUMBER .)
    }               reduce using rule 106 (element -> NUMBER .)
    :               reduce using rule 106 (element -> NUMBER .)


state 55

    (107) element -> CHR .

    [               reduce using rule 107 (element -> CHR .)
    (               reduce using rule 107 (element -> CHR .)
    PLUSPLUS        reduce using rule 107 (element -> CHR .)
    MINUSMINUS      reduce using rule 107 (element -> CHR .)
    .               reduce using rule 107 (element -> CHR .)
    RARROW          reduce using rule 107 (element -> CHR .)
    +               reduce using rule 107 (element -> CHR .)
    -               reduce using rule 107 (element -> CHR .)
    *               reduce using rule 107 (element -> CHR .)
    /               reduce using rule 107 (element -> CHR .)
    LOGAND          reduce using rule 107 (element -> CHR .)
    LOGOR           reduce using rule 107 (element -> CHR .)
    LOGEQ           reduce using rule 107 (element -> CHR .)
    LOGNEQ          reduce using rule 107 (element -> CHR .)
    LSHIFT          reduce using rule 107 (element -> CHR .)
    RSHIFT          reduce using rule 107 (element -> CHR .)
    <               reduce using rule 107 (element -> CHR .)
    >               reduce using rule 107 (element -> CHR .)
    LEQ             reduce using rule 107 (element -> CHR .)
    GEQ             reduce using rule 107 (element -> CHR .)
    ^               reduce using rule 107 (element -> CHR .)
    ?               reduce using rule 107 (element -> CHR .)
    ]               reduce using rule 107 (element -> CHR .)
    =               reduce using rule 107 (element -> CHR .)
    ADDEQ           reduce using rule 107 (element -> CHR .)
    SUBEQ           reduce using rule 107 (element -> CHR .)
    MULTEQ          reduce using rule 107 (element -> CHR .)
    DIVEQ           reduce using rule 107 (element -> CHR .)
    MODEQ           reduce using rule 107 (element -> CHR .)
    ,               reduce using rule 107 (element -> CHR .)
    ;               reduce using rule 107 (element -> CHR .)
    )               reduce using rule 107 (element -> CHR .)
    }               reduce using rule 107 (element -> CHR .)
    :               reduce using rule 107 (element -> CHR .)


state 56

    (108) element -> STR .

    [               reduce using rule 108 (element -> STR .)
    (               reduce using rule 108 (element -> STR .)
    PLUSPLUS        reduce using rule 108 (element -> STR .)
    MINUSMINUS      reduce using rule 108 (element -> STR .)
    .               reduce using rule 108 (element -> STR .)
    RARROW          reduce using rule 108 (element -> STR .)
    +               reduce using rule 108 (element -> STR .)
    -               reduce using rule 108 (element -> STR .)
    *               reduce using rule 108 (element -> STR .)
    /               reduce using rule 108 (element -> STR .)
    LOGAND          reduce using rule 108 (element -> STR .)
    LOGOR           reduce using rule 108 (element -> STR .)
    LOGEQ           reduce using rule 108 (element -> STR .)
    LOGNEQ          reduce using rule 108 (element -> STR .)
    LSHIFT          reduce using rule 108 (element -> STR .)
    RSHIFT          reduce using rule 108 (element -> STR .)
    <               reduce using rule 108 (element -> STR .)
    >               reduce using rule 108 (element -> STR .)
    LEQ             reduce using rule 108 (element -> STR .)
    GEQ             reduce using rule 108 (element -> STR .)
    ^               reduce using rule 108 (element -> STR .)
    ?               reduce using rule 108 (element -> STR .)
    ]               reduce using rule 108 (element -> STR .)
    =               reduce using rule 108 (element -> STR .)
    ADDEQ           reduce using rule 108 (element -> STR .)
    SUBEQ           reduce using rule 108 (element -> STR .)
    MULTEQ          reduce using rule 108 (element -> STR .)
    DIVEQ           reduce using rule 108 (element -> STR .)
    MODEQ           reduce using rule 108 (element -> STR .)
    ,               reduce using rule 108 (element -> STR .)
    ;               reduce using rule 108 (element -> STR .)
    )               reduce using rule 108 (element -> STR .)
    }               reduce using rule 108 (element -> STR .)
    :               reduce using rule 108 (element -> STR .)


state 57

    (12) declarators -> declarator_1 , declarators .

    ;               reduce using rule 12 (declarators -> declarator_1 , declarators .)


state 58

    (15) declarator_1 -> declarator_2 = initializer .

    ,               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)
    ;               reduce using rule 15 (declarator_1 -> declarator_2 = initializer .)


state 59

    (20) initializer -> expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ,               reduce using rule 20 (initializer -> expression .)
    ;               reduce using rule 20 (initializer -> expression .)
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 60

    (21) initializer -> { . expressions }
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expressions                    shift and go to state 105
    expression                     shift and go to state 106
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 61

    (17) declarator_2 -> ID ( . )

    )               shift and go to state 107


state 62

    (22) new_type_dec -> new_type ID { new_type_params . }
    (23) new_type_dec -> new_type ID { new_type_params . } declarators

    }               shift and go to state 108


state 63

    (27) new_type_params -> new_type_param . new_type_params
    (28) new_type_params -> new_type_param .
    (27) new_type_params -> . new_type_param new_type_params
    (28) new_type_params -> . new_type_param
    (29) new_type_param -> . type declarators ;
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    }               reduce using rule 28 (new_type_params -> new_type_param .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    new_type_param                 shift and go to state 63
    new_type_params                shift and go to state 109
    type                           shift and go to state 64

state 64

    (29) new_type_param -> type . declarators ;
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 110
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 65

    (36) param -> type declarator_2 .

    ,               reduce using rule 36 (param -> type declarator_2 .)
    )               reduce using rule 36 (param -> type declarator_2 .)


state 66

    (30) func_def -> type ID ( params ) . { statements }
    (32) func_def -> type ID ( params ) . { }

    {               shift and go to state 111


state 67

    (31) func_def -> type ID ( ) { . statements }
    (33) func_def -> type ID ( ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               shift and go to state 115
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    type                           shift and go to state 112
    statements                     shift and go to state 114
    statement                      shift and go to state 116
    expression                     shift and go to state 117
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 68

    (34) params -> param , . params
    (34) params -> . param , params
    (35) params -> . param
    (36) param -> . type declarator_2
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE

    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18

    param                          shift and go to state 39
    params                         shift and go to state 130
    type                           shift and go to state 36

state 69

    (19) declarator_2 -> ID [ expression ] .

    =               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ,               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    ;               reduce using rule 19 (declarator_2 -> ID [ expression ] .)
    )               reduce using rule 19 (declarator_2 -> ID [ expression ] .)


state 70

    (64) expression -> expression = . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 131
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 71

    (65) expression -> expression ADDEQ . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 132
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 72

    (66) expression -> expression SUBEQ . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 133
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 73

    (67) expression -> expression MULTEQ . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 134
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 74

    (68) expression -> expression DIVEQ . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 135
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 75

    (69) expression -> expression MODEQ . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 136
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 76

    (70) expression -> ( expression . )
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    )               shift and go to state 137
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 77

    (72) tern_expr -> tern_expr ? . tern_expr : tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    tern_expr                      shift and go to state 138
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 78

    (74) bin_expr -> pre_unary_expr bin_op . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    pre_unary_expr                 shift and go to state 46
    bin_expr                       shift and go to state 139
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 79

    (76) bin_op -> + .

    PLUSPLUS        reduce using rule 76 (bin_op -> + .)
    MINUSMINUS      reduce using rule 76 (bin_op -> + .)
    +               reduce using rule 76 (bin_op -> + .)
    -               reduce using rule 76 (bin_op -> + .)
    !               reduce using rule 76 (bin_op -> + .)
    ID              reduce using rule 76 (bin_op -> + .)
    NUMBER          reduce using rule 76 (bin_op -> + .)
    CHR             reduce using rule 76 (bin_op -> + .)
    STR             reduce using rule 76 (bin_op -> + .)


state 80

    (77) bin_op -> - .

    PLUSPLUS        reduce using rule 77 (bin_op -> - .)
    MINUSMINUS      reduce using rule 77 (bin_op -> - .)
    +               reduce using rule 77 (bin_op -> - .)
    -               reduce using rule 77 (bin_op -> - .)
    !               reduce using rule 77 (bin_op -> - .)
    ID              reduce using rule 77 (bin_op -> - .)
    NUMBER          reduce using rule 77 (bin_op -> - .)
    CHR             reduce using rule 77 (bin_op -> - .)
    STR             reduce using rule 77 (bin_op -> - .)


state 81

    (78) bin_op -> * .

    PLUSPLUS        reduce using rule 78 (bin_op -> * .)
    MINUSMINUS      reduce using rule 78 (bin_op -> * .)
    +               reduce using rule 78 (bin_op -> * .)
    -               reduce using rule 78 (bin_op -> * .)
    !               reduce using rule 78 (bin_op -> * .)
    ID              reduce using rule 78 (bin_op -> * .)
    NUMBER          reduce using rule 78 (bin_op -> * .)
    CHR             reduce using rule 78 (bin_op -> * .)
    STR             reduce using rule 78 (bin_op -> * .)


state 82

    (79) bin_op -> / .

    PLUSPLUS        reduce using rule 79 (bin_op -> / .)
    MINUSMINUS      reduce using rule 79 (bin_op -> / .)
    +               reduce using rule 79 (bin_op -> / .)
    -               reduce using rule 79 (bin_op -> / .)
    !               reduce using rule 79 (bin_op -> / .)
    ID              reduce using rule 79 (bin_op -> / .)
    NUMBER          reduce using rule 79 (bin_op -> / .)
    CHR             reduce using rule 79 (bin_op -> / .)
    STR             reduce using rule 79 (bin_op -> / .)


state 83

    (80) bin_op -> LOGAND .

    PLUSPLUS        reduce using rule 80 (bin_op -> LOGAND .)
    MINUSMINUS      reduce using rule 80 (bin_op -> LOGAND .)
    +               reduce using rule 80 (bin_op -> LOGAND .)
    -               reduce using rule 80 (bin_op -> LOGAND .)
    !               reduce using rule 80 (bin_op -> LOGAND .)
    ID              reduce using rule 80 (bin_op -> LOGAND .)
    NUMBER          reduce using rule 80 (bin_op -> LOGAND .)
    CHR             reduce using rule 80 (bin_op -> LOGAND .)
    STR             reduce using rule 80 (bin_op -> LOGAND .)


state 84

    (81) bin_op -> LOGOR .

    PLUSPLUS        reduce using rule 81 (bin_op -> LOGOR .)
    MINUSMINUS      reduce using rule 81 (bin_op -> LOGOR .)
    +               reduce using rule 81 (bin_op -> LOGOR .)
    -               reduce using rule 81 (bin_op -> LOGOR .)
    !               reduce using rule 81 (bin_op -> LOGOR .)
    ID              reduce using rule 81 (bin_op -> LOGOR .)
    NUMBER          reduce using rule 81 (bin_op -> LOGOR .)
    CHR             reduce using rule 81 (bin_op -> LOGOR .)
    STR             reduce using rule 81 (bin_op -> LOGOR .)


state 85

    (82) bin_op -> LOGEQ .

    PLUSPLUS        reduce using rule 82 (bin_op -> LOGEQ .)
    MINUSMINUS      reduce using rule 82 (bin_op -> LOGEQ .)
    +               reduce using rule 82 (bin_op -> LOGEQ .)
    -               reduce using rule 82 (bin_op -> LOGEQ .)
    !               reduce using rule 82 (bin_op -> LOGEQ .)
    ID              reduce using rule 82 (bin_op -> LOGEQ .)
    NUMBER          reduce using rule 82 (bin_op -> LOGEQ .)
    CHR             reduce using rule 82 (bin_op -> LOGEQ .)
    STR             reduce using rule 82 (bin_op -> LOGEQ .)


state 86

    (83) bin_op -> LOGNEQ .

    PLUSPLUS        reduce using rule 83 (bin_op -> LOGNEQ .)
    MINUSMINUS      reduce using rule 83 (bin_op -> LOGNEQ .)
    +               reduce using rule 83 (bin_op -> LOGNEQ .)
    -               reduce using rule 83 (bin_op -> LOGNEQ .)
    !               reduce using rule 83 (bin_op -> LOGNEQ .)
    ID              reduce using rule 83 (bin_op -> LOGNEQ .)
    NUMBER          reduce using rule 83 (bin_op -> LOGNEQ .)
    CHR             reduce using rule 83 (bin_op -> LOGNEQ .)
    STR             reduce using rule 83 (bin_op -> LOGNEQ .)


state 87

    (84) bin_op -> LSHIFT .

    PLUSPLUS        reduce using rule 84 (bin_op -> LSHIFT .)
    MINUSMINUS      reduce using rule 84 (bin_op -> LSHIFT .)
    +               reduce using rule 84 (bin_op -> LSHIFT .)
    -               reduce using rule 84 (bin_op -> LSHIFT .)
    !               reduce using rule 84 (bin_op -> LSHIFT .)
    ID              reduce using rule 84 (bin_op -> LSHIFT .)
    NUMBER          reduce using rule 84 (bin_op -> LSHIFT .)
    CHR             reduce using rule 84 (bin_op -> LSHIFT .)
    STR             reduce using rule 84 (bin_op -> LSHIFT .)


state 88

    (85) bin_op -> RSHIFT .

    PLUSPLUS        reduce using rule 85 (bin_op -> RSHIFT .)
    MINUSMINUS      reduce using rule 85 (bin_op -> RSHIFT .)
    +               reduce using rule 85 (bin_op -> RSHIFT .)
    -               reduce using rule 85 (bin_op -> RSHIFT .)
    !               reduce using rule 85 (bin_op -> RSHIFT .)
    ID              reduce using rule 85 (bin_op -> RSHIFT .)
    NUMBER          reduce using rule 85 (bin_op -> RSHIFT .)
    CHR             reduce using rule 85 (bin_op -> RSHIFT .)
    STR             reduce using rule 85 (bin_op -> RSHIFT .)


state 89

    (86) bin_op -> < .

    PLUSPLUS        reduce using rule 86 (bin_op -> < .)
    MINUSMINUS      reduce using rule 86 (bin_op -> < .)
    +               reduce using rule 86 (bin_op -> < .)
    -               reduce using rule 86 (bin_op -> < .)
    !               reduce using rule 86 (bin_op -> < .)
    ID              reduce using rule 86 (bin_op -> < .)
    NUMBER          reduce using rule 86 (bin_op -> < .)
    CHR             reduce using rule 86 (bin_op -> < .)
    STR             reduce using rule 86 (bin_op -> < .)


state 90

    (87) bin_op -> > .

    PLUSPLUS        reduce using rule 87 (bin_op -> > .)
    MINUSMINUS      reduce using rule 87 (bin_op -> > .)
    +               reduce using rule 87 (bin_op -> > .)
    -               reduce using rule 87 (bin_op -> > .)
    !               reduce using rule 87 (bin_op -> > .)
    ID              reduce using rule 87 (bin_op -> > .)
    NUMBER          reduce using rule 87 (bin_op -> > .)
    CHR             reduce using rule 87 (bin_op -> > .)
    STR             reduce using rule 87 (bin_op -> > .)


state 91

    (88) bin_op -> LEQ .

    PLUSPLUS        reduce using rule 88 (bin_op -> LEQ .)
    MINUSMINUS      reduce using rule 88 (bin_op -> LEQ .)
    +               reduce using rule 88 (bin_op -> LEQ .)
    -               reduce using rule 88 (bin_op -> LEQ .)
    !               reduce using rule 88 (bin_op -> LEQ .)
    ID              reduce using rule 88 (bin_op -> LEQ .)
    NUMBER          reduce using rule 88 (bin_op -> LEQ .)
    CHR             reduce using rule 88 (bin_op -> LEQ .)
    STR             reduce using rule 88 (bin_op -> LEQ .)


state 92

    (89) bin_op -> GEQ .

    PLUSPLUS        reduce using rule 89 (bin_op -> GEQ .)
    MINUSMINUS      reduce using rule 89 (bin_op -> GEQ .)
    +               reduce using rule 89 (bin_op -> GEQ .)
    -               reduce using rule 89 (bin_op -> GEQ .)
    !               reduce using rule 89 (bin_op -> GEQ .)
    ID              reduce using rule 89 (bin_op -> GEQ .)
    NUMBER          reduce using rule 89 (bin_op -> GEQ .)
    CHR             reduce using rule 89 (bin_op -> GEQ .)
    STR             reduce using rule 89 (bin_op -> GEQ .)


state 93

    (90) bin_op -> ^ .

    PLUSPLUS        reduce using rule 90 (bin_op -> ^ .)
    MINUSMINUS      reduce using rule 90 (bin_op -> ^ .)
    +               reduce using rule 90 (bin_op -> ^ .)
    -               reduce using rule 90 (bin_op -> ^ .)
    !               reduce using rule 90 (bin_op -> ^ .)
    ID              reduce using rule 90 (bin_op -> ^ .)
    NUMBER          reduce using rule 90 (bin_op -> ^ .)
    CHR             reduce using rule 90 (bin_op -> ^ .)
    STR             reduce using rule 90 (bin_op -> ^ .)


state 94

    (91) pre_unary_expr -> PLUSPLUS pre_unary_expr .

    +               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    -               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    *               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    /               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGAND          reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGOR           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGEQ           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LOGNEQ          reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LSHIFT          reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    RSHIFT          reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    <               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    >               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    LEQ             reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    GEQ             reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ^               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ?               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ]               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    =               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ADDEQ           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    SUBEQ           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    MULTEQ          reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    DIVEQ           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    MODEQ           reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ,               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    ;               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    )               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    }               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)
    :               reduce using rule 91 (pre_unary_expr -> PLUSPLUS pre_unary_expr .)


state 95

    (92) pre_unary_expr -> MINUSMINUS pre_unary_expr .

    +               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    -               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    *               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    /               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGAND          reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGOR           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGEQ           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LOGNEQ          reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LSHIFT          reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    RSHIFT          reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    <               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    >               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    LEQ             reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    GEQ             reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ^               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ?               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ]               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    =               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ADDEQ           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    SUBEQ           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    MULTEQ          reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    DIVEQ           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    MODEQ           reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ,               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    ;               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    )               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    }               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)
    :               reduce using rule 92 (pre_unary_expr -> MINUSMINUS pre_unary_expr .)


state 96

    (93) pre_unary_expr -> + pre_unary_expr .

    +               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    -               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    *               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    /               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LOGAND          reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LOGOR           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LOGEQ           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LOGNEQ          reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LSHIFT          reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    RSHIFT          reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    <               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    >               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    LEQ             reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    GEQ             reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ^               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ?               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ]               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    =               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ADDEQ           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    SUBEQ           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    MULTEQ          reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    DIVEQ           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    MODEQ           reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ,               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    ;               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    )               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    }               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)
    :               reduce using rule 93 (pre_unary_expr -> + pre_unary_expr .)


state 97

    (94) pre_unary_expr -> - pre_unary_expr .

    +               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    -               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    *               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    /               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LOGAND          reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LOGOR           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LOGEQ           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LOGNEQ          reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LSHIFT          reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    RSHIFT          reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    <               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    >               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    LEQ             reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    GEQ             reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ^               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ?               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ]               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    =               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ADDEQ           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    SUBEQ           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    MULTEQ          reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    DIVEQ           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    MODEQ           reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ,               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    ;               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    )               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    }               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)
    :               reduce using rule 94 (pre_unary_expr -> - pre_unary_expr .)


state 98

    (95) pre_unary_expr -> ! pre_unary_expr .

    +               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    -               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    *               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    /               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LOGAND          reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LOGOR           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LOGEQ           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LOGNEQ          reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LSHIFT          reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    RSHIFT          reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    <               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    >               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    LEQ             reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    GEQ             reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ^               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ?               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ]               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    =               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ADDEQ           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    SUBEQ           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    MULTEQ          reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    DIVEQ           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    MODEQ           reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ,               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    ;               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    )               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    }               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)
    :               reduce using rule 95 (pre_unary_expr -> ! pre_unary_expr .)


state 99

    (97) post_unary_expr -> post_unary_expr [ . expression ]
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    post_unary_expr                shift and go to state 52
    expression                     shift and go to state 140
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    element                        shift and go to state 53

state 100

    (98) post_unary_expr -> post_unary_expr ( . )
    (99) post_unary_expr -> post_unary_expr ( . expressions )
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    )               shift and go to state 141
    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    post_unary_expr                shift and go to state 52
    expressions                    shift and go to state 142
    expression                     shift and go to state 106
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    element                        shift and go to state 53

state 101

    (100) post_unary_expr -> post_unary_expr PLUSPLUS .

    [               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    (               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    .               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RARROW          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    +               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    -               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    *               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    /               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGAND          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGOR           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LOGNEQ          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    RSHIFT          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    <               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    >               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    LEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    GEQ             reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ^               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ?               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ]               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    =               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ADDEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    SUBEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MULTEQ          reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    DIVEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    MODEQ           reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ,               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    ;               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    )               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    }               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)
    :               reduce using rule 100 (post_unary_expr -> post_unary_expr PLUSPLUS .)


state 102

    (101) post_unary_expr -> post_unary_expr MINUSMINUS .

    [               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    (               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    .               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RARROW          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    +               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    -               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    *               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    /               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGAND          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGOR           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LOGNEQ          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LSHIFT          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    RSHIFT          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    <               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    >               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    LEQ             reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    GEQ             reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ^               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ?               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ]               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    =               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ADDEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    SUBEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MULTEQ          reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    DIVEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    MODEQ           reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ,               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    ;               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    )               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    }               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)
    :               reduce using rule 101 (post_unary_expr -> post_unary_expr MINUSMINUS .)


state 103

    (102) post_unary_expr -> post_unary_expr . . ID

    ID              shift and go to state 143


state 104

    (103) post_unary_expr -> post_unary_expr RARROW . ID

    ID              shift and go to state 144


state 105

    (21) initializer -> { expressions . }

    }               shift and go to state 145


state 106

    (62) expressions -> expression . , expressions
    (63) expressions -> expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ,               shift and go to state 146
    }               reduce using rule 63 (expressions -> expression .)
    )               reduce using rule 63 (expressions -> expression .)
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 107

    (17) declarator_2 -> ID ( ) .

    =               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ,               reduce using rule 17 (declarator_2 -> ID ( ) .)
    ;               reduce using rule 17 (declarator_2 -> ID ( ) .)
    )               reduce using rule 17 (declarator_2 -> ID ( ) .)


state 108

    (22) new_type_dec -> new_type ID { new_type_params } .
    (23) new_type_dec -> new_type ID { new_type_params } . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ;               reduce using rule 22 (new_type_dec -> new_type ID { new_type_params } .)
    ID              shift and go to state 33

    declarators                    shift and go to state 147
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 109

    (27) new_type_params -> new_type_param new_type_params .

    }               reduce using rule 27 (new_type_params -> new_type_param new_type_params .)


state 110

    (29) new_type_param -> type declarators . ;

    ;               shift and go to state 148


state 111

    (30) func_def -> type ID ( params ) { . statements }
    (32) func_def -> type ID ( params ) { . }
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               shift and go to state 150
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    type                           shift and go to state 112
    statements                     shift and go to state 149
    statement                      shift and go to state 116
    expression                     shift and go to state 117
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 112

    (11) usual_dec -> type . declarators
    (12) declarators -> . declarator_1 , declarators
    (13) declarators -> . declarator_1
    (14) declarator_1 -> . declarator_2
    (15) declarator_1 -> . declarator_2 = initializer
    (16) declarator_2 -> . ID
    (17) declarator_2 -> . ID ( )
    (18) declarator_2 -> . ID [ ]
    (19) declarator_2 -> . ID [ expression ]

    ID              shift and go to state 33

    declarators                    shift and go to state 25
    declarator_1                   shift and go to state 26
    declarator_2                   shift and go to state 27

state 113

    (48) statement -> { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    stats_or_null                  shift and go to state 151
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    expression                     shift and go to state 117
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 114

    (31) func_def -> type ID ( ) { statements . }

    }               shift and go to state 154


state 115

    (33) func_def -> type ID ( ) { } .

    INCLUDE         reduce using rule 33 (func_def -> type ID ( ) { } .)
    ;               reduce using rule 33 (func_def -> type ID ( ) { } .)
    VOID            reduce using rule 33 (func_def -> type ID ( ) { } .)
    CHAR            reduce using rule 33 (func_def -> type ID ( ) { } .)
    SHORT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    INT             reduce using rule 33 (func_def -> type ID ( ) { } .)
    LONG            reduce using rule 33 (func_def -> type ID ( ) { } .)
    FLOAT           reduce using rule 33 (func_def -> type ID ( ) { } .)
    DOUBLE          reduce using rule 33 (func_def -> type ID ( ) { } .)
    STRUCT          reduce using rule 33 (func_def -> type ID ( ) { } .)
    CLASS           reduce using rule 33 (func_def -> type ID ( ) { } .)
    $end            reduce using rule 33 (func_def -> type ID ( ) { } .)


state 116

    (37) statements -> statement . statements
    (38) statements -> statement .
    (37) statements -> . statement statements
    (38) statements -> . statement
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 38 (statements -> statement .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    statement                      shift and go to state 116
    statements                     shift and go to state 155
    expression                     shift and go to state 117
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 117

    (39) statement -> expression . ;
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ;               shift and go to state 156
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 118

    (44) statement -> ; .

    ;               reduce using rule 44 (statement -> ; .)
    {               reduce using rule 44 (statement -> ; .)
    (               reduce using rule 44 (statement -> ; .)
    IF              reduce using rule 44 (statement -> ; .)
    WHILE           reduce using rule 44 (statement -> ; .)
    DO              reduce using rule 44 (statement -> ; .)
    FOR             reduce using rule 44 (statement -> ; .)
    BREAK           reduce using rule 44 (statement -> ; .)
    CONTINUE        reduce using rule 44 (statement -> ; .)
    RETURN          reduce using rule 44 (statement -> ; .)
    VOID            reduce using rule 44 (statement -> ; .)
    CHAR            reduce using rule 44 (statement -> ; .)
    SHORT           reduce using rule 44 (statement -> ; .)
    INT             reduce using rule 44 (statement -> ; .)
    LONG            reduce using rule 44 (statement -> ; .)
    FLOAT           reduce using rule 44 (statement -> ; .)
    DOUBLE          reduce using rule 44 (statement -> ; .)
    STRUCT          reduce using rule 44 (statement -> ; .)
    CLASS           reduce using rule 44 (statement -> ; .)
    PLUSPLUS        reduce using rule 44 (statement -> ; .)
    MINUSMINUS      reduce using rule 44 (statement -> ; .)
    +               reduce using rule 44 (statement -> ; .)
    -               reduce using rule 44 (statement -> ; .)
    !               reduce using rule 44 (statement -> ; .)
    ID              reduce using rule 44 (statement -> ; .)
    NUMBER          reduce using rule 44 (statement -> ; .)
    CHR             reduce using rule 44 (statement -> ; .)
    STR             reduce using rule 44 (statement -> ; .)
    }               reduce using rule 44 (statement -> ; .)


state 119

    (40) statement -> decl . ;

    ;               shift and go to state 157


state 120

    (41) statement -> conditional .

    ;               reduce using rule 41 (statement -> conditional .)
    {               reduce using rule 41 (statement -> conditional .)
    (               reduce using rule 41 (statement -> conditional .)
    IF              reduce using rule 41 (statement -> conditional .)
    WHILE           reduce using rule 41 (statement -> conditional .)
    DO              reduce using rule 41 (statement -> conditional .)
    FOR             reduce using rule 41 (statement -> conditional .)
    BREAK           reduce using rule 41 (statement -> conditional .)
    CONTINUE        reduce using rule 41 (statement -> conditional .)
    RETURN          reduce using rule 41 (statement -> conditional .)
    VOID            reduce using rule 41 (statement -> conditional .)
    CHAR            reduce using rule 41 (statement -> conditional .)
    SHORT           reduce using rule 41 (statement -> conditional .)
    INT             reduce using rule 41 (statement -> conditional .)
    LONG            reduce using rule 41 (statement -> conditional .)
    FLOAT           reduce using rule 41 (statement -> conditional .)
    DOUBLE          reduce using rule 41 (statement -> conditional .)
    STRUCT          reduce using rule 41 (statement -> conditional .)
    CLASS           reduce using rule 41 (statement -> conditional .)
    PLUSPLUS        reduce using rule 41 (statement -> conditional .)
    MINUSMINUS      reduce using rule 41 (statement -> conditional .)
    +               reduce using rule 41 (statement -> conditional .)
    -               reduce using rule 41 (statement -> conditional .)
    !               reduce using rule 41 (statement -> conditional .)
    ID              reduce using rule 41 (statement -> conditional .)
    NUMBER          reduce using rule 41 (statement -> conditional .)
    CHR             reduce using rule 41 (statement -> conditional .)
    STR             reduce using rule 41 (statement -> conditional .)
    }               reduce using rule 41 (statement -> conditional .)


state 121

    (42) statement -> iteration .

    ;               reduce using rule 42 (statement -> iteration .)
    {               reduce using rule 42 (statement -> iteration .)
    (               reduce using rule 42 (statement -> iteration .)
    IF              reduce using rule 42 (statement -> iteration .)
    WHILE           reduce using rule 42 (statement -> iteration .)
    DO              reduce using rule 42 (statement -> iteration .)
    FOR             reduce using rule 42 (statement -> iteration .)
    BREAK           reduce using rule 42 (statement -> iteration .)
    CONTINUE        reduce using rule 42 (statement -> iteration .)
    RETURN          reduce using rule 42 (statement -> iteration .)
    VOID            reduce using rule 42 (statement -> iteration .)
    CHAR            reduce using rule 42 (statement -> iteration .)
    SHORT           reduce using rule 42 (statement -> iteration .)
    INT             reduce using rule 42 (statement -> iteration .)
    LONG            reduce using rule 42 (statement -> iteration .)
    FLOAT           reduce using rule 42 (statement -> iteration .)
    DOUBLE          reduce using rule 42 (statement -> iteration .)
    STRUCT          reduce using rule 42 (statement -> iteration .)
    CLASS           reduce using rule 42 (statement -> iteration .)
    PLUSPLUS        reduce using rule 42 (statement -> iteration .)
    MINUSMINUS      reduce using rule 42 (statement -> iteration .)
    +               reduce using rule 42 (statement -> iteration .)
    -               reduce using rule 42 (statement -> iteration .)
    !               reduce using rule 42 (statement -> iteration .)
    ID              reduce using rule 42 (statement -> iteration .)
    NUMBER          reduce using rule 42 (statement -> iteration .)
    CHR             reduce using rule 42 (statement -> iteration .)
    STR             reduce using rule 42 (statement -> iteration .)
    }               reduce using rule 42 (statement -> iteration .)


state 122

    (43) statement -> jump . ;

    ;               shift and go to state 158


state 123

    (45) conditional -> IF . ( expression ) { stats_or_null }
    (46) conditional -> IF . ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> IF . ( expression ) { stats_or_null } ELSE { stats_or_null }

    (               shift and go to state 159


state 124

    (51) iteration -> WHILE . ( expression ) { stats_or_null }

    (               shift and go to state 160


state 125

    (52) iteration -> DO . { stats_or_null } WHILE ( expression ) ;

    {               shift and go to state 161


state 126

    (53) iteration -> FOR . ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }

    (               shift and go to state 162


state 127

    (58) jump -> BREAK .

    ;               reduce using rule 58 (jump -> BREAK .)


state 128

    (59) jump -> CONTINUE .

    ;               reduce using rule 59 (jump -> CONTINUE .)


state 129

    (60) jump -> RETURN .
    (61) jump -> RETURN . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    ;               reduce using rule 60 (jump -> RETURN .)
    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 163
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 130

    (34) params -> param , params .

    )               reduce using rule 34 (params -> param , params .)


state 131

    (64) expression -> expression = expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               reduce using rule 64 (expression -> expression = expression .)
    =               reduce using rule 64 (expression -> expression = expression .)
    ADDEQ           reduce using rule 64 (expression -> expression = expression .)
    SUBEQ           reduce using rule 64 (expression -> expression = expression .)
    MULTEQ          reduce using rule 64 (expression -> expression = expression .)
    DIVEQ           reduce using rule 64 (expression -> expression = expression .)
    MODEQ           reduce using rule 64 (expression -> expression = expression .)
    ,               reduce using rule 64 (expression -> expression = expression .)
    ;               reduce using rule 64 (expression -> expression = expression .)
    )               reduce using rule 64 (expression -> expression = expression .)
    }               reduce using rule 64 (expression -> expression = expression .)

  ! =               [ shift and go to state 70 ]
  ! ADDEQ           [ shift and go to state 71 ]
  ! SUBEQ           [ shift and go to state 72 ]
  ! MULTEQ          [ shift and go to state 73 ]
  ! DIVEQ           [ shift and go to state 74 ]
  ! MODEQ           [ shift and go to state 75 ]


state 132

    (65) expression -> expression ADDEQ expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               reduce using rule 65 (expression -> expression ADDEQ expression .)
    =               reduce using rule 65 (expression -> expression ADDEQ expression .)
    ADDEQ           reduce using rule 65 (expression -> expression ADDEQ expression .)
    SUBEQ           reduce using rule 65 (expression -> expression ADDEQ expression .)
    MULTEQ          reduce using rule 65 (expression -> expression ADDEQ expression .)
    DIVEQ           reduce using rule 65 (expression -> expression ADDEQ expression .)
    MODEQ           reduce using rule 65 (expression -> expression ADDEQ expression .)
    ,               reduce using rule 65 (expression -> expression ADDEQ expression .)
    ;               reduce using rule 65 (expression -> expression ADDEQ expression .)
    )               reduce using rule 65 (expression -> expression ADDEQ expression .)
    }               reduce using rule 65 (expression -> expression ADDEQ expression .)

  ! =               [ shift and go to state 70 ]
  ! ADDEQ           [ shift and go to state 71 ]
  ! SUBEQ           [ shift and go to state 72 ]
  ! MULTEQ          [ shift and go to state 73 ]
  ! DIVEQ           [ shift and go to state 74 ]
  ! MODEQ           [ shift and go to state 75 ]


state 133

    (66) expression -> expression SUBEQ expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               reduce using rule 66 (expression -> expression SUBEQ expression .)
    =               reduce using rule 66 (expression -> expression SUBEQ expression .)
    ADDEQ           reduce using rule 66 (expression -> expression SUBEQ expression .)
    SUBEQ           reduce using rule 66 (expression -> expression SUBEQ expression .)
    MULTEQ          reduce using rule 66 (expression -> expression SUBEQ expression .)
    DIVEQ           reduce using rule 66 (expression -> expression SUBEQ expression .)
    MODEQ           reduce using rule 66 (expression -> expression SUBEQ expression .)
    ,               reduce using rule 66 (expression -> expression SUBEQ expression .)
    ;               reduce using rule 66 (expression -> expression SUBEQ expression .)
    )               reduce using rule 66 (expression -> expression SUBEQ expression .)
    }               reduce using rule 66 (expression -> expression SUBEQ expression .)

  ! =               [ shift and go to state 70 ]
  ! ADDEQ           [ shift and go to state 71 ]
  ! SUBEQ           [ shift and go to state 72 ]
  ! MULTEQ          [ shift and go to state 73 ]
  ! DIVEQ           [ shift and go to state 74 ]
  ! MODEQ           [ shift and go to state 75 ]


state 134

    (67) expression -> expression MULTEQ expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               reduce using rule 67 (expression -> expression MULTEQ expression .)
    =               reduce using rule 67 (expression -> expression MULTEQ expression .)
    ADDEQ           reduce using rule 67 (expression -> expression MULTEQ expression .)
    SUBEQ           reduce using rule 67 (expression -> expression MULTEQ expression .)
    MULTEQ          reduce using rule 67 (expression -> expression MULTEQ expression .)
    DIVEQ           reduce using rule 67 (expression -> expression MULTEQ expression .)
    MODEQ           reduce using rule 67 (expression -> expression MULTEQ expression .)
    ,               reduce using rule 67 (expression -> expression MULTEQ expression .)
    ;               reduce using rule 67 (expression -> expression MULTEQ expression .)
    )               reduce using rule 67 (expression -> expression MULTEQ expression .)
    }               reduce using rule 67 (expression -> expression MULTEQ expression .)

  ! =               [ shift and go to state 70 ]
  ! ADDEQ           [ shift and go to state 71 ]
  ! SUBEQ           [ shift and go to state 72 ]
  ! MULTEQ          [ shift and go to state 73 ]
  ! DIVEQ           [ shift and go to state 74 ]
  ! MODEQ           [ shift and go to state 75 ]


state 135

    (68) expression -> expression DIVEQ expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               reduce using rule 68 (expression -> expression DIVEQ expression .)
    =               reduce using rule 68 (expression -> expression DIVEQ expression .)
    ADDEQ           reduce using rule 68 (expression -> expression DIVEQ expression .)
    SUBEQ           reduce using rule 68 (expression -> expression DIVEQ expression .)
    MULTEQ          reduce using rule 68 (expression -> expression DIVEQ expression .)
    DIVEQ           reduce using rule 68 (expression -> expression DIVEQ expression .)
    MODEQ           reduce using rule 68 (expression -> expression DIVEQ expression .)
    ,               reduce using rule 68 (expression -> expression DIVEQ expression .)
    ;               reduce using rule 68 (expression -> expression DIVEQ expression .)
    )               reduce using rule 68 (expression -> expression DIVEQ expression .)
    }               reduce using rule 68 (expression -> expression DIVEQ expression .)

  ! =               [ shift and go to state 70 ]
  ! ADDEQ           [ shift and go to state 71 ]
  ! SUBEQ           [ shift and go to state 72 ]
  ! MULTEQ          [ shift and go to state 73 ]
  ! DIVEQ           [ shift and go to state 74 ]
  ! MODEQ           [ shift and go to state 75 ]


state 136

    (69) expression -> expression MODEQ expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for ADDEQ resolved as shift
  ! shift/reduce conflict for SUBEQ resolved as shift
  ! shift/reduce conflict for MULTEQ resolved as shift
  ! shift/reduce conflict for DIVEQ resolved as shift
  ! shift/reduce conflict for MODEQ resolved as shift
    ]               reduce using rule 69 (expression -> expression MODEQ expression .)
    ,               reduce using rule 69 (expression -> expression MODEQ expression .)
    ;               reduce using rule 69 (expression -> expression MODEQ expression .)
    )               reduce using rule 69 (expression -> expression MODEQ expression .)
    }               reduce using rule 69 (expression -> expression MODEQ expression .)
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75

  ! =               [ reduce using rule 69 (expression -> expression MODEQ expression .) ]
  ! ADDEQ           [ reduce using rule 69 (expression -> expression MODEQ expression .) ]
  ! SUBEQ           [ reduce using rule 69 (expression -> expression MODEQ expression .) ]
  ! MULTEQ          [ reduce using rule 69 (expression -> expression MODEQ expression .) ]
  ! DIVEQ           [ reduce using rule 69 (expression -> expression MODEQ expression .) ]
  ! MODEQ           [ reduce using rule 69 (expression -> expression MODEQ expression .) ]


state 137

    (70) expression -> ( expression ) .

    ]               reduce using rule 70 (expression -> ( expression ) .)
    =               reduce using rule 70 (expression -> ( expression ) .)
    ADDEQ           reduce using rule 70 (expression -> ( expression ) .)
    SUBEQ           reduce using rule 70 (expression -> ( expression ) .)
    MULTEQ          reduce using rule 70 (expression -> ( expression ) .)
    DIVEQ           reduce using rule 70 (expression -> ( expression ) .)
    MODEQ           reduce using rule 70 (expression -> ( expression ) .)
    ,               reduce using rule 70 (expression -> ( expression ) .)
    ;               reduce using rule 70 (expression -> ( expression ) .)
    )               reduce using rule 70 (expression -> ( expression ) .)
    }               reduce using rule 70 (expression -> ( expression ) .)


state 138

    (72) tern_expr -> tern_expr ? tern_expr . : tern_expr
    (72) tern_expr -> tern_expr . ? tern_expr : tern_expr

    :               shift and go to state 164
    ?               shift and go to state 77


state 139

    (74) bin_expr -> pre_unary_expr bin_op bin_expr .

    ?               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ]               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    =               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ADDEQ           reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    SUBEQ           reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    MULTEQ          reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    DIVEQ           reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    MODEQ           reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ,               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    ;               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    )               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    }               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)
    :               reduce using rule 74 (bin_expr -> pre_unary_expr bin_op bin_expr .)


state 140

    (97) post_unary_expr -> post_unary_expr [ expression . ]
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ]               shift and go to state 165
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 141

    (98) post_unary_expr -> post_unary_expr ( ) .

    [               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    (               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    PLUSPLUS        reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    MINUSMINUS      reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    .               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    RARROW          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    +               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    -               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    *               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    /               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LOGAND          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LOGOR           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LOGEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LOGNEQ          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    RSHIFT          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    <               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    >               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    LEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    GEQ             reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ^               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ?               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ]               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    =               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ADDEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    SUBEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    MULTEQ          reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    DIVEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    MODEQ           reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ,               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    ;               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    )               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    }               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)
    :               reduce using rule 98 (post_unary_expr -> post_unary_expr ( ) .)


state 142

    (99) post_unary_expr -> post_unary_expr ( expressions . )

    )               shift and go to state 166


state 143

    (102) post_unary_expr -> post_unary_expr . ID .

    [               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    (               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    PLUSPLUS        reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    MINUSMINUS      reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    .               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    RARROW          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    +               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    -               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    *               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    /               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LOGAND          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LOGOR           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LOGEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LOGNEQ          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LSHIFT          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    RSHIFT          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    <               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    >               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    LEQ             reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    GEQ             reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ^               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ?               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ]               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    =               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ADDEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    SUBEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    MULTEQ          reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    DIVEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    MODEQ           reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ,               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    ;               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    )               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    }               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)
    :               reduce using rule 102 (post_unary_expr -> post_unary_expr . ID .)


state 144

    (103) post_unary_expr -> post_unary_expr RARROW ID .

    [               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    (               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    PLUSPLUS        reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    MINUSMINUS      reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    .               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    RARROW          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    +               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    -               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    *               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    /               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGAND          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGOR           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGEQ           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LOGNEQ          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LSHIFT          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    RSHIFT          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    <               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    >               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    LEQ             reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    GEQ             reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ^               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ?               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ]               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    =               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ADDEQ           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    SUBEQ           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    MULTEQ          reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    DIVEQ           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    MODEQ           reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ,               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    ;               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    )               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    }               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)
    :               reduce using rule 103 (post_unary_expr -> post_unary_expr RARROW ID .)


state 145

    (21) initializer -> { expressions } .

    ,               reduce using rule 21 (initializer -> { expressions } .)
    ;               reduce using rule 21 (initializer -> { expressions } .)


state 146

    (62) expressions -> expression , . expressions
    (62) expressions -> . expression , expressions
    (63) expressions -> . expression
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 106
    expressions                    shift and go to state 167
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 147

    (23) new_type_dec -> new_type ID { new_type_params } declarators .

    ;               reduce using rule 23 (new_type_dec -> new_type ID { new_type_params } declarators .)


state 148

    (29) new_type_param -> type declarators ; .

    VOID            reduce using rule 29 (new_type_param -> type declarators ; .)
    CHAR            reduce using rule 29 (new_type_param -> type declarators ; .)
    SHORT           reduce using rule 29 (new_type_param -> type declarators ; .)
    INT             reduce using rule 29 (new_type_param -> type declarators ; .)
    LONG            reduce using rule 29 (new_type_param -> type declarators ; .)
    FLOAT           reduce using rule 29 (new_type_param -> type declarators ; .)
    DOUBLE          reduce using rule 29 (new_type_param -> type declarators ; .)
    }               reduce using rule 29 (new_type_param -> type declarators ; .)


state 149

    (30) func_def -> type ID ( params ) { statements . }

    }               shift and go to state 168


state 150

    (32) func_def -> type ID ( params ) { } .

    INCLUDE         reduce using rule 32 (func_def -> type ID ( params ) { } .)
    ;               reduce using rule 32 (func_def -> type ID ( params ) { } .)
    VOID            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CHAR            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    SHORT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    INT             reduce using rule 32 (func_def -> type ID ( params ) { } .)
    LONG            reduce using rule 32 (func_def -> type ID ( params ) { } .)
    FLOAT           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    DOUBLE          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    STRUCT          reduce using rule 32 (func_def -> type ID ( params ) { } .)
    CLASS           reduce using rule 32 (func_def -> type ID ( params ) { } .)
    $end            reduce using rule 32 (func_def -> type ID ( params ) { } .)


state 151

    (48) statement -> { stats_or_null . }

    }               shift and go to state 169


state 152

    (49) stats_or_null -> statements .

    }               reduce using rule 49 (stats_or_null -> statements .)


state 153

    (50) stats_or_null -> empty .

    }               reduce using rule 50 (stats_or_null -> empty .)


state 154

    (31) func_def -> type ID ( ) { statements } .

    INCLUDE         reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    ;               reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    VOID            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CHAR            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    SHORT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    INT             reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    LONG            reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    FLOAT           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    DOUBLE          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    STRUCT          reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    CLASS           reduce using rule 31 (func_def -> type ID ( ) { statements } .)
    $end            reduce using rule 31 (func_def -> type ID ( ) { statements } .)


state 155

    (37) statements -> statement statements .

    }               reduce using rule 37 (statements -> statement statements .)


state 156

    (39) statement -> expression ; .

    ;               reduce using rule 39 (statement -> expression ; .)
    {               reduce using rule 39 (statement -> expression ; .)
    (               reduce using rule 39 (statement -> expression ; .)
    IF              reduce using rule 39 (statement -> expression ; .)
    WHILE           reduce using rule 39 (statement -> expression ; .)
    DO              reduce using rule 39 (statement -> expression ; .)
    FOR             reduce using rule 39 (statement -> expression ; .)
    BREAK           reduce using rule 39 (statement -> expression ; .)
    CONTINUE        reduce using rule 39 (statement -> expression ; .)
    RETURN          reduce using rule 39 (statement -> expression ; .)
    VOID            reduce using rule 39 (statement -> expression ; .)
    CHAR            reduce using rule 39 (statement -> expression ; .)
    SHORT           reduce using rule 39 (statement -> expression ; .)
    INT             reduce using rule 39 (statement -> expression ; .)
    LONG            reduce using rule 39 (statement -> expression ; .)
    FLOAT           reduce using rule 39 (statement -> expression ; .)
    DOUBLE          reduce using rule 39 (statement -> expression ; .)
    STRUCT          reduce using rule 39 (statement -> expression ; .)
    CLASS           reduce using rule 39 (statement -> expression ; .)
    PLUSPLUS        reduce using rule 39 (statement -> expression ; .)
    MINUSMINUS      reduce using rule 39 (statement -> expression ; .)
    +               reduce using rule 39 (statement -> expression ; .)
    -               reduce using rule 39 (statement -> expression ; .)
    !               reduce using rule 39 (statement -> expression ; .)
    ID              reduce using rule 39 (statement -> expression ; .)
    NUMBER          reduce using rule 39 (statement -> expression ; .)
    CHR             reduce using rule 39 (statement -> expression ; .)
    STR             reduce using rule 39 (statement -> expression ; .)
    }               reduce using rule 39 (statement -> expression ; .)


state 157

    (40) statement -> decl ; .

    ;               reduce using rule 40 (statement -> decl ; .)
    {               reduce using rule 40 (statement -> decl ; .)
    (               reduce using rule 40 (statement -> decl ; .)
    IF              reduce using rule 40 (statement -> decl ; .)
    WHILE           reduce using rule 40 (statement -> decl ; .)
    DO              reduce using rule 40 (statement -> decl ; .)
    FOR             reduce using rule 40 (statement -> decl ; .)
    BREAK           reduce using rule 40 (statement -> decl ; .)
    CONTINUE        reduce using rule 40 (statement -> decl ; .)
    RETURN          reduce using rule 40 (statement -> decl ; .)
    VOID            reduce using rule 40 (statement -> decl ; .)
    CHAR            reduce using rule 40 (statement -> decl ; .)
    SHORT           reduce using rule 40 (statement -> decl ; .)
    INT             reduce using rule 40 (statement -> decl ; .)
    LONG            reduce using rule 40 (statement -> decl ; .)
    FLOAT           reduce using rule 40 (statement -> decl ; .)
    DOUBLE          reduce using rule 40 (statement -> decl ; .)
    STRUCT          reduce using rule 40 (statement -> decl ; .)
    CLASS           reduce using rule 40 (statement -> decl ; .)
    PLUSPLUS        reduce using rule 40 (statement -> decl ; .)
    MINUSMINUS      reduce using rule 40 (statement -> decl ; .)
    +               reduce using rule 40 (statement -> decl ; .)
    -               reduce using rule 40 (statement -> decl ; .)
    !               reduce using rule 40 (statement -> decl ; .)
    ID              reduce using rule 40 (statement -> decl ; .)
    NUMBER          reduce using rule 40 (statement -> decl ; .)
    CHR             reduce using rule 40 (statement -> decl ; .)
    STR             reduce using rule 40 (statement -> decl ; .)
    }               reduce using rule 40 (statement -> decl ; .)


state 158

    (43) statement -> jump ; .

    ;               reduce using rule 43 (statement -> jump ; .)
    {               reduce using rule 43 (statement -> jump ; .)
    (               reduce using rule 43 (statement -> jump ; .)
    IF              reduce using rule 43 (statement -> jump ; .)
    WHILE           reduce using rule 43 (statement -> jump ; .)
    DO              reduce using rule 43 (statement -> jump ; .)
    FOR             reduce using rule 43 (statement -> jump ; .)
    BREAK           reduce using rule 43 (statement -> jump ; .)
    CONTINUE        reduce using rule 43 (statement -> jump ; .)
    RETURN          reduce using rule 43 (statement -> jump ; .)
    VOID            reduce using rule 43 (statement -> jump ; .)
    CHAR            reduce using rule 43 (statement -> jump ; .)
    SHORT           reduce using rule 43 (statement -> jump ; .)
    INT             reduce using rule 43 (statement -> jump ; .)
    LONG            reduce using rule 43 (statement -> jump ; .)
    FLOAT           reduce using rule 43 (statement -> jump ; .)
    DOUBLE          reduce using rule 43 (statement -> jump ; .)
    STRUCT          reduce using rule 43 (statement -> jump ; .)
    CLASS           reduce using rule 43 (statement -> jump ; .)
    PLUSPLUS        reduce using rule 43 (statement -> jump ; .)
    MINUSMINUS      reduce using rule 43 (statement -> jump ; .)
    +               reduce using rule 43 (statement -> jump ; .)
    -               reduce using rule 43 (statement -> jump ; .)
    !               reduce using rule 43 (statement -> jump ; .)
    ID              reduce using rule 43 (statement -> jump ; .)
    NUMBER          reduce using rule 43 (statement -> jump ; .)
    CHR             reduce using rule 43 (statement -> jump ; .)
    STR             reduce using rule 43 (statement -> jump ; .)
    }               reduce using rule 43 (statement -> jump ; .)


state 159

    (45) conditional -> IF ( . expression ) { stats_or_null }
    (46) conditional -> IF ( . expression ) { stats_or_null } ELSE conditional
    (47) conditional -> IF ( . expression ) { stats_or_null } ELSE { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 170
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 160

    (51) iteration -> WHILE ( . expression ) { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 171
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 161

    (52) iteration -> DO { . stats_or_null } WHILE ( expression ) ;
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    stats_or_null                  shift and go to state 172
    expression                     shift and go to state 117
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 162

    (53) iteration -> FOR ( . expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (56) expr_or_null_or_init -> . expr_or_null
    (57) expr_or_null_or_init -> . usual_dec
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (11) usual_dec -> . type declarators
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (116) empty -> .
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    ;               reduce using rule 116 (empty -> .)
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expr_or_null_or_init           shift and go to state 173
    expr_or_null                   shift and go to state 174
    usual_dec                      shift and go to state 175
    expression                     shift and go to state 176
    empty                          shift and go to state 177
    type                           shift and go to state 112
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 163

    (61) jump -> RETURN expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ;               reduce using rule 61 (jump -> RETURN expression .)
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 164

    (72) tern_expr -> tern_expr ? tern_expr : . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    tern_expr                      shift and go to state 178
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 165

    (97) post_unary_expr -> post_unary_expr [ expression ] .

    [               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    (               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    PLUSPLUS        reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    MINUSMINUS      reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    .               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    RARROW          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    +               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    -               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    *               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    /               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGAND          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGOR           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LOGNEQ          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    RSHIFT          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    <               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    >               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    LEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    GEQ             reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ^               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ?               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ]               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    =               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ADDEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    SUBEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    MULTEQ          reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    DIVEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    MODEQ           reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ,               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    ;               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    )               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    }               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)
    :               reduce using rule 97 (post_unary_expr -> post_unary_expr [ expression ] .)


state 166

    (99) post_unary_expr -> post_unary_expr ( expressions ) .

    [               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    (               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    PLUSPLUS        reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MINUSMINUS      reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    .               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RARROW          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    +               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    -               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    *               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    /               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGAND          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGOR           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LOGNEQ          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    RSHIFT          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    <               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    >               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    LEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    GEQ             reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ^               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ?               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ]               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    =               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ADDEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    SUBEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MULTEQ          reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    DIVEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    MODEQ           reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ,               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    ;               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    )               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    }               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)
    :               reduce using rule 99 (post_unary_expr -> post_unary_expr ( expressions ) .)


state 167

    (62) expressions -> expression , expressions .

    }               reduce using rule 62 (expressions -> expression , expressions .)
    )               reduce using rule 62 (expressions -> expression , expressions .)


state 168

    (30) func_def -> type ID ( params ) { statements } .

    INCLUDE         reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    ;               reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    VOID            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CHAR            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    SHORT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    INT             reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    LONG            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    FLOAT           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    DOUBLE          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    STRUCT          reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    CLASS           reduce using rule 30 (func_def -> type ID ( params ) { statements } .)
    $end            reduce using rule 30 (func_def -> type ID ( params ) { statements } .)


state 169

    (48) statement -> { stats_or_null } .

    ;               reduce using rule 48 (statement -> { stats_or_null } .)
    {               reduce using rule 48 (statement -> { stats_or_null } .)
    (               reduce using rule 48 (statement -> { stats_or_null } .)
    IF              reduce using rule 48 (statement -> { stats_or_null } .)
    WHILE           reduce using rule 48 (statement -> { stats_or_null } .)
    DO              reduce using rule 48 (statement -> { stats_or_null } .)
    FOR             reduce using rule 48 (statement -> { stats_or_null } .)
    BREAK           reduce using rule 48 (statement -> { stats_or_null } .)
    CONTINUE        reduce using rule 48 (statement -> { stats_or_null } .)
    RETURN          reduce using rule 48 (statement -> { stats_or_null } .)
    VOID            reduce using rule 48 (statement -> { stats_or_null } .)
    CHAR            reduce using rule 48 (statement -> { stats_or_null } .)
    SHORT           reduce using rule 48 (statement -> { stats_or_null } .)
    INT             reduce using rule 48 (statement -> { stats_or_null } .)
    LONG            reduce using rule 48 (statement -> { stats_or_null } .)
    FLOAT           reduce using rule 48 (statement -> { stats_or_null } .)
    DOUBLE          reduce using rule 48 (statement -> { stats_or_null } .)
    STRUCT          reduce using rule 48 (statement -> { stats_or_null } .)
    CLASS           reduce using rule 48 (statement -> { stats_or_null } .)
    PLUSPLUS        reduce using rule 48 (statement -> { stats_or_null } .)
    MINUSMINUS      reduce using rule 48 (statement -> { stats_or_null } .)
    +               reduce using rule 48 (statement -> { stats_or_null } .)
    -               reduce using rule 48 (statement -> { stats_or_null } .)
    !               reduce using rule 48 (statement -> { stats_or_null } .)
    ID              reduce using rule 48 (statement -> { stats_or_null } .)
    NUMBER          reduce using rule 48 (statement -> { stats_or_null } .)
    CHR             reduce using rule 48 (statement -> { stats_or_null } .)
    STR             reduce using rule 48 (statement -> { stats_or_null } .)
    }               reduce using rule 48 (statement -> { stats_or_null } .)


state 170

    (45) conditional -> IF ( expression . ) { stats_or_null }
    (46) conditional -> IF ( expression . ) { stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression . ) { stats_or_null } ELSE { stats_or_null }
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    )               shift and go to state 179
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 171

    (51) iteration -> WHILE ( expression . ) { stats_or_null }
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    )               shift and go to state 180
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 172

    (52) iteration -> DO { stats_or_null . } WHILE ( expression ) ;

    }               shift and go to state 181


state 173

    (53) iteration -> FOR ( expr_or_null_or_init . ; expr_or_null ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 182


state 174

    (56) expr_or_null_or_init -> expr_or_null .

    ;               reduce using rule 56 (expr_or_null_or_init -> expr_or_null .)


state 175

    (57) expr_or_null_or_init -> usual_dec .

    ;               reduce using rule 57 (expr_or_null_or_init -> usual_dec .)


state 176

    (54) expr_or_null -> expression .
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    ;               reduce using rule 54 (expr_or_null -> expression .)
    )               reduce using rule 54 (expr_or_null -> expression .)
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 177

    (55) expr_or_null -> empty .

    ;               reduce using rule 55 (expr_or_null -> empty .)
    )               reduce using rule 55 (expr_or_null -> empty .)


state 178

    (72) tern_expr -> tern_expr ? tern_expr : tern_expr .
    (72) tern_expr -> tern_expr . ? tern_expr : tern_expr

    ?               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ]               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    =               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ADDEQ           reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    SUBEQ           reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    MULTEQ          reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    DIVEQ           reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    MODEQ           reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ,               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    ;               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    )               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    }               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)
    :               reduce using rule 72 (tern_expr -> tern_expr ? tern_expr : tern_expr .)

  ! ?               [ shift and go to state 77 ]


state 179

    (45) conditional -> IF ( expression ) . { stats_or_null }
    (46) conditional -> IF ( expression ) . { stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression ) . { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 183


state 180

    (51) iteration -> WHILE ( expression ) . { stats_or_null }

    {               shift and go to state 184


state 181

    (52) iteration -> DO { stats_or_null } . WHILE ( expression ) ;

    WHILE           shift and go to state 185


state 182

    (53) iteration -> FOR ( expr_or_null_or_init ; . expr_or_null ; expr_or_null ) { stats_or_null }
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (116) empty -> .
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    ;               reduce using rule 116 (empty -> .)
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expr_or_null                   shift and go to state 186
    expression                     shift and go to state 176
    empty                          shift and go to state 177
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 183

    (45) conditional -> IF ( expression ) { . stats_or_null }
    (46) conditional -> IF ( expression ) { . stats_or_null } ELSE conditional
    (47) conditional -> IF ( expression ) { . stats_or_null } ELSE { stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 117
    stats_or_null                  shift and go to state 187
    conditional                    shift and go to state 120
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    decl                           shift and go to state 119
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 184

    (51) iteration -> WHILE ( expression ) { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 117
    stats_or_null                  shift and go to state 188
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 185

    (52) iteration -> DO { stats_or_null } WHILE . ( expression ) ;

    (               shift and go to state 189


state 186

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null . ; expr_or_null ) { stats_or_null }

    ;               shift and go to state 190


state 187

    (45) conditional -> IF ( expression ) { stats_or_null . }
    (46) conditional -> IF ( expression ) { stats_or_null . } ELSE conditional
    (47) conditional -> IF ( expression ) { stats_or_null . } ELSE { stats_or_null }

    }               shift and go to state 191


state 188

    (51) iteration -> WHILE ( expression ) { stats_or_null . }

    }               shift and go to state 192


state 189

    (52) iteration -> DO { stats_or_null } WHILE ( . expression ) ;
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 193
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 190

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; . expr_or_null ) { stats_or_null }
    (54) expr_or_null -> . expression
    (55) expr_or_null -> . empty
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (116) empty -> .
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    (               shift and go to state 43
    )               reduce using rule 116 (empty -> .)
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expr_or_null                   shift and go to state 194
    expression                     shift and go to state 176
    empty                          shift and go to state 177
    tern_expr                      shift and go to state 44
    bin_expr                       shift and go to state 45
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 191

    (45) conditional -> IF ( expression ) { stats_or_null } .
    (46) conditional -> IF ( expression ) { stats_or_null } . ELSE conditional
    (47) conditional -> IF ( expression ) { stats_or_null } . ELSE { stats_or_null }

    ;               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    {               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    (               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    IF              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    DO              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    FOR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    VOID            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    INT             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    LONG            reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    +               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    -               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    !               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    ID              reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    CHR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    STR             reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    }               reduce using rule 45 (conditional -> IF ( expression ) { stats_or_null } .)
    ELSE            shift and go to state 195


state 192

    (51) iteration -> WHILE ( expression ) { stats_or_null } .

    ;               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    {               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    (               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    IF              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    WHILE           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DO              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FOR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    BREAK           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CONTINUE        reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    RETURN          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    VOID            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHAR            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    SHORT           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    INT             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    LONG            reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    FLOAT           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    DOUBLE          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STRUCT          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CLASS           reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    +               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    -               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    !               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    ID              reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    NUMBER          reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    CHR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    STR             reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)
    }               reduce using rule 51 (iteration -> WHILE ( expression ) { stats_or_null } .)


state 193

    (52) iteration -> DO { stats_or_null } WHILE ( expression . ) ;
    (64) expression -> expression . = expression
    (65) expression -> expression . ADDEQ expression
    (66) expression -> expression . SUBEQ expression
    (67) expression -> expression . MULTEQ expression
    (68) expression -> expression . DIVEQ expression
    (69) expression -> expression . MODEQ expression

    )               shift and go to state 196
    =               shift and go to state 70
    ADDEQ           shift and go to state 71
    SUBEQ           shift and go to state 72
    MULTEQ          shift and go to state 73
    DIVEQ           shift and go to state 74
    MODEQ           shift and go to state 75


state 194

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null . ) { stats_or_null }

    )               shift and go to state 197


state 195

    (46) conditional -> IF ( expression ) { stats_or_null } ELSE . conditional
    (47) conditional -> IF ( expression ) { stats_or_null } ELSE . { stats_or_null }
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }

    {               shift and go to state 198
    IF              shift and go to state 123

    conditional                    shift and go to state 199

state 196

    (52) iteration -> DO { stats_or_null } WHILE ( expression ) . ;

    ;               shift and go to state 200


state 197

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) . { stats_or_null }

    {               shift and go to state 201


state 198

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    expression                     shift and go to state 117
    stats_or_null                  shift and go to state 202
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 199

    (46) conditional -> IF ( expression ) { stats_or_null } ELSE conditional .

    ;               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    {               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    (               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    IF              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    WHILE           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DO              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FOR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    BREAK           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CONTINUE        reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    RETURN          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    VOID            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHAR            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    SHORT           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    INT             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    LONG            reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    FLOAT           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    DOUBLE          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STRUCT          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CLASS           reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    PLUSPLUS        reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    MINUSMINUS      reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    +               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    -               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    !               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    ID              reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    NUMBER          reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    CHR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    STR             reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)
    }               reduce using rule 46 (conditional -> IF ( expression ) { stats_or_null } ELSE conditional .)


state 200

    (52) iteration -> DO { stats_or_null } WHILE ( expression ) ; .

    ;               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    {               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    (               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    IF              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    WHILE           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DO              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FOR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    BREAK           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    RETURN          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    VOID            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHAR            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    SHORT           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    INT             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    LONG            reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    FLOAT           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STRUCT          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CLASS           reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    +               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    -               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    !               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    ID              reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    NUMBER          reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    CHR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    STR             reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)
    }               reduce using rule 52 (iteration -> DO { stats_or_null } WHILE ( expression ) ; .)


state 201

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { . stats_or_null }
    (49) stats_or_null -> . statements
    (50) stats_or_null -> . empty
    (37) statements -> . statement statements
    (38) statements -> . statement
    (116) empty -> .
    (39) statement -> . expression ;
    (40) statement -> . decl ;
    (41) statement -> . conditional
    (42) statement -> . iteration
    (43) statement -> . jump ;
    (44) statement -> . ;
    (48) statement -> . { stats_or_null }
    (64) expression -> . expression = expression
    (65) expression -> . expression ADDEQ expression
    (66) expression -> . expression SUBEQ expression
    (67) expression -> . expression MULTEQ expression
    (68) expression -> . expression DIVEQ expression
    (69) expression -> . expression MODEQ expression
    (70) expression -> . ( expression )
    (71) expression -> . tern_expr
    (9) decl -> . usual_dec
    (10) decl -> . new_type_dec
    (45) conditional -> . IF ( expression ) { stats_or_null }
    (46) conditional -> . IF ( expression ) { stats_or_null } ELSE conditional
    (47) conditional -> . IF ( expression ) { stats_or_null } ELSE { stats_or_null }
    (51) iteration -> . WHILE ( expression ) { stats_or_null }
    (52) iteration -> . DO { stats_or_null } WHILE ( expression ) ;
    (53) iteration -> . FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }
    (58) jump -> . BREAK
    (59) jump -> . CONTINUE
    (60) jump -> . RETURN
    (61) jump -> . RETURN expression
    (72) tern_expr -> . tern_expr ? tern_expr : tern_expr
    (73) tern_expr -> . bin_expr
    (11) usual_dec -> . type declarators
    (22) new_type_dec -> . new_type ID { new_type_params }
    (23) new_type_dec -> . new_type ID { new_type_params } declarators
    (24) new_type_dec -> . new_type ID declarators
    (74) bin_expr -> . pre_unary_expr bin_op bin_expr
    (75) bin_expr -> . pre_unary_expr
    (109) type -> . VOID
    (110) type -> . CHAR
    (111) type -> . SHORT
    (112) type -> . INT
    (113) type -> . LONG
    (114) type -> . FLOAT
    (115) type -> . DOUBLE
    (25) new_type -> . STRUCT
    (26) new_type -> . CLASS
    (91) pre_unary_expr -> . PLUSPLUS pre_unary_expr
    (92) pre_unary_expr -> . MINUSMINUS pre_unary_expr
    (93) pre_unary_expr -> . + pre_unary_expr
    (94) pre_unary_expr -> . - pre_unary_expr
    (95) pre_unary_expr -> . ! pre_unary_expr
    (96) pre_unary_expr -> . post_unary_expr
    (97) post_unary_expr -> . post_unary_expr [ expression ]
    (98) post_unary_expr -> . post_unary_expr ( )
    (99) post_unary_expr -> . post_unary_expr ( expressions )
    (100) post_unary_expr -> . post_unary_expr PLUSPLUS
    (101) post_unary_expr -> . post_unary_expr MINUSMINUS
    (102) post_unary_expr -> . post_unary_expr . ID
    (103) post_unary_expr -> . post_unary_expr RARROW ID
    (104) post_unary_expr -> . element
    (105) element -> . ID
    (106) element -> . NUMBER
    (107) element -> . CHR
    (108) element -> . STR

    }               reduce using rule 116 (empty -> .)
    ;               shift and go to state 118
    {               shift and go to state 113
    (               shift and go to state 43
    IF              shift and go to state 123
    WHILE           shift and go to state 124
    DO              shift and go to state 125
    FOR             shift and go to state 126
    BREAK           shift and go to state 127
    CONTINUE        shift and go to state 128
    RETURN          shift and go to state 129
    VOID            shift and go to state 12
    CHAR            shift and go to state 13
    SHORT           shift and go to state 14
    INT             shift and go to state 15
    LONG            shift and go to state 16
    FLOAT           shift and go to state 17
    DOUBLE          shift and go to state 18
    STRUCT          shift and go to state 19
    CLASS           shift and go to state 20
    PLUSPLUS        shift and go to state 47
    MINUSMINUS      shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    !               shift and go to state 51
    ID              shift and go to state 40
    NUMBER          shift and go to state 54
    CHR             shift and go to state 55
    STR             shift and go to state 56

    stats_or_null                  shift and go to state 203
    statements                     shift and go to state 152
    empty                          shift and go to state 153
    statement                      shift and go to state 116
    expression                     shift and go to state 117
    decl                           shift and go to state 119
    conditional                    shift and go to state 120
    iteration                      shift and go to state 121
    jump                           shift and go to state 122
    tern_expr                      shift and go to state 44
    usual_dec                      shift and go to state 8
    new_type_dec                   shift and go to state 9
    bin_expr                       shift and go to state 45
    type                           shift and go to state 112
    new_type                       shift and go to state 11
    pre_unary_expr                 shift and go to state 46
    post_unary_expr                shift and go to state 52
    element                        shift and go to state 53

state 202

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null . }

    }               shift and go to state 204


state 203

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null . }

    }               shift and go to state 205


state 204

    (47) conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .

    ;               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    {               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    (               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    IF              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    WHILE           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DO              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FOR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    BREAK           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CONTINUE        reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    RETURN          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    VOID            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHAR            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    SHORT           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    INT             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    LONG            reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    FLOAT           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    DOUBLE          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STRUCT          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CLASS           reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    PLUSPLUS        reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    MINUSMINUS      reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    +               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    -               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    !               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    ID              reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    NUMBER          reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    CHR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    STR             reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)
    }               reduce using rule 47 (conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null } .)


state 205

    (53) iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .

    ;               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    {               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    (               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    IF              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    WHILE           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DO              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FOR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    BREAK           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CONTINUE        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    RETURN          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    VOID            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHAR            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    SHORT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    INT             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    LONG            reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    FLOAT           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    DOUBLE          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STRUCT          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CLASS           reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    PLUSPLUS        reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    MINUSMINUS      reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    +               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    -               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    !               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    ID              reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    NUMBER          reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    CHR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    STR             reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)
    }               reduce using rule 53 (iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 136 resolved as shift
WARNING: shift/reduce conflict for ADDEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for SUBEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for MULTEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVEQ in state 136 resolved as shift
WARNING: shift/reduce conflict for MODEQ in state 136 resolved as shift
