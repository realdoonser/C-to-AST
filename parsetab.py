
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' ';'\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        assignment_expr : ID assignmenteq_op expression\n    \n        assignmenteq_op     : '='\n                            | MULTEQ\n                            | ADDEQ\n                            | SUBEQ\n                            | MODEQ\n                            | DIVEQ\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression  : bin_expr\n                    | assignment_expr\n    \n        expression  : bin_expr '?' bin_expr ':' bin_expr\n    \n        bin_expr    : pre_unary_expr bin_op bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        bin_op      : '+'\n                    | '-'\n                    | '*'\n                    | '/'\n                    | LOGAND\n                    | LOGOR\n                    | LOGEQ\n                    | LOGNEQ\n                    | LSHIFT\n                    | RSHIFT\n                    | '<'\n                    | '>'\n                    | LEQ\n                    | GEQ\n                    | '^'\t\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,22,112,142,146,160,],[4,4,4,-5,-7,-6,-30,-29,-28,-27,]),'VOID':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[11,11,11,-5,-7,-6,11,11,11,11,11,11,11,-30,11,-41,-38,-39,-26,-29,-28,-36,-37,-40,11,11,-27,-45,11,11,-42,-48,11,-43,-49,11,-44,-50,]),'CHAR':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[12,12,12,-5,-7,-6,12,12,12,12,12,12,12,-30,12,-41,-38,-39,-26,-29,-28,-36,-37,-40,12,12,-27,-45,12,12,-42,-48,12,-43,-49,12,-44,-50,]),'SHORT':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[13,13,13,-5,-7,-6,13,13,13,13,13,13,13,-30,13,-41,-38,-39,-26,-29,-28,-36,-37,-40,13,13,-27,-45,13,13,-42,-48,13,-43,-49,13,-44,-50,]),'INT':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[14,14,14,-5,-7,-6,14,14,14,14,14,14,14,-30,14,-41,-38,-39,-26,-29,-28,-36,-37,-40,14,14,-27,-45,14,14,-42,-48,14,-43,-49,14,-44,-50,]),'LONG':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[15,15,15,-5,-7,-6,15,15,15,15,15,15,15,-30,15,-41,-38,-39,-26,-29,-28,-36,-37,-40,15,15,-27,-45,15,15,-42,-48,15,-43,-49,15,-44,-50,]),'FLOAT':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[16,16,16,-5,-7,-6,16,16,16,16,16,16,16,-30,16,-41,-38,-39,-26,-29,-28,-36,-37,-40,16,16,-27,-45,16,16,-42,-48,16,-43,-49,16,-44,-50,]),'DOUBLE':([0,2,3,4,6,22,28,32,59,63,64,108,110,112,113,115,117,118,140,142,146,148,149,150,153,154,160,161,175,176,183,184,190,191,192,193,196,197,],[17,17,17,-5,-7,-6,17,17,17,17,17,17,17,-30,17,-41,-38,-39,-26,-29,-28,-36,-37,-40,17,17,-27,-45,17,17,-42,-48,17,-43,-49,17,-44,-50,]),'STRUCT':([0,2,3,4,6,22,63,108,110,112,113,115,117,118,142,146,148,149,150,153,160,161,175,176,183,184,190,191,192,193,196,197,],[18,18,18,-5,-7,-6,18,18,18,-30,18,-41,-38,-39,-29,-28,-36,-37,-40,18,-27,-45,18,18,-42,-48,18,-43,-49,18,-44,-50,]),'CLASS':([0,2,3,4,6,22,63,108,110,112,113,115,117,118,142,146,148,149,150,153,160,161,175,176,183,184,190,191,192,193,196,197,],[19,19,19,-5,-7,-6,19,19,19,-30,19,-41,-38,-39,-29,-28,-36,-37,-40,19,-27,-45,19,19,-42,-48,19,-43,-49,19,-44,-50,]),'$end':([1,2,3,4,6,20,21,22,112,142,146,160,],[0,-3,-4,-5,-7,-1,-2,-6,-30,-29,-28,-27,]),';':([5,7,8,23,24,25,26,35,37,38,40,41,42,48,49,50,51,52,53,54,55,56,63,72,90,91,92,93,94,95,98,99,105,107,108,110,113,114,115,116,117,118,119,124,125,126,128,130,132,134,135,136,137,139,148,149,150,153,154,155,157,158,161,165,166,167,168,169,170,174,175,176,178,183,184,188,190,191,192,193,196,197,],[22,-8,-9,-15,-10,-12,-13,-16,-102,-17,-68,-69,-72,-93,-101,-103,-104,-105,-11,-15,-14,-19,115,-18,-88,-102,-89,-90,-91,-92,-97,-98,139,140,115,115,115,148,-41,149,-38,-39,150,-62,-63,-64,-55,-71,-95,-99,-100,-16,-20,-21,-36,-37,-40,115,-113,-65,-94,-96,-45,174,-53,-54,-51,-52,-70,-113,115,115,182,-42,-48,192,115,-43,-49,115,-44,-50,]),'ID':([9,10,11,12,13,14,15,16,17,18,19,29,30,31,33,43,44,45,46,47,57,60,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,100,101,108,109,110,113,115,117,118,126,138,148,149,150,151,152,153,154,156,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[23,27,-106,-107,-108,-109,-110,-111,-112,-22,-23,37,54,37,54,91,91,91,91,91,37,54,37,37,-56,-57,-58,-59,-60,-61,91,91,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,37,37,134,135,37,54,37,37,-41,-38,-39,37,37,-36,-37,-40,37,37,37,37,91,-45,37,37,37,37,37,-42,-48,37,-43,-49,37,-44,-50,]),'(':([23,37,48,49,50,51,52,54,91,98,99,120,121,123,132,134,135,157,158,177,],[28,-102,97,-101,-103,-104,-105,102,-102,-97,-98,151,152,154,-95,-99,-100,-94,-96,181,]),'=':([23,26,35,37,38,54,72,136,],[-15,31,-16,66,-17,-15,-18,-16,]),',':([23,25,26,35,36,37,38,40,41,42,48,49,50,51,52,54,55,56,61,72,90,91,92,93,94,95,98,99,104,128,130,132,134,135,136,137,157,158,170,],[-15,30,-13,-16,64,-102,-17,-68,-69,-72,-93,-101,-103,-104,-105,-15,-14,-19,-33,-18,-88,-102,-89,-90,-91,-92,-97,-98,138,-55,-71,-95,-99,-100,-16,-20,-94,-96,-70,]),'[':([23,37,48,49,50,51,52,54,91,98,99,132,134,135,157,158,],[29,-102,96,-101,-103,-104,-105,29,-102,-97,-98,-95,-99,-100,-94,-96,]),'{':([27,31,35,62,63,108,110,113,115,117,118,122,148,149,150,153,161,171,172,175,176,183,184,187,189,190,191,192,193,196,197,],[32,57,63,108,110,110,110,110,-41,-38,-39,153,-36,-37,-40,110,-45,175,176,110,110,-42,-48,190,193,110,-43,-49,110,-44,-50,]),')':([28,34,36,37,38,40,41,42,48,49,50,51,52,54,61,72,90,91,92,93,94,95,97,98,99,102,104,127,128,130,132,133,134,135,136,157,158,159,162,163,168,169,170,182,185,186,],[35,62,-32,-102,-17,-68,-69,-72,-93,-101,-103,-104,-105,-15,-33,-18,-88,-102,-89,-90,-91,-92,132,-97,-98,136,-67,-31,-55,-71,-95,158,-99,-100,-16,-94,-96,-66,171,172,-51,-52,-70,-113,188,189,]),']':([29,37,39,40,41,42,48,49,50,51,52,90,91,92,93,94,95,98,99,128,130,131,132,134,135,157,158,170,],[38,-102,72,-68,-69,-72,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-55,-71,157,-95,-99,-100,-94,-96,-70,]),'PLUSPLUS':([29,31,37,43,44,45,46,47,48,49,50,51,52,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,97,98,99,108,110,113,115,117,118,126,132,134,135,138,148,149,150,151,152,153,154,156,157,158,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[43,43,-102,43,43,43,43,43,98,-101,-103,-104,-105,43,43,43,-56,-57,-58,-59,-60,-61,43,43,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-102,43,43,-97,-98,43,43,43,-41,-38,-39,43,-95,-99,-100,43,-36,-37,-40,43,43,43,43,43,-94,-96,-45,43,43,43,43,43,-42,-48,43,-43,-49,43,-44,-50,]),'MINUSMINUS':([29,31,37,43,44,45,46,47,48,49,50,51,52,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,97,98,99,108,110,113,115,117,118,126,132,134,135,138,148,149,150,151,152,153,154,156,157,158,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[44,44,-102,44,44,44,44,44,99,-101,-103,-104,-105,44,44,44,-56,-57,-58,-59,-60,-61,44,44,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-102,44,44,-97,-98,44,44,44,-41,-38,-39,44,-95,-99,-100,44,-36,-37,-40,44,44,44,44,44,-94,-96,-45,44,44,44,44,44,-42,-48,44,-43,-49,44,-44,-50,]),'+':([29,31,37,42,43,44,45,46,47,48,49,50,51,52,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,108,110,113,115,117,118,126,132,134,135,138,148,149,150,151,152,153,154,156,157,158,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[45,45,-102,75,45,45,45,45,45,-93,-101,-103,-104,-105,45,45,45,-56,-57,-58,-59,-60,-61,45,45,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-102,-89,-90,-91,-92,45,45,-97,-98,45,45,45,-41,-38,-39,45,-95,-99,-100,45,-36,-37,-40,45,45,45,45,45,-94,-96,-45,45,45,45,45,45,-42,-48,45,-43,-49,45,-44,-50,]),'-':([29,31,37,42,43,44,45,46,47,48,49,50,51,52,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,108,110,113,115,117,118,126,132,134,135,138,148,149,150,151,152,153,154,156,157,158,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[46,46,-102,76,46,46,46,46,46,-93,-101,-103,-104,-105,46,46,46,-56,-57,-58,-59,-60,-61,46,46,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-102,-89,-90,-91,-92,46,46,-97,-98,46,46,46,-41,-38,-39,46,-95,-99,-100,46,-36,-37,-40,46,46,46,46,46,-94,-96,-45,46,46,46,46,46,-42,-48,46,-43,-49,46,-44,-50,]),'!':([29,31,43,44,45,46,47,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,108,110,113,115,117,118,126,138,148,149,150,151,152,153,154,156,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[47,47,47,47,47,47,47,47,47,47,-56,-57,-58,-59,-60,-61,47,47,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,47,47,47,47,47,-41,-38,-39,47,47,-36,-37,-40,47,47,47,47,47,-45,47,47,47,47,47,-42,-48,47,-43,-49,47,-44,-50,]),'NUMBER':([29,31,43,44,45,46,47,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,108,110,113,115,117,118,126,138,148,149,150,151,152,153,154,156,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[50,50,50,50,50,50,50,50,50,50,-56,-57,-58,-59,-60,-61,50,50,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,50,50,50,50,50,-41,-38,-39,50,50,-36,-37,-40,50,50,50,50,50,-45,50,50,50,50,50,-42,-48,50,-43,-49,50,-44,-50,]),'CHR':([29,31,43,44,45,46,47,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,108,110,113,115,117,118,126,138,148,149,150,151,152,153,154,156,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[51,51,51,51,51,51,51,51,51,51,-56,-57,-58,-59,-60,-61,51,51,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,51,51,51,51,51,-41,-38,-39,51,51,-36,-37,-40,51,51,51,51,51,-45,51,51,51,51,51,-42,-48,51,-43,-49,51,-44,-50,]),'STR':([29,31,43,44,45,46,47,57,63,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,108,110,113,115,117,118,126,138,148,149,150,151,152,153,154,156,161,174,175,176,181,182,183,184,190,191,192,193,196,197,],[52,52,52,52,52,52,52,52,52,52,-56,-57,-58,-59,-60,-61,52,52,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,52,52,52,52,52,-41,-38,-39,52,52,-36,-37,-40,52,52,52,52,52,-45,52,52,52,52,52,-42,-48,52,-43,-49,52,-44,-50,]),'.':([37,48,49,50,51,52,91,98,99,132,134,135,157,158,],[-102,100,-101,-103,-104,-105,-102,-97,-98,-95,-99,-100,-94,-96,]),'RARROW':([37,48,49,50,51,52,91,98,99,132,134,135,157,158,],[-102,101,-101,-103,-104,-105,-102,-97,-98,-95,-99,-100,-94,-96,]),'*':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,77,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'/':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,78,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LOGAND':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,79,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LOGOR':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,80,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LOGEQ':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,81,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LOGNEQ':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,82,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LSHIFT':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,83,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'RSHIFT':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,84,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'<':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,85,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'>':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,86,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'LEQ':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,87,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'GEQ':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,88,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'^':([37,42,48,49,50,51,52,90,91,92,93,94,95,98,99,132,134,135,157,158,],[-102,89,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-95,-99,-100,-94,-96,]),'?':([37,40,42,48,49,50,51,52,90,91,92,93,94,95,98,99,130,132,134,135,157,158,],[-102,73,-72,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,-71,-95,-99,-100,-94,-96,]),'}':([37,40,41,42,48,49,50,51,52,58,59,63,90,91,92,93,94,95,98,99,103,104,106,108,110,111,113,115,117,118,128,130,132,134,135,140,141,143,144,145,147,148,149,150,153,157,158,159,161,164,170,175,176,179,180,183,184,190,191,192,193,194,195,196,197,],[-102,-68,-69,-72,-93,-101,-103,-104,-105,105,-25,112,-88,-102,-89,-90,-91,-92,-97,-98,137,-67,-24,142,-113,146,-35,-41,-38,-39,-55,-71,-95,-99,-100,-26,160,161,-46,-47,-34,-36,-37,-40,-113,-94,-96,-66,-45,173,-70,-113,-113,183,184,-42,-48,-113,-43,-49,-113,196,197,-44,-50,]),'MULTEQ':([37,],[67,]),'ADDEQ':([37,],[68,]),'SUBEQ':([37,],[69,]),'MODEQ':([37,],[70,]),'DIVEQ':([37,],[71,]),':':([42,48,49,50,51,52,90,91,92,93,94,95,98,99,129,130,132,134,135,157,158,],[-72,-93,-101,-103,-104,-105,-88,-102,-89,-90,-91,-92,-97,-98,156,-71,-95,-99,-100,-94,-96,]),'IF':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,187,190,191,192,193,196,197,],[120,120,120,120,-41,-38,-39,-36,-37,-40,120,-45,120,120,-42,-48,120,120,-43,-49,120,-44,-50,]),'WHILE':([63,108,110,113,115,117,118,148,149,150,153,161,173,175,176,183,184,190,191,192,193,196,197,],[121,121,121,121,-41,-38,-39,-36,-37,-40,121,-45,177,121,121,-42,-48,121,-43,-49,121,-44,-50,]),'DO':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,190,191,192,193,196,197,],[122,122,122,122,-41,-38,-39,-36,-37,-40,122,-45,122,122,-42,-48,122,-43,-49,122,-44,-50,]),'FOR':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,190,191,192,193,196,197,],[123,123,123,123,-41,-38,-39,-36,-37,-40,123,-45,123,123,-42,-48,123,-43,-49,123,-44,-50,]),'BREAK':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,190,191,192,193,196,197,],[124,124,124,124,-41,-38,-39,-36,-37,-40,124,-45,124,124,-42,-48,124,-43,-49,124,-44,-50,]),'CONTINUE':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,190,191,192,193,196,197,],[125,125,125,125,-41,-38,-39,-36,-37,-40,125,-45,125,125,-42,-48,125,-43,-49,125,-44,-50,]),'RETURN':([63,108,110,113,115,117,118,148,149,150,153,161,175,176,183,184,190,191,192,193,196,197,],[126,126,126,126,-41,-38,-39,-36,-37,-40,126,-45,126,126,-42,-48,126,-43,-49,126,-44,-50,]),'ELSE':([183,],[187,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,20,21,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,63,108,110,113,153,175,176,190,193,],[5,5,5,116,116,116,116,116,116,116,116,116,]),'func_def':([0,2,3,],[6,6,6,]),'usual_dec':([0,2,3,63,108,110,113,153,154,175,176,190,193,],[7,7,7,7,7,7,7,7,167,7,7,7,7,]),'new_type_dec':([0,2,3,63,108,110,113,153,175,176,190,193,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,3,28,32,59,63,64,108,110,113,153,154,175,176,190,193,],[9,9,9,33,60,60,109,33,109,109,109,109,109,109,109,109,109,]),'new_type':([0,2,3,63,108,110,113,153,175,176,190,193,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'declarators':([9,30,60,109,],[24,53,107,24,]),'declarator_1':([9,30,60,109,],[25,25,25,25,]),'declarator_2':([9,30,33,60,109,],[26,26,61,26,26,]),'params':([28,64,],[34,127,]),'param':([28,64,],[36,36,]),'expression':([29,31,57,63,65,96,97,108,110,113,126,138,151,152,153,154,174,175,176,181,182,190,193,],[39,56,104,114,128,131,104,114,114,114,155,104,162,163,114,168,168,114,114,185,168,114,114,]),'bin_expr':([29,31,57,63,65,73,74,96,97,108,110,113,126,138,151,152,153,154,156,174,175,176,181,182,190,193,],[40,40,40,40,40,129,130,40,40,40,40,40,40,40,40,40,40,40,170,40,40,40,40,40,40,40,]),'assignment_expr':([29,31,57,63,65,96,97,108,110,113,126,138,151,152,153,154,174,175,176,181,182,190,193,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'pre_unary_expr':([29,31,43,44,45,46,47,57,63,65,73,74,96,97,108,110,113,126,138,151,152,153,154,156,174,175,176,181,182,190,193,],[42,42,90,92,93,94,95,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'post_unary_expr':([29,31,43,44,45,46,47,57,63,65,73,74,96,97,108,110,113,126,138,151,152,153,154,156,174,175,176,181,182,190,193,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'element':([29,31,43,44,45,46,47,57,63,65,73,74,96,97,108,110,113,126,138,151,152,153,154,156,174,175,176,181,182,190,193,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'initializer':([31,],[55,]),'new_type_params':([32,59,],[58,106,]),'new_type_param':([32,59,],[59,59,]),'assignmenteq_op':([37,],[65,]),'bin_op':([42,],[74,]),'expressions':([57,97,138,],[103,133,159,]),'statements':([63,108,110,113,153,175,176,190,193,],[111,141,144,147,144,144,144,144,144,]),'statement':([63,108,110,113,153,175,176,190,193,],[113,113,113,113,113,113,113,113,113,]),'conditional':([63,108,110,113,153,175,176,187,190,193,],[117,117,117,117,117,117,117,191,117,117,]),'iteration':([63,108,110,113,153,175,176,190,193,],[118,118,118,118,118,118,118,118,118,]),'jump':([63,108,110,113,153,175,176,190,193,],[119,119,119,119,119,119,119,119,119,]),'stats_or_null':([110,153,175,176,190,193,],[143,164,179,180,194,195,]),'empty':([110,153,154,174,175,176,182,190,193,],[145,145,169,169,145,145,169,145,145,]),'expr_or_null_or_init':([154,],[165,]),'expr_or_null':([154,174,182,],[166,178,186,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',37),
  ('program -> external_decl program','program',2,'p_program','parser.py',38),
  ('program -> include','program',1,'p_program_end','parser.py',45),
  ('program -> external_decl','program',1,'p_program_end','parser.py',46),
  ('include -> INCLUDE','include',1,'p_include','parser.py',57),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',66),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',67),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',74),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',75),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',82),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',91),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',98),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',105),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',112),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',119),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',126),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',133),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',140),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',147),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',148),
  ('new_type_dec -> new_type ID { new_type_params } ;','new_type_dec',6,'p_new_type_dec','parser.py',163),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',170),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',171),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',178),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',185),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',192),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',201),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',208),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',215),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',222),
  ('params -> param , params','params',3,'p_params','parser.py',229),
  ('params -> param','params',1,'p_params_end','parser.py',236),
  ('param -> type declarator_2','param',2,'p_param','parser.py',243),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',252),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',262),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',269),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',270),
  ('statement -> conditional','statement',1,'p_statement','parser.py',271),
  ('statement -> iteration','statement',1,'p_statement','parser.py',272),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',273),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',280),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',289),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',296),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',303),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',312),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',319),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',320),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',330),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',337),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',344),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',351),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',352),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',359),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',360),
  ('assignment_expr -> ID assignmenteq_op expression','assignment_expr',3,'p_assignment_expr','parser.py',367),
  ('assignmenteq_op -> =','assignmenteq_op',1,'p_assignment_op','parser.py',375),
  ('assignmenteq_op -> MULTEQ','assignmenteq_op',1,'p_assignment_op','parser.py',376),
  ('assignmenteq_op -> ADDEQ','assignmenteq_op',1,'p_assignment_op','parser.py',377),
  ('assignmenteq_op -> SUBEQ','assignmenteq_op',1,'p_assignment_op','parser.py',378),
  ('assignmenteq_op -> MODEQ','assignmenteq_op',1,'p_assignment_op','parser.py',379),
  ('assignmenteq_op -> DIVEQ','assignmenteq_op',1,'p_assignment_op','parser.py',380),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',387),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',388),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',389),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',396),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',407),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',414),
  ('expression -> bin_expr','expression',1,'p_expression','parser.py',421),
  ('expression -> assignment_expr','expression',1,'p_expression','parser.py',422),
  ('expression -> bin_expr ? bin_expr : bin_expr','expression',5,'p_expression_wternary','parser.py',429),
  ('bin_expr -> pre_unary_expr bin_op bin_expr','bin_expr',3,'p_binary_expr','parser.py',436),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',443),
  ('bin_op -> +','bin_op',1,'p_binary_operator','parser.py',450),
  ('bin_op -> -','bin_op',1,'p_binary_operator','parser.py',451),
  ('bin_op -> *','bin_op',1,'p_binary_operator','parser.py',452),
  ('bin_op -> /','bin_op',1,'p_binary_operator','parser.py',453),
  ('bin_op -> LOGAND','bin_op',1,'p_binary_operator','parser.py',454),
  ('bin_op -> LOGOR','bin_op',1,'p_binary_operator','parser.py',455),
  ('bin_op -> LOGEQ','bin_op',1,'p_binary_operator','parser.py',456),
  ('bin_op -> LOGNEQ','bin_op',1,'p_binary_operator','parser.py',457),
  ('bin_op -> LSHIFT','bin_op',1,'p_binary_operator','parser.py',458),
  ('bin_op -> RSHIFT','bin_op',1,'p_binary_operator','parser.py',459),
  ('bin_op -> <','bin_op',1,'p_binary_operator','parser.py',460),
  ('bin_op -> >','bin_op',1,'p_binary_operator','parser.py',461),
  ('bin_op -> LEQ','bin_op',1,'p_binary_operator','parser.py',462),
  ('bin_op -> GEQ','bin_op',1,'p_binary_operator','parser.py',463),
  ('bin_op -> ^','bin_op',1,'p_binary_operator','parser.py',464),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',471),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',472),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',473),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',474),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',475),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',482),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',489),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',496),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',503),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',510),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',511),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',518),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',519),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_element','parser.py',526),
  ('element -> ID','element',1,'p_element','parser.py',533),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',540),
  ('element -> CHR','element',1,'p_element_const','parser.py',541),
  ('element -> STR','element',1,'p_element_const','parser.py',542),
  ('type -> VOID','type',1,'p_type','parser.py',551),
  ('type -> CHAR','type',1,'p_type','parser.py',552),
  ('type -> SHORT','type',1,'p_type','parser.py',553),
  ('type -> INT','type',1,'p_type','parser.py',554),
  ('type -> LONG','type',1,'p_type','parser.py',555),
  ('type -> FLOAT','type',1,'p_type','parser.py',556),
  ('type -> DOUBLE','type',1,'p_type','parser.py',557),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',564),
]
