
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=MULTEQDIVEQADDEQSUBEQleft?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        external_decl : ';'\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}'\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression  : expression '=' expression\n                    | expression ADDEQ expression\n                    | expression SUBEQ expression\n                    | expression MULTEQ expression\n                    | expression DIVEQ expression\n                    | expression MODEQ expression\n    \n        expression : '(' expression ')'\n    \n        expression : tern_expr\n    \n        tern_expr  : tern_expr '?' tern_expr ':' tern_expr\n    \n        tern_expr : bin_expr\n    \n        bin_expr    : pre_unary_expr bin_op bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        bin_op      : '+'\n                    | '-'\n                    | '*'\n                    | '/'\n                    | LOGAND\n                    | LOGOR\n                    | LOGEQ\n                    | LOGNEQ\n                    | LSHIFT\n                    | RSHIFT\n                    | '<'\n                    | '>'\n                    | LEQ\n                    | GEQ\n                    | '^'\t\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,7,23,113,148,152,166,],[4,4,4,-5,-8,-7,-6,-31,-30,-29,-28,]),';':([0,2,3,4,5,6,7,8,9,23,24,25,26,27,36,38,39,42,43,44,50,51,52,53,54,55,56,57,58,65,67,92,93,94,95,96,99,100,106,108,109,111,113,114,115,116,117,118,119,120,125,126,127,129,130,131,132,133,134,135,137,139,141,142,143,144,148,152,154,155,156,159,160,161,163,164,166,167,171,172,173,174,175,176,180,181,182,184,189,190,194,196,197,198,199,202,203,],[6,6,6,-5,23,-8,-7,-9,-10,-6,-16,-11,-13,-14,-17,-103,-18,-69,-71,-73,-94,-102,-104,-105,-106,-12,-16,-15,-20,116,-19,-89,-90,-91,-92,-93,-98,-99,-22,146,116,116,-31,116,154,-42,155,-39,-40,156,-56,-57,-58,-62,-63,-64,-65,-66,-67,-68,-72,-96,-100,-101,-17,-21,-30,-29,-37,-38,-41,116,-114,-59,-95,-97,-28,-46,180,-54,-55,-52,-53,-70,-114,116,116,188,-43,-49,198,116,-44,-50,116,-45,-51,]),'VOID':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[12,12,12,-5,-8,-7,-6,12,12,12,12,12,12,12,-31,12,-42,-39,-40,-27,-30,-29,-37,-38,-41,12,12,-28,-46,12,12,-43,-49,12,-44,-50,12,-45,-51,]),'CHAR':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[13,13,13,-5,-8,-7,-6,13,13,13,13,13,13,13,-31,13,-42,-39,-40,-27,-30,-29,-37,-38,-41,13,13,-28,-46,13,13,-43,-49,13,-44,-50,13,-45,-51,]),'SHORT':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[14,14,14,-5,-8,-7,-6,14,14,14,14,14,14,14,-31,14,-42,-39,-40,-27,-30,-29,-37,-38,-41,14,14,-28,-46,14,14,-43,-49,14,-44,-50,14,-45,-51,]),'INT':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[15,15,15,-5,-8,-7,-6,15,15,15,15,15,15,15,-31,15,-42,-39,-40,-27,-30,-29,-37,-38,-41,15,15,-28,-46,15,15,-43,-49,15,-44,-50,15,-45,-51,]),'LONG':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[16,16,16,-5,-8,-7,-6,16,16,16,16,16,16,16,-31,16,-42,-39,-40,-27,-30,-29,-37,-38,-41,16,16,-28,-46,16,16,-43,-49,16,-44,-50,16,-45,-51,]),'FLOAT':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[17,17,17,-5,-8,-7,-6,17,17,17,17,17,17,17,-31,17,-42,-39,-40,-27,-30,-29,-37,-38,-41,17,17,-28,-46,17,17,-43,-49,17,-44,-50,17,-45,-51,]),'DOUBLE':([0,2,3,4,6,7,23,29,33,61,65,66,109,111,113,114,116,118,119,146,148,152,154,155,156,159,160,166,167,181,182,189,190,196,197,198,199,202,203,],[18,18,18,-5,-8,-7,-6,18,18,18,18,18,18,18,-31,18,-42,-39,-40,-27,-30,-29,-37,-38,-41,18,18,-28,-46,18,18,-43,-49,18,-44,-50,18,-45,-51,]),'STRUCT':([0,2,3,4,6,7,23,65,109,111,113,114,116,118,119,148,152,154,155,156,159,166,167,181,182,189,190,196,197,198,199,202,203,],[19,19,19,-5,-8,-7,-6,19,19,19,-31,19,-42,-39,-40,-30,-29,-37,-38,-41,19,-28,-46,19,19,-43,-49,19,-44,-50,19,-45,-51,]),'CLASS':([0,2,3,4,6,7,23,65,109,111,113,114,116,118,119,148,152,154,155,156,159,166,167,181,182,189,190,196,197,198,199,202,203,],[20,20,20,-5,-8,-7,-6,20,20,20,-31,20,-42,-39,-40,-30,-29,-37,-38,-41,20,-28,-46,20,20,-43,-49,20,-44,-50,20,-45,-51,]),'$end':([1,2,3,4,6,7,21,22,23,113,148,152,166,],[0,-3,-4,-5,-8,-7,-1,-2,-6,-31,-30,-29,-28,]),'ID':([10,11,12,13,14,15,16,17,18,19,20,30,31,32,34,41,45,46,47,48,49,59,62,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,101,102,109,110,111,114,116,118,119,127,145,154,155,156,157,158,159,160,162,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[24,28,-107,-108,-109,-110,-111,-112,-113,-23,-24,38,56,38,56,38,38,38,38,38,38,38,56,38,38,38,38,38,38,38,38,38,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,38,38,141,142,38,56,38,38,-42,-39,-40,38,38,-37,-38,-41,38,38,38,38,38,-46,38,38,38,38,38,-43,-49,38,-44,-50,38,-45,-51,]),'(':([24,30,32,38,41,50,51,52,53,54,56,59,65,68,69,70,71,72,73,97,98,99,100,109,111,114,116,118,119,121,122,124,127,139,141,142,145,154,155,156,157,158,159,160,163,164,167,180,181,182,183,187,188,189,190,196,197,198,199,202,203,],[29,41,41,-103,41,98,-102,-104,-105,-106,103,41,41,41,41,41,41,41,41,41,41,-98,-99,41,41,41,-42,-39,-40,157,158,160,41,-96,-100,-101,41,-37,-38,-41,41,41,41,41,-95,-97,-46,41,41,41,187,41,41,-43,-49,41,-44,-50,41,-45,-51,]),'=':([24,27,36,38,39,40,42,43,44,50,51,52,53,54,56,58,67,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,143,161,163,164,168,169,174,176,191,],[-16,32,-17,-103,-18,68,-69,-71,-73,-94,-102,-104,-105,-106,-16,68,-19,68,-89,-90,-91,-92,-93,-98,-99,68,68,-62,-63,-64,-65,-66,68,-68,-72,68,-96,-100,-101,-17,68,-95,-97,68,68,68,-70,68,]),',':([24,26,27,36,37,38,39,42,43,44,50,51,52,53,54,56,57,58,63,67,92,93,94,95,96,99,100,105,129,130,131,132,133,134,135,137,139,141,142,143,144,163,164,176,],[-16,31,-14,-17,66,-103,-18,-69,-71,-73,-94,-102,-104,-105,-106,-16,-15,-20,-34,-19,-89,-90,-91,-92,-93,-98,-99,145,-62,-63,-64,-65,-66,-67,-68,-72,-96,-100,-101,-17,-21,-95,-97,-70,]),'[':([24,38,50,51,52,53,54,56,99,100,139,141,142,163,164,],[30,-103,97,-102,-104,-105,-106,30,-98,-99,-96,-100,-101,-95,-97,]),'{':([28,32,36,64,65,109,111,114,116,118,119,123,154,155,156,159,167,177,178,181,182,189,190,193,195,196,197,198,199,202,203,],[33,59,65,109,111,111,111,111,-42,-39,-40,159,-37,-38,-41,111,-46,181,182,111,111,-43,-49,196,199,111,-44,-50,111,-45,-51,]),')':([29,35,37,38,39,42,43,44,50,51,52,53,54,56,63,67,74,92,93,94,95,96,98,99,100,103,105,128,129,130,131,132,133,134,135,137,139,140,141,142,143,163,164,165,168,169,174,175,176,188,191,192,],[36,64,-33,-103,-18,-69,-71,-73,-94,-102,-104,-105,-106,-16,-34,-19,135,-89,-90,-91,-92,-93,139,-98,-99,143,-61,-32,-62,-63,-64,-65,-66,-67,-68,-72,-96,164,-100,-101,-17,-95,-97,-60,177,178,-52,-53,-70,-114,194,195,]),']':([30,38,40,42,43,44,50,51,52,53,54,92,93,94,95,96,99,100,129,130,131,132,133,134,135,137,138,139,141,142,163,164,176,],[39,-103,67,-69,-71,-73,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-62,-63,-64,-65,-66,-67,-68,-72,163,-96,-100,-101,-95,-97,-70,]),'PLUSPLUS':([30,32,38,41,45,46,47,48,49,50,51,52,53,54,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,100,109,111,114,116,118,119,127,139,141,142,145,154,155,156,157,158,159,160,162,163,164,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[45,45,-103,45,45,45,45,45,45,99,-102,-104,-105,-106,45,45,45,45,45,45,45,45,45,45,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,45,45,-98,-99,45,45,45,-42,-39,-40,45,-96,-100,-101,45,-37,-38,-41,45,45,45,45,45,-95,-97,-46,45,45,45,45,45,-43,-49,45,-44,-50,45,-45,-51,]),'MINUSMINUS':([30,32,38,41,45,46,47,48,49,50,51,52,53,54,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,100,109,111,114,116,118,119,127,139,141,142,145,154,155,156,157,158,159,160,162,163,164,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[46,46,-103,46,46,46,46,46,46,100,-102,-104,-105,-106,46,46,46,46,46,46,46,46,46,46,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,46,46,-98,-99,46,46,46,-42,-39,-40,46,-96,-100,-101,46,-37,-38,-41,46,46,46,46,46,-95,-97,-46,46,46,46,46,46,-43,-49,46,-44,-50,46,-45,-51,]),'+':([30,32,38,41,44,45,46,47,48,49,50,51,52,53,54,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,109,111,114,116,118,119,127,139,141,142,145,154,155,156,157,158,159,160,162,163,164,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[47,47,-103,47,77,47,47,47,47,47,-94,-102,-104,-105,-106,47,47,47,47,47,47,47,47,47,47,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,47,47,-98,-99,47,47,47,-42,-39,-40,47,-96,-100,-101,47,-37,-38,-41,47,47,47,47,47,-95,-97,-46,47,47,47,47,47,-43,-49,47,-44,-50,47,-45,-51,]),'-':([30,32,38,41,44,45,46,47,48,49,50,51,52,53,54,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,109,111,114,116,118,119,127,139,141,142,145,154,155,156,157,158,159,160,162,163,164,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[48,48,-103,48,78,48,48,48,48,48,-94,-102,-104,-105,-106,48,48,48,48,48,48,48,48,48,48,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,48,48,-98,-99,48,48,48,-42,-39,-40,48,-96,-100,-101,48,-37,-38,-41,48,48,48,48,48,-95,-97,-46,48,48,48,48,48,-43,-49,48,-44,-50,48,-45,-51,]),'!':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,109,111,114,116,118,119,127,145,154,155,156,157,158,159,160,162,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,49,49,49,49,49,-42,-39,-40,49,49,-37,-38,-41,49,49,49,49,49,-46,49,49,49,49,49,-43,-49,49,-44,-50,49,-45,-51,]),'NUMBER':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,109,111,114,116,118,119,127,145,154,155,156,157,158,159,160,162,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,52,52,52,52,52,-42,-39,-40,52,52,-37,-38,-41,52,52,52,52,52,-46,52,52,52,52,52,-43,-49,52,-44,-50,52,-45,-51,]),'CHR':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,109,111,114,116,118,119,127,145,154,155,156,157,158,159,160,162,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,53,53,53,53,53,-42,-39,-40,53,53,-37,-38,-41,53,53,53,53,53,-46,53,53,53,53,53,-43,-49,53,-44,-50,53,-45,-51,]),'STR':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,109,111,114,116,118,119,127,145,154,155,156,157,158,159,160,162,167,180,181,182,187,188,189,190,196,197,198,199,202,203,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,54,54,54,54,54,-42,-39,-40,54,54,-37,-38,-41,54,54,54,54,54,-46,54,54,54,54,54,-43,-49,54,-44,-50,54,-45,-51,]),'.':([38,50,51,52,53,54,99,100,139,141,142,163,164,],[-103,101,-102,-104,-105,-106,-98,-99,-96,-100,-101,-95,-97,]),'RARROW':([38,50,51,52,53,54,99,100,139,141,142,163,164,],[-103,102,-102,-104,-105,-106,-98,-99,-96,-100,-101,-95,-97,]),'*':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,79,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'/':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,80,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LOGAND':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,81,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LOGOR':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,82,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LOGEQ':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,83,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LOGNEQ':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,84,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LSHIFT':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,85,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'RSHIFT':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,86,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'<':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,87,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'>':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,88,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'LEQ':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,89,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'GEQ':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,90,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'^':([38,44,50,51,52,53,54,92,93,94,95,96,99,100,139,141,142,163,164,],[-103,91,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,-96,-100,-101,-95,-97,]),'?':([38,42,43,44,50,51,52,53,54,92,93,94,95,96,99,100,136,137,139,141,142,163,164,176,],[-103,75,-71,-73,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,75,-72,-96,-100,-101,-95,-97,-70,]),'ADDEQ':([38,40,42,43,44,50,51,52,53,54,58,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,161,163,164,168,169,174,176,191,],[-103,69,-69,-71,-73,-94,-102,-104,-105,-106,69,69,-89,-90,-91,-92,-93,-98,-99,69,69,-62,-63,-64,-65,-66,69,-68,-72,69,-96,-100,-101,69,-95,-97,69,69,69,-70,69,]),'SUBEQ':([38,40,42,43,44,50,51,52,53,54,58,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,161,163,164,168,169,174,176,191,],[-103,70,-69,-71,-73,-94,-102,-104,-105,-106,70,70,-89,-90,-91,-92,-93,-98,-99,70,70,-62,-63,-64,-65,-66,70,-68,-72,70,-96,-100,-101,70,-95,-97,70,70,70,-70,70,]),'MULTEQ':([38,40,42,43,44,50,51,52,53,54,58,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,161,163,164,168,169,174,176,191,],[-103,71,-69,-71,-73,-94,-102,-104,-105,-106,71,71,-89,-90,-91,-92,-93,-98,-99,71,71,-62,-63,-64,-65,-66,71,-68,-72,71,-96,-100,-101,71,-95,-97,71,71,71,-70,71,]),'DIVEQ':([38,40,42,43,44,50,51,52,53,54,58,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,161,163,164,168,169,174,176,191,],[-103,72,-69,-71,-73,-94,-102,-104,-105,-106,72,72,-89,-90,-91,-92,-93,-98,-99,72,72,-62,-63,-64,-65,-66,72,-68,-72,72,-96,-100,-101,72,-95,-97,72,72,72,-70,72,]),'MODEQ':([38,40,42,43,44,50,51,52,53,54,58,74,92,93,94,95,96,99,100,105,115,129,130,131,132,133,134,135,137,138,139,141,142,161,163,164,168,169,174,176,191,],[-103,73,-69,-71,-73,-94,-102,-104,-105,-106,73,73,-89,-90,-91,-92,-93,-98,-99,73,73,-62,-63,-64,-65,-66,73,-68,-72,73,-96,-100,-101,73,-95,-97,73,73,73,-70,73,]),'}':([38,42,43,44,50,51,52,53,54,60,61,65,92,93,94,95,96,99,100,104,105,107,109,111,112,114,116,118,119,129,130,131,132,133,134,135,137,139,141,142,146,147,149,150,151,153,154,155,156,159,163,164,165,167,170,176,181,182,185,186,189,190,196,197,198,199,200,201,202,203,],[-103,-69,-71,-73,-94,-102,-104,-105,-106,106,-26,113,-89,-90,-91,-92,-93,-98,-99,144,-61,-25,148,-114,152,-36,-42,-39,-40,-62,-63,-64,-65,-66,-67,-68,-72,-96,-100,-101,-27,166,167,-47,-48,-35,-37,-38,-41,-114,-95,-97,-60,-46,179,-70,-114,-114,189,190,-43,-49,-114,-44,-50,-114,202,203,-45,-51,]),':':([38,43,44,50,51,52,53,54,92,93,94,95,96,99,100,136,137,139,141,142,163,164,176,],[-103,-71,-73,-94,-102,-104,-105,-106,-89,-90,-91,-92,-93,-98,-99,162,-72,-96,-100,-101,-95,-97,-70,]),'IF':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,193,196,197,198,199,202,203,],[121,121,121,121,-42,-39,-40,-37,-38,-41,121,-46,121,121,-43,-49,121,121,-44,-50,121,-45,-51,]),'WHILE':([65,109,111,114,116,118,119,154,155,156,159,167,179,181,182,189,190,196,197,198,199,202,203,],[122,122,122,122,-42,-39,-40,-37,-38,-41,122,-46,183,122,122,-43,-49,122,-44,-50,122,-45,-51,]),'DO':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,196,197,198,199,202,203,],[123,123,123,123,-42,-39,-40,-37,-38,-41,123,-46,123,123,-43,-49,123,-44,-50,123,-45,-51,]),'FOR':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,196,197,198,199,202,203,],[124,124,124,124,-42,-39,-40,-37,-38,-41,124,-46,124,124,-43,-49,124,-44,-50,124,-45,-51,]),'BREAK':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,196,197,198,199,202,203,],[125,125,125,125,-42,-39,-40,-37,-38,-41,125,-46,125,125,-43,-49,125,-44,-50,125,-45,-51,]),'CONTINUE':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,196,197,198,199,202,203,],[126,126,126,126,-42,-39,-40,-37,-38,-41,126,-46,126,126,-43,-49,126,-44,-50,126,-45,-51,]),'RETURN':([65,109,111,114,116,118,119,154,155,156,159,167,181,182,189,190,196,197,198,199,202,203,],[127,127,127,127,-42,-39,-40,-37,-38,-41,127,-46,127,127,-43,-49,127,-44,-50,127,-45,-51,]),'ELSE':([189,],[193,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,21,22,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,65,109,111,114,159,181,182,196,199,],[5,5,5,117,117,117,117,117,117,117,117,117,]),'func_def':([0,2,3,],[7,7,7,]),'usual_dec':([0,2,3,65,109,111,114,159,160,181,182,196,199,],[8,8,8,8,8,8,8,8,173,8,8,8,8,]),'new_type_dec':([0,2,3,65,109,111,114,159,181,182,196,199,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,3,29,33,61,65,66,109,111,114,159,160,181,182,196,199,],[10,10,10,34,62,62,110,34,110,110,110,110,110,110,110,110,110,]),'new_type':([0,2,3,65,109,111,114,159,181,182,196,199,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'declarators':([10,31,62,110,],[25,55,108,25,]),'declarator_1':([10,31,62,110,],[26,26,26,26,]),'declarator_2':([10,31,34,62,110,],[27,27,63,27,27,]),'params':([29,66,],[35,128,]),'param':([29,66,],[37,37,]),'expression':([30,32,41,59,65,68,69,70,71,72,73,97,98,109,111,114,127,145,157,158,159,160,180,181,182,187,188,196,199,],[40,58,74,105,115,129,130,131,132,133,134,138,105,115,115,115,161,105,168,169,115,174,174,115,115,191,174,115,115,]),'tern_expr':([30,32,41,59,65,68,69,70,71,72,73,75,97,98,109,111,114,127,145,157,158,159,160,162,180,181,182,187,188,196,199,],[42,42,42,42,42,42,42,42,42,42,42,136,42,42,42,42,42,42,42,42,42,42,42,176,42,42,42,42,42,42,42,]),'bin_expr':([30,32,41,59,65,68,69,70,71,72,73,75,76,97,98,109,111,114,127,145,157,158,159,160,162,180,181,182,187,188,196,199,],[43,43,43,43,43,43,43,43,43,43,43,43,137,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'pre_unary_expr':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,97,98,109,111,114,127,145,157,158,159,160,162,180,181,182,187,188,196,199,],[44,44,44,92,93,94,95,96,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'post_unary_expr':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,97,98,109,111,114,127,145,157,158,159,160,162,180,181,182,187,188,196,199,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'element':([30,32,41,45,46,47,48,49,59,65,68,69,70,71,72,73,75,76,97,98,109,111,114,127,145,157,158,159,160,162,180,181,182,187,188,196,199,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'initializer':([32,],[57,]),'new_type_params':([33,61,],[60,107,]),'new_type_param':([33,61,],[61,61,]),'bin_op':([44,],[76,]),'expressions':([59,98,145,],[104,140,165,]),'statements':([65,109,111,114,159,181,182,196,199,],[112,147,150,153,150,150,150,150,150,]),'statement':([65,109,111,114,159,181,182,196,199,],[114,114,114,114,114,114,114,114,114,]),'conditional':([65,109,111,114,159,181,182,193,196,199,],[118,118,118,118,118,118,118,197,118,118,]),'iteration':([65,109,111,114,159,181,182,196,199,],[119,119,119,119,119,119,119,119,119,]),'jump':([65,109,111,114,159,181,182,196,199,],[120,120,120,120,120,120,120,120,120,]),'stats_or_null':([111,159,181,182,196,199,],[149,170,185,186,200,201,]),'empty':([111,159,160,180,181,182,188,196,199,],[151,151,175,175,151,151,175,151,151,]),'expr_or_null_or_init':([160,],[171,]),'expr_or_null':([160,180,188,],[172,184,192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',39),
  ('program -> external_decl program','program',2,'p_program','parser.py',40),
  ('program -> include','program',1,'p_program_end','parser.py',47),
  ('program -> external_decl','program',1,'p_program_end','parser.py',48),
  ('include -> INCLUDE','include',1,'p_include','parser.py',59),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',68),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',69),
  ('external_decl -> ;','external_decl',1,'p_external_declaration_extra_semicolon','parser.py',76),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',83),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',84),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',91),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',100),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',107),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',114),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',121),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',128),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',135),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',142),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',149),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',156),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',157),
  ('new_type_dec -> new_type ID { new_type_params }','new_type_dec',5,'p_new_type_dec','parser.py',172),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',179),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',180),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',187),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',194),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',201),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',210),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',217),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',224),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',231),
  ('params -> param , params','params',3,'p_params','parser.py',238),
  ('params -> param','params',1,'p_params_end','parser.py',245),
  ('param -> type declarator_2','param',2,'p_param','parser.py',252),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',261),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',271),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',278),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',279),
  ('statement -> conditional','statement',1,'p_statement','parser.py',280),
  ('statement -> iteration','statement',1,'p_statement','parser.py',281),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',282),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',289),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',298),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',305),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',312),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',321),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',328),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',329),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',339),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',346),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',353),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',360),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',361),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',368),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',369),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',376),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',377),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',378),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',385),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',396),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',403),
  ('expression -> expression = expression','expression',3,'p_expression','parser.py',410),
  ('expression -> expression ADDEQ expression','expression',3,'p_expression','parser.py',411),
  ('expression -> expression SUBEQ expression','expression',3,'p_expression','parser.py',412),
  ('expression -> expression MULTEQ expression','expression',3,'p_expression','parser.py',413),
  ('expression -> expression DIVEQ expression','expression',3,'p_expression','parser.py',414),
  ('expression -> expression MODEQ expression','expression',3,'p_expression','parser.py',415),
  ('expression -> ( expression )','expression',3,'p_expression_wparenth','parser.py',422),
  ('expression -> tern_expr','expression',1,'p_expression_to_ternary','parser.py',429),
  ('tern_expr -> tern_expr ? tern_expr : tern_expr','tern_expr',5,'p_ternary_expr','parser.py',436),
  ('tern_expr -> bin_expr','tern_expr',1,'p_ternary_expr_to_binary','parser.py',443),
  ('bin_expr -> pre_unary_expr bin_op bin_expr','bin_expr',3,'p_binary_expr','parser.py',450),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',457),
  ('bin_op -> +','bin_op',1,'p_binary_operator','parser.py',464),
  ('bin_op -> -','bin_op',1,'p_binary_operator','parser.py',465),
  ('bin_op -> *','bin_op',1,'p_binary_operator','parser.py',466),
  ('bin_op -> /','bin_op',1,'p_binary_operator','parser.py',467),
  ('bin_op -> LOGAND','bin_op',1,'p_binary_operator','parser.py',468),
  ('bin_op -> LOGOR','bin_op',1,'p_binary_operator','parser.py',469),
  ('bin_op -> LOGEQ','bin_op',1,'p_binary_operator','parser.py',470),
  ('bin_op -> LOGNEQ','bin_op',1,'p_binary_operator','parser.py',471),
  ('bin_op -> LSHIFT','bin_op',1,'p_binary_operator','parser.py',472),
  ('bin_op -> RSHIFT','bin_op',1,'p_binary_operator','parser.py',473),
  ('bin_op -> <','bin_op',1,'p_binary_operator','parser.py',474),
  ('bin_op -> >','bin_op',1,'p_binary_operator','parser.py',475),
  ('bin_op -> LEQ','bin_op',1,'p_binary_operator','parser.py',476),
  ('bin_op -> GEQ','bin_op',1,'p_binary_operator','parser.py',477),
  ('bin_op -> ^','bin_op',1,'p_binary_operator','parser.py',478),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',485),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',486),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',487),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',488),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',489),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',496),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',503),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',510),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',517),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',524),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',525),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',532),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',533),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_element','parser.py',540),
  ('element -> ID','element',1,'p_element','parser.py',547),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',554),
  ('element -> CHR','element',1,'p_element_const','parser.py',555),
  ('element -> STR','element',1,'p_element_const','parser.py',556),
  ('type -> VOID','type',1,'p_type','parser.py',565),
  ('type -> CHAR','type',1,'p_type','parser.py',566),
  ('type -> SHORT','type',1,'p_type','parser.py',567),
  ('type -> INT','type',1,'p_type','parser.py',568),
  ('type -> LONG','type',1,'p_type','parser.py',569),
  ('type -> FLOAT','type',1,'p_type','parser.py',570),
  ('type -> DOUBLE','type',1,'p_type','parser.py',571),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',578),
]
