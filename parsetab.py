
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADDEQSUBEQMODEQMULTEQDIVEQ=left?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        external_decl : ';'\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' declarators\n    \n        new_type_dec    : new_type ID declarators\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression : tern_expr\n    \n        tern_expr  : tern_expr '?' tern_expr ':' tern_expr\n    \n        tern_expr : bin_expr\n    \n        bin_expr        : bin_expr '+' bin_expr\n                        | bin_expr '-' bin_expr\n                        | bin_expr '*' bin_expr\n                        | bin_expr '/' bin_expr\n                        | bin_expr '^' bin_expr\n                        | bin_expr '>' bin_expr\n                        | bin_expr '<' bin_expr\n                        | bin_expr LOGAND bin_expr\n                        | bin_expr LOGOR bin_expr\n                        | bin_expr LOGEQ bin_expr\n                        | bin_expr LOGNEQ bin_expr\n                        | bin_expr LEQ bin_expr\n                        | bin_expr GEQ bin_expr\n                        | bin_expr LSHIFT bin_expr\n                        | bin_expr RSHIFT bin_expr\n                        | bin_expr '=' bin_expr\n                        | bin_expr ADDEQ bin_expr\n                        | bin_expr SUBEQ bin_expr\n                        | bin_expr MULTEQ bin_expr\n                        | bin_expr DIVEQ bin_expr\n                        | bin_expr MODEQ bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        element : '(' expression ')'\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,7,23,114,163,167,181,],[4,4,4,-5,-8,-7,-6,-33,-32,-31,-30,]),';':([0,2,3,4,5,6,7,8,9,23,24,25,26,27,33,35,38,40,41,43,44,47,51,53,54,55,56,57,58,59,67,69,92,93,94,95,96,99,100,106,107,109,110,112,114,115,116,117,118,119,120,121,126,127,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,158,160,163,167,169,170,171,174,175,176,178,179,181,182,186,187,188,189,190,191,195,196,197,199,204,205,209,211,212,213,214,217,218,],[6,6,6,-5,23,-8,-7,-9,-10,-6,-16,-11,-13,-14,-16,-24,-17,-103,-18,-64,-66,-88,-94,-102,-104,-105,-106,-12,-15,-20,117,-19,-91,-92,-89,-90,-93,-98,-99,-17,-22,161,117,117,-33,117,169,-44,170,-41,-42,171,-58,-59,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-21,-23,-32,-31,-39,-40,-43,117,-115,-61,-95,-97,-30,-48,195,-56,-57,-54,-55,-65,-115,117,117,203,-45,-51,213,117,-46,-52,117,-47,-53,]),'VOID':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[12,12,12,-5,-8,-7,-6,12,12,12,12,12,12,12,-33,12,-44,-41,-42,-29,-32,-31,-39,-40,-43,12,12,-30,-48,12,12,-45,-51,12,-46,-52,12,-47,-53,]),'CHAR':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[13,13,13,-5,-8,-7,-6,13,13,13,13,13,13,13,-33,13,-44,-41,-42,-29,-32,-31,-39,-40,-43,13,13,-30,-48,13,13,-45,-51,13,-46,-52,13,-47,-53,]),'SHORT':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[14,14,14,-5,-8,-7,-6,14,14,14,14,14,14,14,-33,14,-44,-41,-42,-29,-32,-31,-39,-40,-43,14,14,-30,-48,14,14,-45,-51,14,-46,-52,14,-47,-53,]),'INT':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[15,15,15,-5,-8,-7,-6,15,15,15,15,15,15,15,-33,15,-44,-41,-42,-29,-32,-31,-39,-40,-43,15,15,-30,-48,15,15,-45,-51,15,-46,-52,15,-47,-53,]),'LONG':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[16,16,16,-5,-8,-7,-6,16,16,16,16,16,16,16,-33,16,-44,-41,-42,-29,-32,-31,-39,-40,-43,16,16,-30,-48,16,16,-45,-51,16,-46,-52,16,-47,-53,]),'FLOAT':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[17,17,17,-5,-8,-7,-6,17,17,17,17,17,17,17,-33,17,-44,-41,-42,-29,-32,-31,-39,-40,-43,17,17,-30,-48,17,17,-45,-51,17,-46,-52,17,-47,-53,]),'DOUBLE':([0,2,3,4,6,7,23,29,34,63,67,68,110,112,114,115,117,119,120,161,163,167,169,170,171,174,175,181,182,196,197,204,205,211,212,213,214,217,218,],[18,18,18,-5,-8,-7,-6,18,18,18,18,18,18,18,-33,18,-44,-41,-42,-29,-32,-31,-39,-40,-43,18,18,-30,-48,18,18,-45,-51,18,-46,-52,18,-47,-53,]),'STRUCT':([0,2,3,4,6,7,23,67,110,112,114,115,117,119,120,163,167,169,170,171,174,181,182,196,197,204,205,211,212,213,214,217,218,],[19,19,19,-5,-8,-7,-6,19,19,19,-33,19,-44,-41,-42,-32,-31,-39,-40,-43,19,-30,-48,19,19,-45,-51,19,-46,-52,19,-47,-53,]),'CLASS':([0,2,3,4,6,7,23,67,110,112,114,115,117,119,120,163,167,169,170,171,174,181,182,196,197,204,205,211,212,213,214,217,218,],[20,20,20,-5,-8,-7,-6,20,20,20,-33,20,-44,-41,-42,-32,-31,-39,-40,-43,20,-30,-48,20,20,-45,-51,20,-46,-52,20,-47,-53,]),'$end':([1,2,3,4,6,7,21,22,23,114,163,167,181,],[0,-3,-4,-5,-8,-7,-1,-2,-6,-33,-32,-31,-30,]),'ID':([10,11,12,13,14,15,16,17,18,19,20,28,30,31,32,36,45,46,48,49,50,52,60,64,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,101,102,107,110,111,112,115,117,119,120,128,159,169,170,171,172,173,174,175,177,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[24,28,-108,-109,-110,-111,-112,-113,-114,-25,-26,33,40,33,40,33,40,40,40,40,40,40,40,33,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,155,156,33,40,33,40,40,-44,-41,-42,40,40,-39,-40,-43,40,40,40,40,40,-48,40,40,40,40,40,-45,-51,40,-46,-52,40,-47,-53,]),'(':([24,30,32,33,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,100,110,112,115,117,119,120,122,123,125,128,153,155,156,157,159,169,170,171,172,173,174,175,177,178,179,182,195,196,197,198,202,203,204,205,211,212,213,214,217,218,],[29,52,52,61,-103,52,52,52,52,52,98,52,-102,-104,-105,-106,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-98,-99,52,52,52,-44,-41,-42,172,173,175,52,-96,-100,-101,-107,52,-39,-40,-43,52,52,52,52,52,-95,-97,-48,52,52,52,202,52,52,-45,-51,52,-46,-52,52,-47,-53,]),'=':([24,27,33,38,40,41,44,47,51,53,54,55,56,69,92,93,94,95,96,99,100,106,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-16,32,-16,-17,-103,-18,86,-88,-94,-102,-104,-105,-106,-19,-91,-92,-89,-90,-93,-98,-99,-17,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),',':([24,26,27,33,38,39,40,41,43,44,47,51,53,54,55,56,58,59,65,69,92,93,94,95,96,99,100,105,106,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,158,178,179,191,],[-16,31,-14,-16,-17,68,-103,-18,-64,-66,-88,-94,-102,-104,-105,-106,-15,-20,-36,-19,-91,-92,-89,-90,-93,-98,-99,159,-17,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-21,-95,-97,-65,]),'[':([24,33,40,51,53,54,55,56,99,100,153,155,156,157,178,179,],[30,30,-103,97,-102,-104,-105,-106,-98,-99,-96,-100,-101,-107,-95,-97,]),'{':([28,32,38,66,67,110,112,115,117,119,120,124,169,170,171,174,182,192,193,196,197,204,205,208,210,211,212,213,214,217,218,],[34,60,67,110,112,112,112,112,-44,-41,-42,174,-39,-40,-43,112,-48,196,197,112,112,-45,-51,211,214,112,-46,-52,112,-47,-53,]),')':([29,33,37,39,40,41,43,44,47,51,53,54,55,56,61,65,69,92,93,94,95,96,98,99,100,103,105,106,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,178,179,180,183,184,189,190,191,203,206,207,],[38,-16,66,-35,-103,-18,-64,-66,-88,-94,-102,-104,-105,-106,106,-36,-19,-91,-92,-89,-90,-93,153,-98,-99,157,-63,-17,-34,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,179,-100,-101,-107,-95,-97,-62,192,193,-54,-55,-65,-115,209,210,]),']':([30,40,42,43,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,178,179,191,],[41,-103,69,-64,-66,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,178,-96,-100,-101,-107,-95,-97,-65,]),'PLUSPLUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,100,110,112,115,117,119,120,128,153,155,156,157,159,169,170,171,172,173,174,175,177,178,179,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[48,48,-103,48,48,48,48,48,99,48,-102,-104,-105,-106,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-98,-99,48,48,48,-44,-41,-42,48,-96,-100,-101,-107,48,-39,-40,-43,48,48,48,48,48,-95,-97,-48,48,48,48,48,48,-45,-51,48,-46,-52,48,-47,-53,]),'MINUSMINUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,99,100,110,112,115,117,119,120,128,153,155,156,157,159,169,170,171,172,173,174,175,177,178,179,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[49,49,-103,49,49,49,49,49,100,49,-102,-104,-105,-106,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-98,-99,49,49,49,-44,-41,-42,49,-96,-100,-101,-107,49,-39,-40,-43,49,49,49,49,49,-95,-97,-48,49,49,49,49,49,-45,-51,49,-46,-52,49,-47,-53,]),'+':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,110,112,115,117,119,120,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,159,169,170,171,172,173,174,175,177,178,179,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[45,45,-103,71,45,45,-88,45,45,45,-94,45,-102,-104,-105,-106,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-91,-92,-89,-90,-93,45,45,-98,-99,45,45,45,-44,-41,-42,45,-67,-68,-69,-70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-96,-100,-101,-107,45,-39,-40,-43,45,45,45,45,45,-95,-97,-48,45,45,45,45,45,-45,-51,45,-46,-52,45,-47,-53,]),'-':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,110,112,115,117,119,120,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,159,169,170,171,172,173,174,175,177,178,179,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[46,46,-103,72,46,46,-88,46,46,46,-94,46,-102,-104,-105,-106,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-91,-92,-89,-90,-93,46,46,-98,-99,46,46,46,-44,-41,-42,46,-67,-68,-69,-70,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-96,-100,-101,-107,46,-39,-40,-43,46,46,46,46,46,-95,-97,-48,46,46,46,46,46,-45,-51,46,-46,-52,46,-47,-53,]),'!':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,117,119,120,128,159,169,170,171,172,173,174,175,177,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-44,-41,-42,50,50,-39,-40,-43,50,50,50,50,50,-48,50,50,50,50,50,-45,-51,50,-46,-52,50,-47,-53,]),'NUMBER':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,117,119,120,128,159,169,170,171,172,173,174,175,177,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-44,-41,-42,54,54,-39,-40,-43,54,54,54,54,54,-48,54,54,54,54,54,-45,-51,54,-46,-52,54,-47,-53,]),'CHR':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,117,119,120,128,159,169,170,171,172,173,174,175,177,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-44,-41,-42,55,55,-39,-40,-43,55,55,55,55,55,-48,55,55,55,55,55,-45,-51,55,-46,-52,55,-47,-53,]),'STR':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,117,119,120,128,159,169,170,171,172,173,174,175,177,182,195,196,197,202,203,204,205,211,212,213,214,217,218,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-44,-41,-42,56,56,-39,-40,-43,56,56,56,56,56,-48,56,56,56,56,56,-45,-51,56,-46,-52,56,-47,-53,]),'.':([40,51,53,54,55,56,99,100,153,155,156,157,178,179,],[-103,101,-102,-104,-105,-106,-98,-99,-96,-100,-101,-107,-95,-97,]),'RARROW':([40,51,53,54,55,56,99,100,153,155,156,157,178,179,],[-103,102,-102,-104,-105,-106,-98,-99,-96,-100,-101,-107,-95,-97,]),'*':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,73,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,73,73,-69,-70,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-96,-100,-101,-107,-95,-97,]),'/':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,74,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,74,74,-69,-70,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-96,-100,-101,-107,-95,-97,]),'^':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,75,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,75,75,-76,-77,-78,-79,-80,-81,75,75,75,75,75,75,-96,-100,-101,-107,-95,-97,]),'>':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,76,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,76,-72,-73,76,76,76,76,-78,-79,-80,-81,76,76,76,76,76,76,-96,-100,-101,-107,-95,-97,]),'<':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,77,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,77,-72,-73,77,77,77,77,-78,-79,-80,-81,77,77,77,77,77,77,-96,-100,-101,-107,-95,-97,]),'LOGAND':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,78,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,78,-76,-77,-78,-79,-80,-81,78,78,78,78,78,78,-96,-100,-101,-107,-95,-97,]),'LOGOR':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,79,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,79,79,79,79,79,79,-96,-100,-101,-107,-95,-97,]),'LOGEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,80,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,80,-72,-73,80,80,-76,-77,-78,-79,-80,-81,80,80,80,80,80,80,-96,-100,-101,-107,-95,-97,]),'LOGNEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,81,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,81,-72,-73,81,81,-76,-77,-78,-79,-80,-81,81,81,81,81,81,81,-96,-100,-101,-107,-95,-97,]),'LEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,82,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,82,-72,-73,82,82,82,82,-78,-79,-80,-81,82,82,82,82,82,82,-96,-100,-101,-107,-95,-97,]),'GEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,83,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,83,-72,-73,83,83,83,83,-78,-79,-80,-81,83,83,83,83,83,83,-96,-100,-101,-107,-95,-97,]),'LSHIFT':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,84,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,84,84,84,84,84,84,84,84,84,-80,-81,84,84,84,84,84,84,-96,-100,-101,-107,-95,-97,]),'RSHIFT':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,85,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,85,85,85,85,85,85,85,85,85,-80,-81,85,85,85,85,85,85,-96,-100,-101,-107,-95,-97,]),'ADDEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,87,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),'SUBEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,88,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),'MULTEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,89,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),'DIVEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,90,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),'MODEQ':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,],[-103,91,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,]),'?':([40,43,44,47,51,53,54,55,56,92,93,94,95,96,99,100,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,191,],[-103,70,-66,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,70,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,-65,]),'}':([40,43,44,47,51,53,54,55,56,62,63,67,92,93,94,95,96,99,100,104,105,108,110,112,113,115,117,119,120,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,161,162,164,165,166,168,169,170,171,174,178,179,180,182,185,191,196,197,200,201,204,205,211,212,213,214,215,216,217,218,],[-103,-64,-66,-88,-94,-102,-104,-105,-106,107,-28,114,-91,-92,-89,-90,-93,-98,-99,158,-63,-27,163,-115,167,-38,-44,-41,-42,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-29,181,182,-49,-50,-37,-39,-40,-43,-115,-95,-97,-62,-48,194,-65,-115,-115,204,205,-45,-51,-115,-46,-52,-115,217,218,-47,-53,]),':':([40,44,47,51,53,54,55,56,92,93,94,95,96,99,100,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,156,157,178,179,191,],[-103,-66,-88,-94,-102,-104,-105,-106,-91,-92,-89,-90,-93,-98,-99,177,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-96,-100,-101,-107,-95,-97,-65,]),'IF':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,208,211,212,213,214,217,218,],[122,122,122,122,-44,-41,-42,-39,-40,-43,122,-48,122,122,-45,-51,122,122,-46,-52,122,-47,-53,]),'WHILE':([67,110,112,115,117,119,120,169,170,171,174,182,194,196,197,204,205,211,212,213,214,217,218,],[123,123,123,123,-44,-41,-42,-39,-40,-43,123,-48,198,123,123,-45,-51,123,-46,-52,123,-47,-53,]),'DO':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,211,212,213,214,217,218,],[124,124,124,124,-44,-41,-42,-39,-40,-43,124,-48,124,124,-45,-51,124,-46,-52,124,-47,-53,]),'FOR':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,211,212,213,214,217,218,],[125,125,125,125,-44,-41,-42,-39,-40,-43,125,-48,125,125,-45,-51,125,-46,-52,125,-47,-53,]),'BREAK':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,211,212,213,214,217,218,],[126,126,126,126,-44,-41,-42,-39,-40,-43,126,-48,126,126,-45,-51,126,-46,-52,126,-47,-53,]),'CONTINUE':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,211,212,213,214,217,218,],[127,127,127,127,-44,-41,-42,-39,-40,-43,127,-48,127,127,-45,-51,127,-46,-52,127,-47,-53,]),'RETURN':([67,110,112,115,117,119,120,169,170,171,174,182,196,197,204,205,211,212,213,214,217,218,],[128,128,128,128,-44,-41,-42,-39,-40,-43,128,-48,128,128,-45,-51,128,-46,-52,128,-47,-53,]),'ELSE':([204,],[208,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,21,22,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,67,110,112,115,174,196,197,211,214,],[5,5,5,118,118,118,118,118,118,118,118,118,]),'func_def':([0,2,3,],[7,7,7,]),'usual_dec':([0,2,3,67,110,112,115,174,175,196,197,211,214,],[8,8,8,8,8,8,8,8,188,8,8,8,8,]),'new_type_dec':([0,2,3,67,110,112,115,174,196,197,211,214,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,3,29,34,63,67,68,110,112,115,174,175,196,197,211,214,],[10,10,10,36,64,64,111,36,111,111,111,111,111,111,111,111,111,]),'new_type':([0,2,3,67,110,112,115,174,196,197,211,214,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'declarators':([10,28,31,64,107,111,],[25,35,57,109,160,25,]),'declarator_1':([10,28,31,64,107,111,],[26,26,26,26,26,26,]),'declarator_2':([10,28,31,36,64,107,111,],[27,27,27,65,27,27,27,]),'params':([29,68,],[37,129,]),'param':([29,68,],[39,39,]),'expression':([30,32,52,60,67,97,98,110,112,115,128,159,172,173,174,175,195,196,197,202,203,211,214,],[42,59,103,105,116,152,105,116,116,116,176,105,183,184,116,189,189,116,116,206,189,116,116,]),'tern_expr':([30,32,52,60,67,70,97,98,110,112,115,128,159,172,173,174,175,177,195,196,197,202,203,211,214,],[43,43,43,43,43,130,43,43,43,43,43,43,43,43,43,43,43,191,43,43,43,43,43,43,43,]),'bin_expr':([30,32,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,128,159,172,173,174,175,177,195,196,197,202,203,211,214,],[44,44,44,44,44,44,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'pre_unary_expr':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,128,159,172,173,174,175,177,195,196,197,202,203,211,214,],[47,47,92,93,94,95,96,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'post_unary_expr':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,128,159,172,173,174,175,177,195,196,197,202,203,211,214,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'element':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,98,110,112,115,128,159,172,173,174,175,177,195,196,197,202,203,211,214,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'initializer':([32,],[58,]),'new_type_params':([34,63,],[62,108,]),'new_type_param':([34,63,],[63,63,]),'expressions':([60,98,159,],[104,154,180,]),'statements':([67,110,112,115,174,196,197,211,214,],[113,162,165,168,165,165,165,165,165,]),'statement':([67,110,112,115,174,196,197,211,214,],[115,115,115,115,115,115,115,115,115,]),'conditional':([67,110,112,115,174,196,197,208,211,214,],[119,119,119,119,119,119,119,212,119,119,]),'iteration':([67,110,112,115,174,196,197,211,214,],[120,120,120,120,120,120,120,120,120,]),'jump':([67,110,112,115,174,196,197,211,214,],[121,121,121,121,121,121,121,121,121,]),'stats_or_null':([112,174,196,197,211,214,],[164,185,200,201,215,216,]),'empty':([112,174,175,195,196,197,203,211,214,],[166,166,190,190,166,166,190,166,166,]),'expr_or_null_or_init':([175,],[186,]),'expr_or_null':([175,195,203,],[187,199,207,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',39),
  ('program -> external_decl program','program',2,'p_program','parser.py',40),
  ('program -> include','program',1,'p_program_end','parser.py',47),
  ('program -> external_decl','program',1,'p_program_end','parser.py',48),
  ('include -> INCLUDE','include',1,'p_include','parser.py',59),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',68),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',69),
  ('external_decl -> ;','external_decl',1,'p_external_declaration_extra_semicolon','parser.py',76),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',83),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',84),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',91),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',100),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',107),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',114),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',121),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',128),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',135),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',142),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',149),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',156),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',157),
  ('new_type_dec -> new_type ID { new_type_params }','new_type_dec',5,'p_new_type_dec','parser.py',172),
  ('new_type_dec -> new_type ID { new_type_params } declarators','new_type_dec',6,'p_new_type_dec_winit','parser.py',179),
  ('new_type_dec -> new_type ID declarators','new_type_dec',3,'p_new_type_dec_wodef','parser.py',186),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',193),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',194),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',201),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',208),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',215),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',224),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',231),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',238),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',245),
  ('params -> param , params','params',3,'p_params','parser.py',252),
  ('params -> param','params',1,'p_params_end','parser.py',259),
  ('param -> type declarator_2','param',2,'p_param','parser.py',266),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',275),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',285),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',292),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',293),
  ('statement -> conditional','statement',1,'p_statement','parser.py',294),
  ('statement -> iteration','statement',1,'p_statement','parser.py',295),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',296),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',303),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',312),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',319),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',326),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',335),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',342),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',343),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',355),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',362),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',369),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',376),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',377),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',387),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',388),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',395),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',396),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',397),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',404),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',415),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',422),
  ('expression -> tern_expr','expression',1,'p_expression_to_ternary','parser.py',429),
  ('tern_expr -> tern_expr ? tern_expr : tern_expr','tern_expr',5,'p_ternary_expr','parser.py',436),
  ('tern_expr -> bin_expr','tern_expr',1,'p_ternary_expr_to_binary','parser.py',443),
  ('bin_expr -> bin_expr + bin_expr','bin_expr',3,'p_binary_expr','parser.py',450),
  ('bin_expr -> bin_expr - bin_expr','bin_expr',3,'p_binary_expr','parser.py',451),
  ('bin_expr -> bin_expr * bin_expr','bin_expr',3,'p_binary_expr','parser.py',452),
  ('bin_expr -> bin_expr / bin_expr','bin_expr',3,'p_binary_expr','parser.py',453),
  ('bin_expr -> bin_expr ^ bin_expr','bin_expr',3,'p_binary_expr','parser.py',454),
  ('bin_expr -> bin_expr > bin_expr','bin_expr',3,'p_binary_expr','parser.py',455),
  ('bin_expr -> bin_expr < bin_expr','bin_expr',3,'p_binary_expr','parser.py',456),
  ('bin_expr -> bin_expr LOGAND bin_expr','bin_expr',3,'p_binary_expr','parser.py',457),
  ('bin_expr -> bin_expr LOGOR bin_expr','bin_expr',3,'p_binary_expr','parser.py',458),
  ('bin_expr -> bin_expr LOGEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',459),
  ('bin_expr -> bin_expr LOGNEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',460),
  ('bin_expr -> bin_expr LEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',461),
  ('bin_expr -> bin_expr GEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',462),
  ('bin_expr -> bin_expr LSHIFT bin_expr','bin_expr',3,'p_binary_expr','parser.py',463),
  ('bin_expr -> bin_expr RSHIFT bin_expr','bin_expr',3,'p_binary_expr','parser.py',464),
  ('bin_expr -> bin_expr = bin_expr','bin_expr',3,'p_binary_expr','parser.py',465),
  ('bin_expr -> bin_expr ADDEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',466),
  ('bin_expr -> bin_expr SUBEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',467),
  ('bin_expr -> bin_expr MULTEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',468),
  ('bin_expr -> bin_expr DIVEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',469),
  ('bin_expr -> bin_expr MODEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',470),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',477),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',484),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',485),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',486),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',487),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',488),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',495),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',502),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',509),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',516),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',523),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',524),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',531),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',532),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_parenthesis','parser.py',539),
  ('element -> ID','element',1,'p_element','parser.py',546),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',553),
  ('element -> CHR','element',1,'p_element_const','parser.py',554),
  ('element -> STR','element',1,'p_element_const','parser.py',555),
  ('element -> ( expression )','element',3,'p_element_paren_expr','parser.py',562),
  ('type -> VOID','type',1,'p_type','parser.py',571),
  ('type -> CHAR','type',1,'p_type','parser.py',572),
  ('type -> SHORT','type',1,'p_type','parser.py',573),
  ('type -> INT','type',1,'p_type','parser.py',574),
  ('type -> LONG','type',1,'p_type','parser.py',575),
  ('type -> FLOAT','type',1,'p_type','parser.py',576),
  ('type -> DOUBLE','type',1,'p_type','parser.py',577),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',584),
]
