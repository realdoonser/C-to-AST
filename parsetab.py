
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LONG MODEQ MULTEQ NUMBER RETURN SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression  : ID\n                    | NUMBER\n                    | CHR\n                    | STR\n                    | assignment_expr\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' ';'\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        assignment_expr : ID assignmenteq_op expression\n    \n        assignmenteq_op     : '='\n                            | MULTEQ\n                            | ADDEQ\n                            | SUBEQ\n                            | MODEQ\n                            | DIVEQ\n    \n        jump : RETURN expression\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,22,74,95,99,110,],[4,4,4,-5,-7,-6,-37,-36,-35,-34,]),'VOID':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[11,11,11,-5,-7,-6,11,11,11,11,11,11,11,-37,11,-48,-45,-46,-33,-36,-35,-43,-44,-47,11,11,-34,-52,11,11,-49,-55,11,-50,-56,11,-51,-57,]),'CHAR':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[12,12,12,-5,-7,-6,12,12,12,12,12,12,12,-37,12,-48,-45,-46,-33,-36,-35,-43,-44,-47,12,12,-34,-52,12,12,-49,-55,12,-50,-56,12,-51,-57,]),'SHORT':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[13,13,13,-5,-7,-6,13,13,13,13,13,13,13,-37,13,-48,-45,-46,-33,-36,-35,-43,-44,-47,13,13,-34,-52,13,13,-49,-55,13,-50,-56,13,-51,-57,]),'INT':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[14,14,14,-5,-7,-6,14,14,14,14,14,14,14,-37,14,-48,-45,-46,-33,-36,-35,-43,-44,-47,14,14,-34,-52,14,14,-49,-55,14,-50,-56,14,-51,-57,]),'LONG':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[15,15,15,-5,-7,-6,15,15,15,15,15,15,15,-37,15,-48,-45,-46,-33,-36,-35,-43,-44,-47,15,15,-34,-52,15,15,-49,-55,15,-50,-56,15,-51,-57,]),'FLOAT':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[16,16,16,-5,-7,-6,16,16,16,16,16,16,16,-37,16,-48,-45,-46,-33,-36,-35,-43,-44,-47,16,16,-34,-52,16,16,-49,-55,16,-50,-56,16,-51,-57,]),'DOUBLE':([0,2,3,4,6,22,28,32,50,54,55,70,72,74,75,77,79,80,93,95,99,101,102,103,106,107,110,111,124,125,132,133,139,140,141,142,145,146,],[17,17,17,-5,-7,-6,17,17,17,17,17,17,17,-37,17,-48,-45,-46,-33,-36,-35,-43,-44,-47,17,17,-34,-52,17,17,-49,-55,17,-50,-56,17,-51,-57,]),'STRUCT':([0,2,3,4,6,22,54,70,72,74,75,77,79,80,95,99,101,102,103,106,110,111,124,125,132,133,139,140,141,142,145,146,],[18,18,18,-5,-7,-6,18,18,18,-37,18,-48,-45,-46,-36,-35,-43,-44,-47,18,-34,-52,18,18,-49,-55,18,-50,-56,18,-51,-57,]),'CLASS':([0,2,3,4,6,22,54,70,72,74,75,77,79,80,95,99,101,102,103,106,110,111,124,125,132,133,139,140,141,142,145,146,],[19,19,19,-5,-7,-6,19,19,19,-37,19,-48,-45,-46,-36,-35,-43,-44,-47,19,-34,-52,19,19,-49,-55,19,-50,-56,19,-51,-57,]),'$end':([1,2,3,4,6,20,21,22,74,95,99,110,],[0,-3,-4,-5,-7,-1,-2,-6,-37,-36,-35,-34,]),';':([5,7,8,23,24,25,26,35,37,38,40,41,42,43,44,45,46,47,54,63,67,69,70,72,75,76,77,78,79,80,81,88,89,90,92,101,102,103,106,107,108,111,115,116,117,118,119,123,124,125,127,132,133,137,139,140,141,142,145,146,],[22,-8,-9,-15,-10,-12,-13,-16,-23,-17,-24,-25,-26,-27,-11,-15,-14,-19,77,-18,92,93,77,77,77,101,-48,102,-45,-46,103,-62,-16,-20,-28,-43,-44,-47,77,-77,-69,-52,123,-60,-61,-58,-59,-77,77,77,131,-49,-55,141,77,-50,-56,77,-51,-57,]),'ID':([9,10,11,12,13,14,15,16,17,18,19,29,30,31,33,48,51,54,56,57,58,59,60,61,62,70,71,72,75,77,79,80,86,91,101,102,103,104,105,106,107,111,123,124,125,130,131,132,133,139,140,141,142,145,146,],[23,27,-70,-71,-72,-73,-74,-75,-76,-29,-30,37,45,37,45,37,45,37,37,-63,-64,-65,-66,-67,-68,37,45,37,37,-48,-45,-46,37,37,-43,-44,-47,37,37,37,37,-52,37,37,37,37,37,-49,-55,37,-50,-56,37,-51,-57,]),'(':([23,45,82,83,85,126,],[28,64,104,105,107,130,]),'=':([23,26,35,37,38,45,63,89,],[-15,31,-16,57,-17,-15,-18,-16,]),',':([23,25,26,35,36,37,38,40,41,42,43,45,46,47,52,63,66,88,89,90,],[-15,30,-13,-16,55,-23,-17,-24,-25,-26,-27,-15,-14,-19,-40,-18,91,-62,-16,-20,]),'[':([23,45,],[29,29,]),'{':([27,31,35,53,54,70,72,75,77,79,80,84,101,102,103,106,111,120,121,124,125,132,133,136,138,139,140,141,142,145,146,],[32,48,54,70,72,72,72,72,-48,-45,-46,106,-43,-44,-47,72,-52,124,125,72,72,-49,-55,139,142,72,-50,-56,72,-51,-57,]),')':([28,34,36,37,38,40,41,42,43,45,52,63,64,87,88,89,112,113,118,119,131,134,135,],[35,53,-39,-23,-17,-24,-25,-26,-27,-15,-40,-18,89,-38,-62,-16,120,121,-58,-59,-77,137,138,]),']':([29,37,39,40,41,42,43,88,],[38,-23,63,-24,-25,-26,-27,-62,]),'NUMBER':([29,31,48,54,56,57,58,59,60,61,62,70,72,75,77,79,80,86,91,101,102,103,104,105,106,107,111,123,124,125,130,131,132,133,139,140,141,142,145,146,],[40,40,40,40,40,-63,-64,-65,-66,-67,-68,40,40,40,-48,-45,-46,40,40,-43,-44,-47,40,40,40,40,-52,40,40,40,40,40,-49,-55,40,-50,-56,40,-51,-57,]),'CHR':([29,31,48,54,56,57,58,59,60,61,62,70,72,75,77,79,80,86,91,101,102,103,104,105,106,107,111,123,124,125,130,131,132,133,139,140,141,142,145,146,],[41,41,41,41,41,-63,-64,-65,-66,-67,-68,41,41,41,-48,-45,-46,41,41,-43,-44,-47,41,41,41,41,-52,41,41,41,41,41,-49,-55,41,-50,-56,41,-51,-57,]),'STR':([29,31,48,54,56,57,58,59,60,61,62,70,72,75,77,79,80,86,91,101,102,103,104,105,106,107,111,123,124,125,130,131,132,133,139,140,141,142,145,146,],[42,42,42,42,42,-63,-64,-65,-66,-67,-68,42,42,42,-48,-45,-46,42,42,-43,-44,-47,42,42,42,42,-52,42,42,42,42,42,-49,-55,42,-50,-56,42,-51,-57,]),'}':([37,40,41,42,43,49,50,54,65,66,68,70,72,73,75,77,79,80,88,93,94,96,97,98,100,101,102,103,106,109,111,114,124,125,128,129,132,133,139,140,141,142,143,144,145,146,],[-23,-24,-25,-26,-27,67,-32,74,90,-22,-31,95,-77,99,-42,-48,-45,-46,-62,-33,110,111,-53,-54,-41,-43,-44,-47,-77,-21,-52,122,-77,-77,132,133,-49,-55,-77,-50,-56,-77,145,146,-51,-57,]),'MULTEQ':([37,],[58,]),'ADDEQ':([37,],[59,]),'SUBEQ':([37,],[60,]),'MODEQ':([37,],[61,]),'DIVEQ':([37,],[62,]),'IF':([54,70,72,75,77,79,80,101,102,103,106,111,124,125,132,133,136,139,140,141,142,145,146,],[82,82,82,82,-48,-45,-46,-43,-44,-47,82,-52,82,82,-49,-55,82,82,-50,-56,82,-51,-57,]),'WHILE':([54,70,72,75,77,79,80,101,102,103,106,111,122,124,125,132,133,139,140,141,142,145,146,],[83,83,83,83,-48,-45,-46,-43,-44,-47,83,-52,126,83,83,-49,-55,83,-50,-56,83,-51,-57,]),'DO':([54,70,72,75,77,79,80,101,102,103,106,111,124,125,132,133,139,140,141,142,145,146,],[84,84,84,84,-48,-45,-46,-43,-44,-47,84,-52,84,84,-49,-55,84,-50,-56,84,-51,-57,]),'FOR':([54,70,72,75,77,79,80,101,102,103,106,111,124,125,132,133,139,140,141,142,145,146,],[85,85,85,85,-48,-45,-46,-43,-44,-47,85,-52,85,85,-49,-55,85,-50,-56,85,-51,-57,]),'RETURN':([54,70,72,75,77,79,80,101,102,103,106,111,124,125,132,133,139,140,141,142,145,146,],[86,86,86,86,-48,-45,-46,-43,-44,-47,86,-52,86,86,-49,-55,86,-50,-56,86,-51,-57,]),'ELSE':([132,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,20,21,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,54,70,72,75,106,124,125,139,142,],[5,5,5,78,78,78,78,78,78,78,78,78,]),'func_def':([0,2,3,],[6,6,6,]),'usual_dec':([0,2,3,54,70,72,75,106,107,124,125,139,142,],[7,7,7,7,7,7,7,7,117,7,7,7,7,]),'new_type_dec':([0,2,3,54,70,72,75,106,124,125,139,142,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'type':([0,2,3,28,32,50,54,55,70,72,75,106,107,124,125,139,142,],[9,9,9,33,51,51,71,33,71,71,71,71,71,71,71,71,71,]),'new_type':([0,2,3,54,70,72,75,106,124,125,139,142,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'declarators':([9,30,51,71,],[24,44,69,24,]),'declarator_1':([9,30,51,71,],[25,25,25,25,]),'declarator_2':([9,30,33,51,71,],[26,26,52,26,26,]),'params':([28,55,],[34,87,]),'param':([28,55,],[36,36,]),'expression':([29,31,48,54,56,70,72,75,86,91,104,105,106,107,123,124,125,130,131,139,142,],[39,47,66,76,88,76,76,76,108,66,112,113,76,118,118,76,76,134,118,76,76,]),'assignment_expr':([29,31,48,54,56,70,72,75,86,91,104,105,106,107,123,124,125,130,131,139,142,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'initializer':([31,],[46,]),'new_type_params':([32,50,],[49,68,]),'new_type_param':([32,50,],[50,50,]),'assignmenteq_op':([37,],[56,]),'expressions':([48,91,],[65,109,]),'statements':([54,70,72,75,106,124,125,139,142,],[73,94,97,100,97,97,97,97,97,]),'statement':([54,70,72,75,106,124,125,139,142,],[75,75,75,75,75,75,75,75,75,]),'conditional':([54,70,72,75,106,124,125,136,139,142,],[79,79,79,79,79,79,79,140,79,79,]),'iteration':([54,70,72,75,106,124,125,139,142,],[80,80,80,80,80,80,80,80,80,]),'jump':([54,70,72,75,106,124,125,139,142,],[81,81,81,81,81,81,81,81,81,]),'stats_or_null':([72,106,124,125,139,142,],[96,114,128,129,143,144,]),'empty':([72,106,107,123,124,125,131,139,142,],[98,98,119,119,98,98,119,98,98,]),'expr_or_null_or_init':([107,],[115,]),'expr_or_null':([107,123,131,],[116,127,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',30),
  ('program -> external_decl program','program',2,'p_program','parser.py',31),
  ('program -> include','program',1,'p_program_end','parser.py',38),
  ('program -> external_decl','program',1,'p_program_end','parser.py',39),
  ('include -> INCLUDE','include',1,'p_include','parser.py',50),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',59),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',60),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',67),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',68),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',75),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',84),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',91),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',98),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',105),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',112),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',119),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',126),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',133),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',140),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',141),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',151),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',158),
  ('expression -> ID','expression',1,'p_expression','parser.py',165),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',166),
  ('expression -> CHR','expression',1,'p_expression','parser.py',167),
  ('expression -> STR','expression',1,'p_expression','parser.py',168),
  ('expression -> assignment_expr','expression',1,'p_expression','parser.py',169),
  ('new_type_dec -> new_type ID { new_type_params } ;','new_type_dec',6,'p_new_type_dec','parser.py',180),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',187),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',188),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',195),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',202),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',209),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',218),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',225),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',232),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',239),
  ('params -> param , params','params',3,'p_params','parser.py',246),
  ('params -> param','params',1,'p_params_end','parser.py',253),
  ('param -> type declarator_2','param',2,'p_param','parser.py',260),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',269),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',276),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',283),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',284),
  ('statement -> conditional','statement',1,'p_statement','parser.py',285),
  ('statement -> iteration','statement',1,'p_statement','parser.py',286),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',287),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',294),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',303),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',310),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',317),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',326),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',333),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',334),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',344),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',351),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',358),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',365),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',366),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',373),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',374),
  ('assignment_expr -> ID assignmenteq_op expression','assignment_expr',3,'p_assignment_expr','parser.py',381),
  ('assignmenteq_op -> =','assignmenteq_op',1,'p_assignment_op','parser.py',389),
  ('assignmenteq_op -> MULTEQ','assignmenteq_op',1,'p_assignment_op','parser.py',390),
  ('assignmenteq_op -> ADDEQ','assignmenteq_op',1,'p_assignment_op','parser.py',391),
  ('assignmenteq_op -> SUBEQ','assignmenteq_op',1,'p_assignment_op','parser.py',392),
  ('assignmenteq_op -> MODEQ','assignmenteq_op',1,'p_assignment_op','parser.py',393),
  ('assignmenteq_op -> DIVEQ','assignmenteq_op',1,'p_assignment_op','parser.py',394),
  ('jump -> RETURN expression','jump',2,'p_jump','parser.py',410),
  ('type -> VOID','type',1,'p_type','parser.py',419),
  ('type -> CHAR','type',1,'p_type','parser.py',420),
  ('type -> SHORT','type',1,'p_type','parser.py',421),
  ('type -> INT','type',1,'p_type','parser.py',422),
  ('type -> LONG','type',1,'p_type','parser.py',423),
  ('type -> FLOAT','type',1,'p_type','parser.py',424),
  ('type -> DOUBLE','type',1,'p_type','parser.py',425),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',432),
]
