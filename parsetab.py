
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=MULTEQDIVEQADDEQSUBEQleft?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        external_decl : ';'\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' declarators\n    \n        new_type_dec    : new_type ID declarators\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression  : expression '=' expression\n                    | expression ADDEQ expression\n                    | expression SUBEQ expression\n                    | expression MULTEQ expression\n                    | expression DIVEQ expression\n                    | expression MODEQ expression\n    \n        expression : '(' expression ')'\n    \n        expression : tern_expr\n    \n        tern_expr  : tern_expr '?' tern_expr ':' tern_expr\n    \n        tern_expr : bin_expr\n    \n        bin_expr    : pre_unary_expr bin_op bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        bin_op      : '+'\n                    | '-'\n                    | '*'\n                    | '/'\n                    | LOGAND\n                    | LOGOR\n                    | LOGEQ\n                    | LOGNEQ\n                    | LSHIFT\n                    | RSHIFT\n                    | '<'\n                    | '>'\n                    | LEQ\n                    | GEQ\n                    | '^'\t\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,7,23,115,150,154,168,],[4,4,4,-5,-8,-7,-6,-33,-32,-31,-30,]),';':([0,2,3,4,5,6,7,8,9,23,24,25,26,27,33,35,38,40,41,44,45,46,52,53,54,55,56,57,58,59,67,69,94,95,96,97,98,101,102,107,108,110,111,113,115,116,117,118,119,120,121,122,127,128,129,131,132,133,134,135,136,137,139,141,143,144,145,147,150,154,156,157,158,161,162,163,165,166,168,169,173,174,175,176,177,178,182,183,184,186,191,192,196,198,199,200,201,204,205,],[6,6,6,-5,23,-8,-7,-9,-10,-6,-16,-11,-13,-14,-16,-24,-17,-105,-18,-71,-73,-75,-96,-104,-106,-107,-108,-12,-15,-20,118,-19,-91,-92,-93,-94,-95,-100,-101,-17,-22,148,118,118,-33,118,156,-44,157,-41,-42,158,-58,-59,-60,-64,-65,-66,-67,-68,-69,-70,-74,-98,-102,-103,-21,-23,-32,-31,-39,-40,-43,118,-116,-61,-97,-99,-30,-48,182,-56,-57,-54,-55,-72,-116,118,118,190,-45,-51,200,118,-46,-52,118,-47,-53,]),'VOID':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[12,12,12,-5,-8,-7,-6,12,12,12,12,12,12,12,-33,12,-44,-41,-42,-29,-32,-31,-39,-40,-43,12,12,-30,-48,12,12,-45,-51,12,-46,-52,12,-47,-53,]),'CHAR':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[13,13,13,-5,-8,-7,-6,13,13,13,13,13,13,13,-33,13,-44,-41,-42,-29,-32,-31,-39,-40,-43,13,13,-30,-48,13,13,-45,-51,13,-46,-52,13,-47,-53,]),'SHORT':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[14,14,14,-5,-8,-7,-6,14,14,14,14,14,14,14,-33,14,-44,-41,-42,-29,-32,-31,-39,-40,-43,14,14,-30,-48,14,14,-45,-51,14,-46,-52,14,-47,-53,]),'INT':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[15,15,15,-5,-8,-7,-6,15,15,15,15,15,15,15,-33,15,-44,-41,-42,-29,-32,-31,-39,-40,-43,15,15,-30,-48,15,15,-45,-51,15,-46,-52,15,-47,-53,]),'LONG':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[16,16,16,-5,-8,-7,-6,16,16,16,16,16,16,16,-33,16,-44,-41,-42,-29,-32,-31,-39,-40,-43,16,16,-30,-48,16,16,-45,-51,16,-46,-52,16,-47,-53,]),'FLOAT':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[17,17,17,-5,-8,-7,-6,17,17,17,17,17,17,17,-33,17,-44,-41,-42,-29,-32,-31,-39,-40,-43,17,17,-30,-48,17,17,-45,-51,17,-46,-52,17,-47,-53,]),'DOUBLE':([0,2,3,4,6,7,23,29,34,63,67,68,111,113,115,116,118,120,121,148,150,154,156,157,158,161,162,168,169,183,184,191,192,198,199,200,201,204,205,],[18,18,18,-5,-8,-7,-6,18,18,18,18,18,18,18,-33,18,-44,-41,-42,-29,-32,-31,-39,-40,-43,18,18,-30,-48,18,18,-45,-51,18,-46,-52,18,-47,-53,]),'STRUCT':([0,2,3,4,6,7,23,67,111,113,115,116,118,120,121,150,154,156,157,158,161,168,169,183,184,191,192,198,199,200,201,204,205,],[19,19,19,-5,-8,-7,-6,19,19,19,-33,19,-44,-41,-42,-32,-31,-39,-40,-43,19,-30,-48,19,19,-45,-51,19,-46,-52,19,-47,-53,]),'CLASS':([0,2,3,4,6,7,23,67,111,113,115,116,118,120,121,150,154,156,157,158,161,168,169,183,184,191,192,198,199,200,201,204,205,],[20,20,20,-5,-8,-7,-6,20,20,20,-33,20,-44,-41,-42,-32,-31,-39,-40,-43,20,-30,-48,20,20,-45,-51,20,-46,-52,20,-47,-53,]),'$end':([1,2,3,4,6,7,21,22,23,115,150,154,168,],[0,-3,-4,-5,-8,-7,-1,-2,-6,-33,-32,-31,-30,]),'ID':([10,11,12,13,14,15,16,17,18,19,20,28,30,31,32,36,43,47,48,49,50,51,60,64,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,103,104,108,111,112,113,116,118,120,121,129,146,156,157,158,159,160,161,162,164,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[24,28,-109,-110,-111,-112,-113,-114,-115,-25,-26,33,40,33,40,33,40,40,40,40,40,40,40,33,40,40,40,40,40,40,40,40,40,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,40,40,143,144,33,40,33,40,40,-44,-41,-42,40,40,-39,-40,-43,40,40,40,40,40,-48,40,40,40,40,40,-45,-51,40,-46,-52,40,-47,-53,]),'(':([24,30,32,33,40,43,52,53,54,55,56,60,67,70,71,72,73,74,75,99,100,101,102,111,113,116,118,120,121,123,124,126,129,141,143,144,146,156,157,158,159,160,161,162,165,166,169,182,183,184,185,189,190,191,192,198,199,200,201,204,205,],[29,43,43,61,-105,43,100,-104,-106,-107,-108,43,43,43,43,43,43,43,43,43,43,-100,-101,43,43,43,-44,-41,-42,159,160,162,43,-98,-102,-103,43,-39,-40,-43,43,43,43,43,-97,-99,-48,43,43,43,189,43,43,-45,-51,43,-46,-52,43,-47,-53,]),'=':([24,27,33,38,40,41,42,44,45,46,52,53,54,55,56,59,69,76,94,95,96,97,98,101,102,106,107,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-16,32,-16,-17,-105,-18,70,-71,-73,-75,-96,-104,-106,-107,-108,70,-19,70,-91,-92,-93,-94,-95,-100,-101,70,-17,70,-64,-65,-66,-67,-68,70,-70,-74,70,-98,-102,-103,70,-97,-99,70,70,70,-72,70,]),',':([24,26,27,33,38,39,40,41,44,45,46,52,53,54,55,56,58,59,65,69,94,95,96,97,98,101,102,106,107,131,132,133,134,135,136,137,139,141,143,144,145,165,166,178,],[-16,31,-14,-16,-17,68,-105,-18,-71,-73,-75,-96,-104,-106,-107,-108,-15,-20,-36,-19,-91,-92,-93,-94,-95,-100,-101,146,-17,-64,-65,-66,-67,-68,-69,-70,-74,-98,-102,-103,-21,-97,-99,-72,]),'[':([24,33,40,52,53,54,55,56,101,102,141,143,144,165,166,],[30,30,-105,99,-104,-106,-107,-108,-100,-101,-98,-102,-103,-97,-99,]),'{':([28,32,38,66,67,111,113,116,118,120,121,125,156,157,158,161,169,179,180,183,184,191,192,195,197,198,199,200,201,204,205,],[34,60,67,111,113,113,113,113,-44,-41,-42,161,-39,-40,-43,113,-48,183,184,113,113,-45,-51,198,201,113,-46,-52,113,-47,-53,]),')':([29,33,37,39,40,41,44,45,46,52,53,54,55,56,61,65,69,76,94,95,96,97,98,100,101,102,106,107,130,131,132,133,134,135,136,137,139,141,142,143,144,165,166,167,170,171,176,177,178,190,193,194,],[38,-16,66,-35,-105,-18,-71,-73,-75,-96,-104,-106,-107,-108,107,-36,-19,137,-91,-92,-93,-94,-95,141,-100,-101,-63,-17,-34,-64,-65,-66,-67,-68,-69,-70,-74,-98,166,-102,-103,-97,-99,-62,179,180,-54,-55,-72,-116,196,197,]),']':([30,40,42,44,45,46,52,53,54,55,56,94,95,96,97,98,101,102,131,132,133,134,135,136,137,139,140,141,143,144,165,166,178,],[41,-105,69,-71,-73,-75,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-64,-65,-66,-67,-68,-69,-70,-74,165,-98,-102,-103,-97,-99,-72,]),'PLUSPLUS':([30,32,40,43,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,111,113,116,118,120,121,129,141,143,144,146,156,157,158,159,160,161,162,164,165,166,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[47,47,-105,47,47,47,47,47,47,101,-104,-106,-107,-108,47,47,47,47,47,47,47,47,47,47,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,47,47,-100,-101,47,47,47,-44,-41,-42,47,-98,-102,-103,47,-39,-40,-43,47,47,47,47,47,-97,-99,-48,47,47,47,47,47,-45,-51,47,-46,-52,47,-47,-53,]),'MINUSMINUS':([30,32,40,43,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,111,113,116,118,120,121,129,141,143,144,146,156,157,158,159,160,161,162,164,165,166,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[48,48,-105,48,48,48,48,48,48,102,-104,-106,-107,-108,48,48,48,48,48,48,48,48,48,48,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,48,48,-100,-101,48,48,48,-44,-41,-42,48,-98,-102,-103,48,-39,-40,-43,48,48,48,48,48,-97,-99,-48,48,48,48,48,48,-45,-51,48,-46,-52,48,-47,-53,]),'+':([30,32,40,43,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,113,116,118,120,121,129,141,143,144,146,156,157,158,159,160,161,162,164,165,166,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[49,49,-105,49,79,49,49,49,49,49,-96,-104,-106,-107,-108,49,49,49,49,49,49,49,49,49,49,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,49,49,-100,-101,49,49,49,-44,-41,-42,49,-98,-102,-103,49,-39,-40,-43,49,49,49,49,49,-97,-99,-48,49,49,49,49,49,-45,-51,49,-46,-52,49,-47,-53,]),'-':([30,32,40,43,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,113,116,118,120,121,129,141,143,144,146,156,157,158,159,160,161,162,164,165,166,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[50,50,-105,50,80,50,50,50,50,50,-96,-104,-106,-107,-108,50,50,50,50,50,50,50,50,50,50,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,50,50,-100,-101,50,50,50,-44,-41,-42,50,-98,-102,-103,50,-39,-40,-43,50,50,50,50,50,-97,-99,-48,50,50,50,50,50,-45,-51,50,-46,-52,50,-47,-53,]),'!':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,111,113,116,118,120,121,129,146,156,157,158,159,160,161,162,164,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,51,51,51,51,51,-44,-41,-42,51,51,-39,-40,-43,51,51,51,51,51,-48,51,51,51,51,51,-45,-51,51,-46,-52,51,-47,-53,]),'NUMBER':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,111,113,116,118,120,121,129,146,156,157,158,159,160,161,162,164,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,54,54,54,54,54,-44,-41,-42,54,54,-39,-40,-43,54,54,54,54,54,-48,54,54,54,54,54,-45,-51,54,-46,-52,54,-47,-53,]),'CHR':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,111,113,116,118,120,121,129,146,156,157,158,159,160,161,162,164,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,55,55,55,55,55,-44,-41,-42,55,55,-39,-40,-43,55,55,55,55,55,-48,55,55,55,55,55,-45,-51,55,-46,-52,55,-47,-53,]),'STR':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,111,113,116,118,120,121,129,146,156,157,158,159,160,161,162,164,169,182,183,184,189,190,191,192,198,199,200,201,204,205,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,56,56,56,56,56,-44,-41,-42,56,56,-39,-40,-43,56,56,56,56,56,-48,56,56,56,56,56,-45,-51,56,-46,-52,56,-47,-53,]),'.':([40,52,53,54,55,56,101,102,141,143,144,165,166,],[-105,103,-104,-106,-107,-108,-100,-101,-98,-102,-103,-97,-99,]),'RARROW':([40,52,53,54,55,56,101,102,141,143,144,165,166,],[-105,104,-104,-106,-107,-108,-100,-101,-98,-102,-103,-97,-99,]),'*':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,81,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'/':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,82,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LOGAND':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,83,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LOGOR':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,84,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LOGEQ':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,85,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LOGNEQ':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,86,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LSHIFT':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,87,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'RSHIFT':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,88,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'<':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,89,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'>':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,90,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'LEQ':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,91,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'GEQ':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,92,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'^':([40,46,52,53,54,55,56,94,95,96,97,98,101,102,141,143,144,165,166,],[-105,93,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,-98,-102,-103,-97,-99,]),'?':([40,44,45,46,52,53,54,55,56,94,95,96,97,98,101,102,138,139,141,143,144,165,166,178,],[-105,77,-73,-75,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,77,-74,-98,-102,-103,-97,-99,-72,]),'ADDEQ':([40,42,44,45,46,52,53,54,55,56,59,76,94,95,96,97,98,101,102,106,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-105,71,-71,-73,-75,-96,-104,-106,-107,-108,71,71,-91,-92,-93,-94,-95,-100,-101,71,71,-64,-65,-66,-67,-68,71,-70,-74,71,-98,-102,-103,71,-97,-99,71,71,71,-72,71,]),'SUBEQ':([40,42,44,45,46,52,53,54,55,56,59,76,94,95,96,97,98,101,102,106,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-105,72,-71,-73,-75,-96,-104,-106,-107,-108,72,72,-91,-92,-93,-94,-95,-100,-101,72,72,-64,-65,-66,-67,-68,72,-70,-74,72,-98,-102,-103,72,-97,-99,72,72,72,-72,72,]),'MULTEQ':([40,42,44,45,46,52,53,54,55,56,59,76,94,95,96,97,98,101,102,106,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-105,73,-71,-73,-75,-96,-104,-106,-107,-108,73,73,-91,-92,-93,-94,-95,-100,-101,73,73,-64,-65,-66,-67,-68,73,-70,-74,73,-98,-102,-103,73,-97,-99,73,73,73,-72,73,]),'DIVEQ':([40,42,44,45,46,52,53,54,55,56,59,76,94,95,96,97,98,101,102,106,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-105,74,-71,-73,-75,-96,-104,-106,-107,-108,74,74,-91,-92,-93,-94,-95,-100,-101,74,74,-64,-65,-66,-67,-68,74,-70,-74,74,-98,-102,-103,74,-97,-99,74,74,74,-72,74,]),'MODEQ':([40,42,44,45,46,52,53,54,55,56,59,76,94,95,96,97,98,101,102,106,117,131,132,133,134,135,136,137,139,140,141,143,144,163,165,166,170,171,176,178,193,],[-105,75,-71,-73,-75,-96,-104,-106,-107,-108,75,75,-91,-92,-93,-94,-95,-100,-101,75,75,-64,-65,-66,-67,-68,75,-70,-74,75,-98,-102,-103,75,-97,-99,75,75,75,-72,75,]),'}':([40,44,45,46,52,53,54,55,56,62,63,67,94,95,96,97,98,101,102,105,106,109,111,113,114,116,118,120,121,131,132,133,134,135,136,137,139,141,143,144,148,149,151,152,153,155,156,157,158,161,165,166,167,169,172,178,183,184,187,188,191,192,198,199,200,201,202,203,204,205,],[-105,-71,-73,-75,-96,-104,-106,-107,-108,108,-28,115,-91,-92,-93,-94,-95,-100,-101,145,-63,-27,150,-116,154,-38,-44,-41,-42,-64,-65,-66,-67,-68,-69,-70,-74,-98,-102,-103,-29,168,169,-49,-50,-37,-39,-40,-43,-116,-97,-99,-62,-48,181,-72,-116,-116,191,192,-45,-51,-116,-46,-52,-116,204,205,-47,-53,]),':':([40,45,46,52,53,54,55,56,94,95,96,97,98,101,102,138,139,141,143,144,165,166,178,],[-105,-73,-75,-96,-104,-106,-107,-108,-91,-92,-93,-94,-95,-100,-101,164,-74,-98,-102,-103,-97,-99,-72,]),'IF':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,195,198,199,200,201,204,205,],[123,123,123,123,-44,-41,-42,-39,-40,-43,123,-48,123,123,-45,-51,123,123,-46,-52,123,-47,-53,]),'WHILE':([67,111,113,116,118,120,121,156,157,158,161,169,181,183,184,191,192,198,199,200,201,204,205,],[124,124,124,124,-44,-41,-42,-39,-40,-43,124,-48,185,124,124,-45,-51,124,-46,-52,124,-47,-53,]),'DO':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,198,199,200,201,204,205,],[125,125,125,125,-44,-41,-42,-39,-40,-43,125,-48,125,125,-45,-51,125,-46,-52,125,-47,-53,]),'FOR':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,198,199,200,201,204,205,],[126,126,126,126,-44,-41,-42,-39,-40,-43,126,-48,126,126,-45,-51,126,-46,-52,126,-47,-53,]),'BREAK':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,198,199,200,201,204,205,],[127,127,127,127,-44,-41,-42,-39,-40,-43,127,-48,127,127,-45,-51,127,-46,-52,127,-47,-53,]),'CONTINUE':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,198,199,200,201,204,205,],[128,128,128,128,-44,-41,-42,-39,-40,-43,128,-48,128,128,-45,-51,128,-46,-52,128,-47,-53,]),'RETURN':([67,111,113,116,118,120,121,156,157,158,161,169,183,184,191,192,198,199,200,201,204,205,],[129,129,129,129,-44,-41,-42,-39,-40,-43,129,-48,129,129,-45,-51,129,-46,-52,129,-47,-53,]),'ELSE':([191,],[195,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,21,22,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,67,111,113,116,161,183,184,198,201,],[5,5,5,119,119,119,119,119,119,119,119,119,]),'func_def':([0,2,3,],[7,7,7,]),'usual_dec':([0,2,3,67,111,113,116,161,162,183,184,198,201,],[8,8,8,8,8,8,8,8,175,8,8,8,8,]),'new_type_dec':([0,2,3,67,111,113,116,161,183,184,198,201,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,3,29,34,63,67,68,111,113,116,161,162,183,184,198,201,],[10,10,10,36,64,64,112,36,112,112,112,112,112,112,112,112,112,]),'new_type':([0,2,3,67,111,113,116,161,183,184,198,201,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'declarators':([10,28,31,64,108,112,],[25,35,57,110,147,25,]),'declarator_1':([10,28,31,64,108,112,],[26,26,26,26,26,26,]),'declarator_2':([10,28,31,36,64,108,112,],[27,27,27,65,27,27,27,]),'params':([29,68,],[37,130,]),'param':([29,68,],[39,39,]),'expression':([30,32,43,60,67,70,71,72,73,74,75,99,100,111,113,116,129,146,159,160,161,162,182,183,184,189,190,198,201,],[42,59,76,106,117,131,132,133,134,135,136,140,106,117,117,117,163,106,170,171,117,176,176,117,117,193,176,117,117,]),'tern_expr':([30,32,43,60,67,70,71,72,73,74,75,77,99,100,111,113,116,129,146,159,160,161,162,164,182,183,184,189,190,198,201,],[44,44,44,44,44,44,44,44,44,44,44,138,44,44,44,44,44,44,44,44,44,44,44,178,44,44,44,44,44,44,44,]),'bin_expr':([30,32,43,60,67,70,71,72,73,74,75,77,78,99,100,111,113,116,129,146,159,160,161,162,164,182,183,184,189,190,198,201,],[45,45,45,45,45,45,45,45,45,45,45,45,139,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'pre_unary_expr':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,99,100,111,113,116,129,146,159,160,161,162,164,182,183,184,189,190,198,201,],[46,46,46,94,95,96,97,98,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'post_unary_expr':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,99,100,111,113,116,129,146,159,160,161,162,164,182,183,184,189,190,198,201,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'element':([30,32,43,47,48,49,50,51,60,67,70,71,72,73,74,75,77,78,99,100,111,113,116,129,146,159,160,161,162,164,182,183,184,189,190,198,201,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'initializer':([32,],[58,]),'new_type_params':([34,63,],[62,109,]),'new_type_param':([34,63,],[63,63,]),'bin_op':([46,],[78,]),'expressions':([60,100,146,],[105,142,167,]),'statements':([67,111,113,116,161,183,184,198,201,],[114,149,152,155,152,152,152,152,152,]),'statement':([67,111,113,116,161,183,184,198,201,],[116,116,116,116,116,116,116,116,116,]),'conditional':([67,111,113,116,161,183,184,195,198,201,],[120,120,120,120,120,120,120,199,120,120,]),'iteration':([67,111,113,116,161,183,184,198,201,],[121,121,121,121,121,121,121,121,121,]),'jump':([67,111,113,116,161,183,184,198,201,],[122,122,122,122,122,122,122,122,122,]),'stats_or_null':([113,161,183,184,198,201,],[151,172,187,188,202,203,]),'empty':([113,161,162,182,183,184,190,198,201,],[153,153,177,177,153,153,177,153,153,]),'expr_or_null_or_init':([162,],[173,]),'expr_or_null':([162,182,190,],[174,186,194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',39),
  ('program -> external_decl program','program',2,'p_program','parser.py',40),
  ('program -> include','program',1,'p_program_end','parser.py',47),
  ('program -> external_decl','program',1,'p_program_end','parser.py',48),
  ('include -> INCLUDE','include',1,'p_include','parser.py',59),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',68),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',69),
  ('external_decl -> ;','external_decl',1,'p_external_declaration_extra_semicolon','parser.py',76),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',83),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',84),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',91),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',100),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',107),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',114),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',121),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',128),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',135),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',142),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',149),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',156),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',157),
  ('new_type_dec -> new_type ID { new_type_params }','new_type_dec',5,'p_new_type_dec','parser.py',172),
  ('new_type_dec -> new_type ID { new_type_params } declarators','new_type_dec',6,'p_new_type_dec_winit','parser.py',179),
  ('new_type_dec -> new_type ID declarators','new_type_dec',3,'p_new_type_dec_wodef','parser.py',186),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',193),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',194),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',201),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',208),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',215),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',224),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',231),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',238),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',245),
  ('params -> param , params','params',3,'p_params','parser.py',252),
  ('params -> param','params',1,'p_params_end','parser.py',259),
  ('param -> type declarator_2','param',2,'p_param','parser.py',266),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',275),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',285),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',292),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',293),
  ('statement -> conditional','statement',1,'p_statement','parser.py',294),
  ('statement -> iteration','statement',1,'p_statement','parser.py',295),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',296),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',303),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',312),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',319),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',326),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',335),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',342),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',343),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',353),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',360),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',367),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',374),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',375),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',382),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',383),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',390),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',391),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',392),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',399),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',410),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',417),
  ('expression -> expression = expression','expression',3,'p_expression','parser.py',424),
  ('expression -> expression ADDEQ expression','expression',3,'p_expression','parser.py',425),
  ('expression -> expression SUBEQ expression','expression',3,'p_expression','parser.py',426),
  ('expression -> expression MULTEQ expression','expression',3,'p_expression','parser.py',427),
  ('expression -> expression DIVEQ expression','expression',3,'p_expression','parser.py',428),
  ('expression -> expression MODEQ expression','expression',3,'p_expression','parser.py',429),
  ('expression -> ( expression )','expression',3,'p_expression_wparenth','parser.py',436),
  ('expression -> tern_expr','expression',1,'p_expression_to_ternary','parser.py',443),
  ('tern_expr -> tern_expr ? tern_expr : tern_expr','tern_expr',5,'p_ternary_expr','parser.py',450),
  ('tern_expr -> bin_expr','tern_expr',1,'p_ternary_expr_to_binary','parser.py',457),
  ('bin_expr -> pre_unary_expr bin_op bin_expr','bin_expr',3,'p_binary_expr','parser.py',464),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',471),
  ('bin_op -> +','bin_op',1,'p_binary_operator','parser.py',478),
  ('bin_op -> -','bin_op',1,'p_binary_operator','parser.py',479),
  ('bin_op -> *','bin_op',1,'p_binary_operator','parser.py',480),
  ('bin_op -> /','bin_op',1,'p_binary_operator','parser.py',481),
  ('bin_op -> LOGAND','bin_op',1,'p_binary_operator','parser.py',482),
  ('bin_op -> LOGOR','bin_op',1,'p_binary_operator','parser.py',483),
  ('bin_op -> LOGEQ','bin_op',1,'p_binary_operator','parser.py',484),
  ('bin_op -> LOGNEQ','bin_op',1,'p_binary_operator','parser.py',485),
  ('bin_op -> LSHIFT','bin_op',1,'p_binary_operator','parser.py',486),
  ('bin_op -> RSHIFT','bin_op',1,'p_binary_operator','parser.py',487),
  ('bin_op -> <','bin_op',1,'p_binary_operator','parser.py',488),
  ('bin_op -> >','bin_op',1,'p_binary_operator','parser.py',489),
  ('bin_op -> LEQ','bin_op',1,'p_binary_operator','parser.py',490),
  ('bin_op -> GEQ','bin_op',1,'p_binary_operator','parser.py',491),
  ('bin_op -> ^','bin_op',1,'p_binary_operator','parser.py',492),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',499),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',500),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',501),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',502),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',503),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',510),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',517),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',524),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',531),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',538),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',539),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',546),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',547),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_element','parser.py',554),
  ('element -> ID','element',1,'p_element','parser.py',561),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',568),
  ('element -> CHR','element',1,'p_element_const','parser.py',569),
  ('element -> STR','element',1,'p_element_const','parser.py',570),
  ('type -> VOID','type',1,'p_type','parser.py',579),
  ('type -> CHAR','type',1,'p_type','parser.py',580),
  ('type -> SHORT','type',1,'p_type','parser.py',581),
  ('type -> INT','type',1,'p_type','parser.py',582),
  ('type -> LONG','type',1,'p_type','parser.py',583),
  ('type -> FLOAT','type',1,'p_type','parser.py',584),
  ('type -> DOUBLE','type',1,'p_type','parser.py',585),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',592),
]
