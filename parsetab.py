
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADDEQSUBEQMODEQMULTEQDIVEQ=left?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTLATleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        external_decl : ';'\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' declarators\n    \n        new_type_dec    : new_type ID declarators\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression : tern_expr\n    \n        tern_expr  : tern_expr '?' tern_expr ':' tern_expr\n    \n        tern_expr : bin_expr\n    \n        bin_expr        : bin_expr '+' bin_expr\n                        | bin_expr '-' bin_expr\n                        | bin_expr '*' bin_expr\n                        | bin_expr '/' bin_expr\n                        | bin_expr '^' bin_expr\n                        | bin_expr '>' bin_expr\n                        | bin_expr '<' bin_expr\n                        | bin_expr LOGAND bin_expr\n                        | bin_expr LOGOR bin_expr\n                        | bin_expr LOGEQ bin_expr\n                        | bin_expr LOGNEQ bin_expr\n                        | bin_expr LEQ bin_expr\n                        | bin_expr GEQ bin_expr\n                        | bin_expr LSHIFT bin_expr\n                        | bin_expr RSHIFT bin_expr\n                        | bin_expr '=' bin_expr\n                        | bin_expr ADDEQ bin_expr\n                        | bin_expr SUBEQ bin_expr\n                        | bin_expr MULTEQ bin_expr\n                        | bin_expr DIVEQ bin_expr\n                        | bin_expr MODEQ bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n                        | '&' pre_unary_expr %prec LAT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        element : '(' expression ')'\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,7,23,116,165,169,183,],[4,4,4,-5,-8,-7,-6,-33,-32,-31,-30,]),';':([0,2,3,4,5,6,7,8,9,23,24,25,26,27,33,35,38,40,41,43,44,47,52,54,55,56,57,58,59,60,68,70,93,94,95,96,97,98,101,102,108,109,111,112,114,116,117,118,119,120,121,122,123,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,160,162,165,169,171,172,173,176,177,178,180,181,183,184,188,189,190,191,192,193,197,198,199,201,206,207,211,213,214,215,216,219,220,],[6,6,6,-5,23,-8,-7,-9,-10,-6,-16,-11,-13,-14,-16,-24,-17,-104,-18,-64,-66,-88,-95,-103,-105,-106,-107,-12,-15,-20,119,-19,-91,-92,-89,-90,-93,-94,-99,-100,-17,-22,163,119,119,-33,119,171,-44,172,-41,-42,173,-58,-59,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-21,-23,-32,-31,-39,-40,-43,119,-116,-61,-96,-98,-30,-48,197,-56,-57,-54,-55,-65,-116,119,119,205,-45,-51,215,119,-46,-52,119,-47,-53,]),'VOID':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[12,12,12,-5,-8,-7,-6,12,12,12,12,12,12,12,-33,12,-44,-41,-42,-29,-32,-31,-39,-40,-43,12,12,-30,-48,12,12,-45,-51,12,-46,-52,12,-47,-53,]),'CHAR':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[13,13,13,-5,-8,-7,-6,13,13,13,13,13,13,13,-33,13,-44,-41,-42,-29,-32,-31,-39,-40,-43,13,13,-30,-48,13,13,-45,-51,13,-46,-52,13,-47,-53,]),'SHORT':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[14,14,14,-5,-8,-7,-6,14,14,14,14,14,14,14,-33,14,-44,-41,-42,-29,-32,-31,-39,-40,-43,14,14,-30,-48,14,14,-45,-51,14,-46,-52,14,-47,-53,]),'INT':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[15,15,15,-5,-8,-7,-6,15,15,15,15,15,15,15,-33,15,-44,-41,-42,-29,-32,-31,-39,-40,-43,15,15,-30,-48,15,15,-45,-51,15,-46,-52,15,-47,-53,]),'LONG':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[16,16,16,-5,-8,-7,-6,16,16,16,16,16,16,16,-33,16,-44,-41,-42,-29,-32,-31,-39,-40,-43,16,16,-30,-48,16,16,-45,-51,16,-46,-52,16,-47,-53,]),'FLOAT':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[17,17,17,-5,-8,-7,-6,17,17,17,17,17,17,17,-33,17,-44,-41,-42,-29,-32,-31,-39,-40,-43,17,17,-30,-48,17,17,-45,-51,17,-46,-52,17,-47,-53,]),'DOUBLE':([0,2,3,4,6,7,23,29,34,64,68,69,112,114,116,117,119,121,122,163,165,169,171,172,173,176,177,183,184,198,199,206,207,213,214,215,216,219,220,],[18,18,18,-5,-8,-7,-6,18,18,18,18,18,18,18,-33,18,-44,-41,-42,-29,-32,-31,-39,-40,-43,18,18,-30,-48,18,18,-45,-51,18,-46,-52,18,-47,-53,]),'STRUCT':([0,2,3,4,6,7,23,68,112,114,116,117,119,121,122,165,169,171,172,173,176,183,184,198,199,206,207,213,214,215,216,219,220,],[19,19,19,-5,-8,-7,-6,19,19,19,-33,19,-44,-41,-42,-32,-31,-39,-40,-43,19,-30,-48,19,19,-45,-51,19,-46,-52,19,-47,-53,]),'CLASS':([0,2,3,4,6,7,23,68,112,114,116,117,119,121,122,165,169,171,172,173,176,183,184,198,199,206,207,213,214,215,216,219,220,],[20,20,20,-5,-8,-7,-6,20,20,20,-33,20,-44,-41,-42,-32,-31,-39,-40,-43,20,-30,-48,20,20,-45,-51,20,-46,-52,20,-47,-53,]),'$end':([1,2,3,4,6,7,21,22,23,116,165,169,183,],[0,-3,-4,-5,-8,-7,-1,-2,-6,-33,-32,-31,-30,]),'ID':([10,11,12,13,14,15,16,17,18,19,20,28,30,31,32,36,45,46,48,49,50,51,53,61,65,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,103,104,109,112,113,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[24,28,-109,-110,-111,-112,-113,-114,-115,-25,-26,33,40,33,40,33,40,40,40,40,40,40,40,40,33,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,157,158,33,40,33,40,40,-44,-41,-42,40,40,-39,-40,-43,40,40,40,40,40,-48,40,40,40,40,40,-45,-51,40,-46,-52,40,-47,-53,]),'(':([24,30,32,33,40,45,46,48,49,50,51,52,53,54,55,56,57,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,101,102,112,114,117,119,121,122,124,125,127,130,155,157,158,159,161,171,172,173,174,175,176,177,179,180,181,184,197,198,199,200,204,205,206,207,213,214,215,216,219,220,],[29,53,53,62,-104,53,53,53,53,53,53,100,53,-103,-105,-106,-107,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-99,-100,53,53,53,-44,-41,-42,174,175,177,53,-97,-101,-102,-108,53,-39,-40,-43,53,53,53,53,53,-96,-98,-48,53,53,53,204,53,53,-45,-51,53,-46,-52,53,-47,-53,]),'=':([24,27,33,38,40,41,44,47,52,54,55,56,57,70,93,94,95,96,97,98,101,102,108,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-16,32,-16,-17,-104,-18,87,-88,-95,-103,-105,-106,-107,-19,-91,-92,-89,-90,-93,-94,-99,-100,-17,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),',':([24,26,27,33,38,39,40,41,43,44,47,52,54,55,56,57,59,60,66,70,93,94,95,96,97,98,101,102,107,108,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,160,180,181,193,],[-16,31,-14,-16,-17,69,-104,-18,-64,-66,-88,-95,-103,-105,-106,-107,-15,-20,-36,-19,-91,-92,-89,-90,-93,-94,-99,-100,161,-17,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-21,-96,-98,-65,]),'[':([24,33,40,52,54,55,56,57,101,102,155,157,158,159,180,181,],[30,30,-104,99,-103,-105,-106,-107,-99,-100,-97,-101,-102,-108,-96,-98,]),'{':([28,32,38,67,68,112,114,117,119,121,122,126,171,172,173,176,184,194,195,198,199,206,207,210,212,213,214,215,216,219,220,],[34,61,68,112,114,114,114,114,-44,-41,-42,176,-39,-40,-43,114,-48,198,199,114,114,-45,-51,213,216,114,-46,-52,114,-47,-53,]),')':([29,33,37,39,40,41,43,44,47,52,54,55,56,57,62,66,70,93,94,95,96,97,98,100,101,102,105,107,108,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,180,181,182,185,186,191,192,193,205,208,209,],[38,-16,67,-35,-104,-18,-64,-66,-88,-95,-103,-105,-106,-107,108,-36,-19,-91,-92,-89,-90,-93,-94,155,-99,-100,159,-63,-17,-34,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,181,-101,-102,-108,-96,-98,-62,194,195,-54,-55,-65,-116,211,212,]),']':([30,40,42,43,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,180,181,193,],[41,-104,70,-64,-66,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,180,-97,-101,-102,-108,-96,-98,-65,]),'PLUSPLUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,57,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,101,102,112,114,117,119,121,122,130,155,157,158,159,161,171,172,173,174,175,176,177,179,180,181,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[48,48,-104,48,48,48,48,48,48,101,48,-103,-105,-106,-107,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-99,-100,48,48,48,-44,-41,-42,48,-97,-101,-102,-108,48,-39,-40,-43,48,48,48,48,48,-96,-98,-48,48,48,48,48,48,-45,-51,48,-46,-52,48,-47,-53,]),'MINUSMINUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,57,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,101,102,112,114,117,119,121,122,130,155,157,158,159,161,171,172,173,174,175,176,177,179,180,181,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[49,49,-104,49,49,49,49,49,49,102,49,-103,-105,-106,-107,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-99,-100,49,49,49,-44,-41,-42,49,-97,-101,-102,-108,49,-39,-40,-43,49,49,49,49,49,-96,-98,-48,49,49,49,49,49,-45,-51,49,-46,-52,49,-47,-53,]),'+':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,112,114,117,119,121,122,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,161,171,172,173,174,175,176,177,179,180,181,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[45,45,-104,72,45,45,-88,45,45,45,45,-95,45,-103,-105,-106,-107,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-91,-92,-89,-90,-93,-94,45,45,-99,-100,45,45,45,-44,-41,-42,45,-67,-68,-69,-70,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-97,-101,-102,-108,45,-39,-40,-43,45,45,45,45,45,-96,-98,-48,45,45,45,45,45,-45,-51,45,-46,-52,45,-47,-53,]),'-':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,112,114,117,119,121,122,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,161,171,172,173,174,175,176,177,179,180,181,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[46,46,-104,73,46,46,-88,46,46,46,46,-95,46,-103,-105,-106,-107,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-91,-92,-89,-90,-93,-94,46,46,-99,-100,46,46,46,-44,-41,-42,46,-67,-68,-69,-70,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-97,-101,-102,-108,46,-39,-40,-43,46,46,46,46,46,-96,-98,-48,46,46,46,46,46,-45,-51,46,-46,-52,46,-47,-53,]),'!':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-44,-41,-42,50,50,-39,-40,-43,50,50,50,50,50,-48,50,50,50,50,50,-45,-51,50,-46,-52,50,-47,-53,]),'&':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-44,-41,-42,51,51,-39,-40,-43,51,51,51,51,51,-48,51,51,51,51,51,-45,-51,51,-46,-52,51,-47,-53,]),'NUMBER':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-44,-41,-42,55,55,-39,-40,-43,55,55,55,55,55,-48,55,55,55,55,55,-45,-51,55,-46,-52,55,-47,-53,]),'CHR':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-44,-41,-42,56,56,-39,-40,-43,56,56,56,56,56,-48,56,56,56,56,56,-45,-51,56,-46,-52,56,-47,-53,]),'STR':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,119,121,122,130,161,171,172,173,174,175,176,177,179,184,197,198,199,204,205,206,207,213,214,215,216,219,220,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-44,-41,-42,57,57,-39,-40,-43,57,57,57,57,57,-48,57,57,57,57,57,-45,-51,57,-46,-52,57,-47,-53,]),'.':([40,52,54,55,56,57,101,102,155,157,158,159,180,181,],[-104,103,-103,-105,-106,-107,-99,-100,-97,-101,-102,-108,-96,-98,]),'RARROW':([40,52,54,55,56,57,101,102,155,157,158,159,180,181,],[-104,104,-103,-105,-106,-107,-99,-100,-97,-101,-102,-108,-96,-98,]),'*':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,74,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,74,74,-69,-70,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-97,-101,-102,-108,-96,-98,]),'/':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,75,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,75,75,-69,-70,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-97,-101,-102,-108,-96,-98,]),'^':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,76,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,76,76,-76,-77,-78,-79,-80,-81,76,76,76,76,76,76,-97,-101,-102,-108,-96,-98,]),'>':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,77,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,77,-72,-73,77,77,77,77,-78,-79,-80,-81,77,77,77,77,77,77,-97,-101,-102,-108,-96,-98,]),'<':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,78,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,78,-72,-73,78,78,78,78,-78,-79,-80,-81,78,78,78,78,78,78,-97,-101,-102,-108,-96,-98,]),'LOGAND':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,79,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,79,-76,-77,-78,-79,-80,-81,79,79,79,79,79,79,-97,-101,-102,-108,-96,-98,]),'LOGOR':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,80,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,80,80,80,80,80,80,-97,-101,-102,-108,-96,-98,]),'LOGEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,81,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,81,-72,-73,81,81,-76,-77,-78,-79,-80,-81,81,81,81,81,81,81,-97,-101,-102,-108,-96,-98,]),'LOGNEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,82,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,82,-72,-73,82,82,-76,-77,-78,-79,-80,-81,82,82,82,82,82,82,-97,-101,-102,-108,-96,-98,]),'LEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,83,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,83,-72,-73,83,83,83,83,-78,-79,-80,-81,83,83,83,83,83,83,-97,-101,-102,-108,-96,-98,]),'GEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,84,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,84,-72,-73,84,84,84,84,-78,-79,-80,-81,84,84,84,84,84,84,-97,-101,-102,-108,-96,-98,]),'LSHIFT':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,85,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,85,85,85,85,85,85,85,85,85,-80,-81,85,85,85,85,85,85,-97,-101,-102,-108,-96,-98,]),'RSHIFT':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,86,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,86,86,86,86,86,86,86,86,86,-80,-81,86,86,86,86,86,86,-97,-101,-102,-108,-96,-98,]),'ADDEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,88,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),'SUBEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,89,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),'MULTEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,90,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),'DIVEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,91,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),'MODEQ':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,],[-104,92,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,]),'?':([40,43,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,193,],[-104,71,-66,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,71,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,-65,]),'}':([40,43,44,47,52,54,55,56,57,63,64,68,93,94,95,96,97,98,101,102,106,107,110,112,114,115,117,119,121,122,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,163,164,166,167,168,170,171,172,173,176,180,181,182,184,187,193,198,199,202,203,206,207,213,214,215,216,217,218,219,220,],[-104,-64,-66,-88,-95,-103,-105,-106,-107,109,-28,116,-91,-92,-89,-90,-93,-94,-99,-100,160,-63,-27,165,-116,169,-38,-44,-41,-42,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-29,183,184,-49,-50,-37,-39,-40,-43,-116,-96,-98,-62,-48,196,-65,-116,-116,206,207,-45,-51,-116,-46,-52,-116,219,220,-47,-53,]),':':([40,44,47,52,54,55,56,57,93,94,95,96,97,98,101,102,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,157,158,159,180,181,193,],[-104,-66,-88,-95,-103,-105,-106,-107,-91,-92,-89,-90,-93,-94,-99,-100,179,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-97,-101,-102,-108,-96,-98,-65,]),'IF':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,210,213,214,215,216,219,220,],[124,124,124,124,-44,-41,-42,-39,-40,-43,124,-48,124,124,-45,-51,124,124,-46,-52,124,-47,-53,]),'WHILE':([68,112,114,117,119,121,122,171,172,173,176,184,196,198,199,206,207,213,214,215,216,219,220,],[125,125,125,125,-44,-41,-42,-39,-40,-43,125,-48,200,125,125,-45,-51,125,-46,-52,125,-47,-53,]),'DO':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,213,214,215,216,219,220,],[126,126,126,126,-44,-41,-42,-39,-40,-43,126,-48,126,126,-45,-51,126,-46,-52,126,-47,-53,]),'FOR':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,213,214,215,216,219,220,],[127,127,127,127,-44,-41,-42,-39,-40,-43,127,-48,127,127,-45,-51,127,-46,-52,127,-47,-53,]),'BREAK':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,213,214,215,216,219,220,],[128,128,128,128,-44,-41,-42,-39,-40,-43,128,-48,128,128,-45,-51,128,-46,-52,128,-47,-53,]),'CONTINUE':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,213,214,215,216,219,220,],[129,129,129,129,-44,-41,-42,-39,-40,-43,129,-48,129,129,-45,-51,129,-46,-52,129,-47,-53,]),'RETURN':([68,112,114,117,119,121,122,171,172,173,176,184,198,199,206,207,213,214,215,216,219,220,],[130,130,130,130,-44,-41,-42,-39,-40,-43,130,-48,130,130,-45,-51,130,-46,-52,130,-47,-53,]),'ELSE':([206,],[210,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,21,22,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,68,112,114,117,176,198,199,213,216,],[5,5,5,120,120,120,120,120,120,120,120,120,]),'func_def':([0,2,3,],[7,7,7,]),'usual_dec':([0,2,3,68,112,114,117,176,177,198,199,213,216,],[8,8,8,8,8,8,8,8,190,8,8,8,8,]),'new_type_dec':([0,2,3,68,112,114,117,176,198,199,213,216,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,3,29,34,64,68,69,112,114,117,176,177,198,199,213,216,],[10,10,10,36,65,65,113,36,113,113,113,113,113,113,113,113,113,]),'new_type':([0,2,3,68,112,114,117,176,198,199,213,216,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'declarators':([10,28,31,65,109,113,],[25,35,58,111,162,25,]),'declarator_1':([10,28,31,65,109,113,],[26,26,26,26,26,26,]),'declarator_2':([10,28,31,36,65,109,113,],[27,27,27,66,27,27,27,]),'params':([29,69,],[37,131,]),'param':([29,69,],[39,39,]),'expression':([30,32,53,61,68,99,100,112,114,117,130,161,174,175,176,177,197,198,199,204,205,213,216,],[42,60,105,107,118,154,107,118,118,118,178,107,185,186,118,191,191,118,118,208,191,118,118,]),'tern_expr':([30,32,53,61,68,71,99,100,112,114,117,130,161,174,175,176,177,179,197,198,199,204,205,213,216,],[43,43,43,43,43,132,43,43,43,43,43,43,43,43,43,43,43,193,43,43,43,43,43,43,43,]),'bin_expr':([30,32,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,130,161,174,175,176,177,179,197,198,199,204,205,213,216,],[44,44,44,44,44,44,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'pre_unary_expr':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,130,161,174,175,176,177,179,197,198,199,204,205,213,216,],[47,47,93,94,95,96,97,98,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'post_unary_expr':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,130,161,174,175,176,177,179,197,198,199,204,205,213,216,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'element':([30,32,45,46,48,49,50,51,53,61,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,112,114,117,130,161,174,175,176,177,179,197,198,199,204,205,213,216,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'initializer':([32,],[59,]),'new_type_params':([34,64,],[63,110,]),'new_type_param':([34,64,],[64,64,]),'expressions':([61,100,161,],[106,156,182,]),'statements':([68,112,114,117,176,198,199,213,216,],[115,164,167,170,167,167,167,167,167,]),'statement':([68,112,114,117,176,198,199,213,216,],[117,117,117,117,117,117,117,117,117,]),'conditional':([68,112,114,117,176,198,199,210,213,216,],[121,121,121,121,121,121,121,214,121,121,]),'iteration':([68,112,114,117,176,198,199,213,216,],[122,122,122,122,122,122,122,122,122,]),'jump':([68,112,114,117,176,198,199,213,216,],[123,123,123,123,123,123,123,123,123,]),'stats_or_null':([114,176,198,199,213,216,],[166,187,202,203,217,218,]),'empty':([114,176,177,197,198,199,205,213,216,],[168,168,192,192,168,168,192,168,168,]),'expr_or_null_or_init':([177,],[188,]),'expr_or_null':([177,197,205,],[189,201,209,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',38),
  ('program -> external_decl program','program',2,'p_program','parser.py',39),
  ('program -> include','program',1,'p_program_end','parser.py',46),
  ('program -> external_decl','program',1,'p_program_end','parser.py',47),
  ('include -> INCLUDE','include',1,'p_include','parser.py',58),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',67),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',68),
  ('external_decl -> ;','external_decl',1,'p_external_declaration_extra_semicolon','parser.py',75),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',82),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',83),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',90),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',99),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',106),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',113),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',120),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',127),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',134),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',141),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',148),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',155),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',156),
  ('new_type_dec -> new_type ID { new_type_params }','new_type_dec',5,'p_new_type_dec','parser.py',171),
  ('new_type_dec -> new_type ID { new_type_params } declarators','new_type_dec',6,'p_new_type_dec_winit','parser.py',178),
  ('new_type_dec -> new_type ID declarators','new_type_dec',3,'p_new_type_dec_wodef','parser.py',185),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',192),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',193),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',200),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',207),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',214),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',223),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',230),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',237),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',244),
  ('params -> param , params','params',3,'p_params','parser.py',251),
  ('params -> param','params',1,'p_params_end','parser.py',258),
  ('param -> type declarator_2','param',2,'p_param','parser.py',265),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',274),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',284),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',291),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',292),
  ('statement -> conditional','statement',1,'p_statement','parser.py',293),
  ('statement -> iteration','statement',1,'p_statement','parser.py',294),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',295),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',302),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',311),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',318),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',325),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',334),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',341),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',342),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',354),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',361),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',368),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',375),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',376),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',386),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',387),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',394),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',395),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',396),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',403),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',414),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',421),
  ('expression -> tern_expr','expression',1,'p_expression_to_ternary','parser.py',428),
  ('tern_expr -> tern_expr ? tern_expr : tern_expr','tern_expr',5,'p_ternary_expr','parser.py',435),
  ('tern_expr -> bin_expr','tern_expr',1,'p_ternary_expr_to_binary','parser.py',442),
  ('bin_expr -> bin_expr + bin_expr','bin_expr',3,'p_binary_expr','parser.py',449),
  ('bin_expr -> bin_expr - bin_expr','bin_expr',3,'p_binary_expr','parser.py',450),
  ('bin_expr -> bin_expr * bin_expr','bin_expr',3,'p_binary_expr','parser.py',451),
  ('bin_expr -> bin_expr / bin_expr','bin_expr',3,'p_binary_expr','parser.py',452),
  ('bin_expr -> bin_expr ^ bin_expr','bin_expr',3,'p_binary_expr','parser.py',453),
  ('bin_expr -> bin_expr > bin_expr','bin_expr',3,'p_binary_expr','parser.py',454),
  ('bin_expr -> bin_expr < bin_expr','bin_expr',3,'p_binary_expr','parser.py',455),
  ('bin_expr -> bin_expr LOGAND bin_expr','bin_expr',3,'p_binary_expr','parser.py',456),
  ('bin_expr -> bin_expr LOGOR bin_expr','bin_expr',3,'p_binary_expr','parser.py',457),
  ('bin_expr -> bin_expr LOGEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',458),
  ('bin_expr -> bin_expr LOGNEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',459),
  ('bin_expr -> bin_expr LEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',460),
  ('bin_expr -> bin_expr GEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',461),
  ('bin_expr -> bin_expr LSHIFT bin_expr','bin_expr',3,'p_binary_expr','parser.py',462),
  ('bin_expr -> bin_expr RSHIFT bin_expr','bin_expr',3,'p_binary_expr','parser.py',463),
  ('bin_expr -> bin_expr = bin_expr','bin_expr',3,'p_binary_expr','parser.py',464),
  ('bin_expr -> bin_expr ADDEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',465),
  ('bin_expr -> bin_expr SUBEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',466),
  ('bin_expr -> bin_expr MULTEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',467),
  ('bin_expr -> bin_expr DIVEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',468),
  ('bin_expr -> bin_expr MODEQ bin_expr','bin_expr',3,'p_binary_expr','parser.py',469),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',476),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',483),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',484),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',485),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',486),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',487),
  ('pre_unary_expr -> & pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',488),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',495),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',502),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',509),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',516),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',523),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',524),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',531),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',532),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_parenthesis','parser.py',539),
  ('element -> ID','element',1,'p_element','parser.py',546),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',553),
  ('element -> CHR','element',1,'p_element_const','parser.py',554),
  ('element -> STR','element',1,'p_element_const','parser.py',555),
  ('element -> ( expression )','element',3,'p_element_paren_expr','parser.py',562),
  ('type -> VOID','type',1,'p_type','parser.py',571),
  ('type -> CHAR','type',1,'p_type','parser.py',572),
  ('type -> SHORT','type',1,'p_type','parser.py',573),
  ('type -> INT','type',1,'p_type','parser.py',574),
  ('type -> LONG','type',1,'p_type','parser.py',575),
  ('type -> FLOAT','type',1,'p_type','parser.py',576),
  ('type -> DOUBLE','type',1,'p_type','parser.py',577),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',584),
]
