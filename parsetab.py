
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CHAR CHR DOUBLE ELSE FLOAT GEQ ID IF INCLUDE INT LEQ LONG NUMBER RETURN SHORT STR THEN VOID WHILE break struct\n        program : include program\n                | external_decl program\n                | include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : type ID ';'\n                        | type ID '=' NUMBER ';'\n                        | type ID '=' CHR ';'\n    \n        type    : VOID \n                | CHAR \n                | SHORT \n                | INT \n                | LONG \n                | FLOAT \n                | DOUBLE\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,16,20,21,],[4,4,4,-5,-6,-7,-8,]),'VOID':([0,2,3,4,16,20,21,],[6,6,6,-5,-6,-7,-8,]),'CHAR':([0,2,3,4,16,20,21,],[7,7,7,-5,-6,-7,-8,]),'SHORT':([0,2,3,4,16,20,21,],[8,8,8,-5,-6,-7,-8,]),'INT':([0,2,3,4,16,20,21,],[9,9,9,-5,-6,-7,-8,]),'LONG':([0,2,3,4,16,20,21,],[10,10,10,-5,-6,-7,-8,]),'FLOAT':([0,2,3,4,16,20,21,],[11,11,11,-5,-6,-7,-8,]),'DOUBLE':([0,2,3,4,16,20,21,],[12,12,12,-5,-6,-7,-8,]),'$end':([1,2,3,4,13,14,16,20,21,],[0,-3,-4,-5,-1,-2,-6,-7,-8,]),'ID':([5,6,7,8,9,10,11,12,],[15,-9,-10,-11,-12,-13,-14,-15,]),';':([15,18,19,],[16,20,21,]),'=':([15,],[17,]),'NUMBER':([17,],[18,]),'CHR':([17,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,13,14,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'type':([0,2,3,],[5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',27),
  ('program -> external_decl program','program',2,'p_program','parser.py',28),
  ('program -> include','program',1,'p_program','parser.py',29),
  ('program -> external_decl','program',1,'p_program','parser.py',30),
  ('include -> INCLUDE','include',1,'p_include','parser.py',43),
  ('external_decl -> type ID ;','external_decl',3,'p_external_declaration','parser.py',50),
  ('external_decl -> type ID = NUMBER ;','external_decl',5,'p_external_declaration','parser.py',51),
  ('external_decl -> type ID = CHR ;','external_decl',5,'p_external_declaration','parser.py',52),
  ('type -> VOID','type',1,'p_type','parser.py',64),
  ('type -> CHAR','type',1,'p_type','parser.py',65),
  ('type -> SHORT','type',1,'p_type','parser.py',66),
  ('type -> INT','type',1,'p_type','parser.py',67),
  ('type -> LONG','type',1,'p_type','parser.py',68),
  ('type -> FLOAT','type',1,'p_type','parser.py',69),
  ('type -> DOUBLE','type',1,'p_type','parser.py',70),
]
