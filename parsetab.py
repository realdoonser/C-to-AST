
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=MULTEQDIVEQADDEQSUBEQleft?:leftLOGORleftLOGANDleft^leftLOGEQLOGNEQleft<>LEQGEQleftLSHIFTRSHIFTleft+-left*/rightLPLUSPLUSLMINUSMINUSLPOSLNEGLNOTleftRPLUSPLUSRMINUSMINUS.RARROWADDEQ BREAK CHAR CHR CLASS CONTINUE DIVEQ DO DOUBLE ELSE FLOAT FOR GEQ ID IF INCLUDE INT LEQ LOGAND LOGEQ LOGNEQ LOGOR LONG LSHIFT MINUSMINUS MODEQ MULTEQ NUMBER PLUSPLUS RARROW RETURN RSHIFT SHORT STR STRUCT SUBEQ VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        external_decl : ';'\n    \n        decl    : usual_dec\n                | new_type_dec\n    \n        usual_dec : type declarators\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}'\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' declarators\n    \n        new_type_dec    : new_type ID declarators\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params\n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | conditional\n                    | iteration\n                    | jump ';'\n    \n        statement : ';'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        statement : '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        iteration : WHILE '(' expression ')' '{' stats_or_null '}'\n    \n        iteration : DO '{' stats_or_null '}' WHILE '(' expression ')' ';'\n    \n        iteration : FOR '(' expr_or_null_or_init ';' expr_or_null ';' expr_or_null ')' '{' stats_or_null '}'\n    \n        expr_or_null    : expression\n                        | empty\n    \n        expr_or_null_or_init    : expr_or_null\n                                | usual_dec\n    \n        jump    : BREAK\n                | CONTINUE\n                | RETURN\n    \n        jump : RETURN expression\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression : tern_expr\n    \n        tern_expr  : tern_expr '?' tern_expr ':' tern_expr\n    \n        tern_expr : bin_expr\n    \n        bin_expr        : bin_expr '+' bin_expr\n                        | bin_expr '-' bin_expr\n                        | bin_expr '*' bin_expr\n                        | bin_expr '/' bin_expr\n                        | bin_expr '^' bin_expr\n                        | bin_expr '>' bin_expr\n                        | bin_expr '<' bin_expr\n    \n        bin_expr    : pre_unary_expr\n    \n        pre_unary_expr  : PLUSPLUS pre_unary_expr %prec LPLUSPLUS\n                        | MINUSMINUS pre_unary_expr %prec LMINUSMINUS\n                        | '+' pre_unary_expr %prec LPOS\n                        | '-' pre_unary_expr %prec LNEG\n                        | '!' pre_unary_expr %prec LNOT\n    \n        pre_unary_expr : post_unary_expr\n    \n        post_unary_expr : post_unary_expr '[' expression ']'\n    \n        post_unary_expr : post_unary_expr '(' ')'\n    \n        post_unary_expr : post_unary_expr '(' expressions ')'\n    \n        post_unary_expr : post_unary_expr PLUSPLUS %prec RPLUSPLUS\n                        | post_unary_expr MINUSMINUS %prec RMINUSMINUS\n    \n        post_unary_expr : post_unary_expr '.' ID\n                        | post_unary_expr RARROW ID\n    \n        post_unary_expr : element\n    \n        element : ID\n    \n        element : NUMBER\n                | CHR\n                | STR\n    \n        element : '(' expression ')'\n    \n        type    : VOID\n                | CHAR\n                | SHORT\n                | INT\n                | LONG\n                | FLOAT\n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,7,23,100,135,139,153,],[4,4,4,-5,-8,-7,-6,-33,-32,-31,-30,]),';':([0,2,3,4,5,6,7,8,9,23,24,25,26,27,33,35,38,40,41,43,44,47,51,53,54,55,56,57,58,59,67,69,78,79,80,81,82,85,86,92,93,95,96,98,100,101,102,103,104,105,106,107,112,113,114,117,118,119,120,121,122,123,125,127,128,129,130,132,135,139,141,142,143,146,147,148,150,151,153,154,158,159,160,161,162,163,167,168,169,171,176,177,181,183,184,185,186,189,190,],[6,6,6,-5,23,-8,-7,-9,-10,-6,-16,-11,-13,-14,-16,-24,-17,-89,-18,-64,-66,-74,-80,-88,-90,-91,-92,-12,-15,-20,103,-19,-77,-78,-75,-76,-79,-84,-85,-17,-22,133,103,103,-33,103,141,-44,142,-41,-42,143,-58,-59,-60,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-21,-23,-32,-31,-39,-40,-43,103,-101,-61,-81,-83,-30,-48,167,-56,-57,-54,-55,-65,-101,103,103,175,-45,-51,185,103,-46,-52,103,-47,-53,]),'VOID':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[12,12,12,-5,-8,-7,-6,12,12,12,12,12,12,12,-33,12,-44,-41,-42,-29,-32,-31,-39,-40,-43,12,12,-30,-48,12,12,-45,-51,12,-46,-52,12,-47,-53,]),'CHAR':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[13,13,13,-5,-8,-7,-6,13,13,13,13,13,13,13,-33,13,-44,-41,-42,-29,-32,-31,-39,-40,-43,13,13,-30,-48,13,13,-45,-51,13,-46,-52,13,-47,-53,]),'SHORT':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[14,14,14,-5,-8,-7,-6,14,14,14,14,14,14,14,-33,14,-44,-41,-42,-29,-32,-31,-39,-40,-43,14,14,-30,-48,14,14,-45,-51,14,-46,-52,14,-47,-53,]),'INT':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[15,15,15,-5,-8,-7,-6,15,15,15,15,15,15,15,-33,15,-44,-41,-42,-29,-32,-31,-39,-40,-43,15,15,-30,-48,15,15,-45,-51,15,-46,-52,15,-47,-53,]),'LONG':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[16,16,16,-5,-8,-7,-6,16,16,16,16,16,16,16,-33,16,-44,-41,-42,-29,-32,-31,-39,-40,-43,16,16,-30,-48,16,16,-45,-51,16,-46,-52,16,-47,-53,]),'FLOAT':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[17,17,17,-5,-8,-7,-6,17,17,17,17,17,17,17,-33,17,-44,-41,-42,-29,-32,-31,-39,-40,-43,17,17,-30,-48,17,17,-45,-51,17,-46,-52,17,-47,-53,]),'DOUBLE':([0,2,3,4,6,7,23,29,34,63,67,68,96,98,100,101,103,105,106,133,135,139,141,142,143,146,147,153,154,168,169,176,177,183,184,185,186,189,190,],[18,18,18,-5,-8,-7,-6,18,18,18,18,18,18,18,-33,18,-44,-41,-42,-29,-32,-31,-39,-40,-43,18,18,-30,-48,18,18,-45,-51,18,-46,-52,18,-47,-53,]),'STRUCT':([0,2,3,4,6,7,23,67,96,98,100,101,103,105,106,135,139,141,142,143,146,153,154,168,169,176,177,183,184,185,186,189,190,],[19,19,19,-5,-8,-7,-6,19,19,19,-33,19,-44,-41,-42,-32,-31,-39,-40,-43,19,-30,-48,19,19,-45,-51,19,-46,-52,19,-47,-53,]),'CLASS':([0,2,3,4,6,7,23,67,96,98,100,101,103,105,106,135,139,141,142,143,146,153,154,168,169,176,177,183,184,185,186,189,190,],[20,20,20,-5,-8,-7,-6,20,20,20,-33,20,-44,-41,-42,-32,-31,-39,-40,-43,20,-30,-48,20,20,-45,-51,20,-46,-52,20,-47,-53,]),'$end':([1,2,3,4,6,7,21,22,23,100,135,139,153,],[0,-3,-4,-5,-8,-7,-1,-2,-6,-33,-32,-31,-30,]),'ID':([10,11,12,13,14,15,16,17,18,19,20,28,30,31,32,36,45,46,48,49,50,52,60,64,67,70,71,72,73,74,75,76,77,83,84,87,88,93,96,97,98,101,103,105,106,114,131,141,142,143,144,145,146,147,149,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[24,28,-94,-95,-96,-97,-98,-99,-100,-25,-26,33,40,33,40,33,40,40,40,40,40,40,40,33,40,40,40,40,40,40,40,40,40,40,40,127,128,33,40,33,40,40,-44,-41,-42,40,40,-39,-40,-43,40,40,40,40,40,-48,40,40,40,40,40,-45,-51,40,-46,-52,40,-47,-53,]),'(':([24,30,32,33,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,83,84,85,86,96,98,101,103,105,106,108,109,111,114,125,127,128,129,131,141,142,143,144,145,146,147,149,150,151,154,167,168,169,170,174,175,176,177,183,184,185,186,189,190,],[29,52,52,61,-89,52,52,52,52,52,84,52,-88,-90,-91,-92,52,52,52,52,52,52,52,52,52,52,52,52,-84,-85,52,52,52,-44,-41,-42,144,145,147,52,-82,-86,-87,-93,52,-39,-40,-43,52,52,52,52,52,-81,-83,-48,52,52,52,174,52,52,-45,-51,52,-46,-52,52,-47,-53,]),'=':([24,27,33,38,41,69,92,],[-16,32,-16,-17,-18,-19,-17,]),',':([24,26,27,33,38,39,40,41,43,44,47,51,53,54,55,56,58,59,65,69,78,79,80,81,82,85,86,91,92,117,118,119,120,121,122,123,125,127,128,129,130,150,151,163,],[-16,31,-14,-16,-17,68,-89,-18,-64,-66,-74,-80,-88,-90,-91,-92,-15,-20,-36,-19,-77,-78,-75,-76,-79,-84,-85,131,-17,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-21,-81,-83,-65,]),'[':([24,33,40,51,53,54,55,56,85,86,125,127,128,129,150,151,],[30,30,-89,83,-88,-90,-91,-92,-84,-85,-82,-86,-87,-93,-81,-83,]),'{':([28,32,38,66,67,96,98,101,103,105,106,110,141,142,143,146,154,164,165,168,169,176,177,180,182,183,184,185,186,189,190,],[34,60,67,96,98,98,98,98,-44,-41,-42,146,-39,-40,-43,98,-48,168,169,98,98,-45,-51,183,186,98,-46,-52,98,-47,-53,]),')':([29,33,37,39,40,41,43,44,47,51,53,54,55,56,61,65,69,78,79,80,81,82,84,85,86,89,91,92,115,117,118,119,120,121,122,123,125,126,127,128,129,150,151,152,155,156,161,162,163,175,178,179,],[38,-16,66,-35,-89,-18,-64,-66,-74,-80,-88,-90,-91,-92,92,-36,-19,-77,-78,-75,-76,-79,125,-84,-85,129,-63,-17,-34,-67,-68,-69,-70,-71,-72,-73,-82,151,-86,-87,-93,-81,-83,-62,164,165,-54,-55,-65,-101,181,182,]),']':([30,40,42,43,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,124,125,127,128,129,150,151,163,],[41,-89,69,-64,-66,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,-67,-68,-69,-70,-71,-72,-73,150,-82,-86,-87,-93,-81,-83,-65,]),'PLUSPLUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,83,84,85,86,96,98,101,103,105,106,114,125,127,128,129,131,141,142,143,144,145,146,147,149,150,151,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[48,48,-89,48,48,48,48,48,85,48,-88,-90,-91,-92,48,48,48,48,48,48,48,48,48,48,48,48,-84,-85,48,48,48,-44,-41,-42,48,-82,-86,-87,-93,48,-39,-40,-43,48,48,48,48,48,-81,-83,-48,48,48,48,48,48,-45,-51,48,-46,-52,48,-47,-53,]),'MINUSMINUS':([30,32,40,45,46,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,83,84,85,86,96,98,101,103,105,106,114,125,127,128,129,131,141,142,143,144,145,146,147,149,150,151,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[49,49,-89,49,49,49,49,49,86,49,-88,-90,-91,-92,49,49,49,49,49,49,49,49,49,49,49,49,-84,-85,49,49,49,-44,-41,-42,49,-82,-86,-87,-93,49,-39,-40,-43,49,49,49,49,49,-81,-83,-48,49,49,49,49,49,-45,-51,49,-46,-52,49,-47,-53,]),'+':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,98,101,103,105,106,114,117,118,119,120,121,122,123,125,127,128,129,131,141,142,143,144,145,146,147,149,150,151,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[45,45,-89,71,45,45,-74,45,45,45,-80,45,-88,-90,-91,-92,45,45,45,45,45,45,45,45,45,45,-77,-78,-75,-76,-79,45,45,-84,-85,45,45,45,-44,-41,-42,45,-67,-68,-69,-70,71,71,71,-82,-86,-87,-93,45,-39,-40,-43,45,45,45,45,45,-81,-83,-48,45,45,45,45,45,-45,-51,45,-46,-52,45,-47,-53,]),'-':([30,32,40,44,45,46,47,48,49,50,51,52,53,54,55,56,60,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,98,101,103,105,106,114,117,118,119,120,121,122,123,125,127,128,129,131,141,142,143,144,145,146,147,149,150,151,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[46,46,-89,72,46,46,-74,46,46,46,-80,46,-88,-90,-91,-92,46,46,46,46,46,46,46,46,46,46,-77,-78,-75,-76,-79,46,46,-84,-85,46,46,46,-44,-41,-42,46,-67,-68,-69,-70,72,72,72,-82,-86,-87,-93,46,-39,-40,-43,46,46,46,46,46,-81,-83,-48,46,46,46,46,46,-45,-51,46,-46,-52,46,-47,-53,]),'!':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,103,105,106,114,131,141,142,143,144,145,146,147,149,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-44,-41,-42,50,50,-39,-40,-43,50,50,50,50,50,-48,50,50,50,50,50,-45,-51,50,-46,-52,50,-47,-53,]),'NUMBER':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,103,105,106,114,131,141,142,143,144,145,146,147,149,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-44,-41,-42,54,54,-39,-40,-43,54,54,54,54,54,-48,54,54,54,54,54,-45,-51,54,-46,-52,54,-47,-53,]),'CHR':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,103,105,106,114,131,141,142,143,144,145,146,147,149,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-44,-41,-42,55,55,-39,-40,-43,55,55,55,55,55,-48,55,55,55,55,55,-45,-51,55,-46,-52,55,-47,-53,]),'STR':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,103,105,106,114,131,141,142,143,144,145,146,147,149,154,167,168,169,174,175,176,177,183,184,185,186,189,190,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-44,-41,-42,56,56,-39,-40,-43,56,56,56,56,56,-48,56,56,56,56,56,-45,-51,56,-46,-52,56,-47,-53,]),'.':([40,51,53,54,55,56,85,86,125,127,128,129,150,151,],[-89,87,-88,-90,-91,-92,-84,-85,-82,-86,-87,-93,-81,-83,]),'RARROW':([40,51,53,54,55,56,85,86,125,127,128,129,150,151,],[-89,88,-88,-90,-91,-92,-84,-85,-82,-86,-87,-93,-81,-83,]),'*':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,125,127,128,129,150,151,],[-89,73,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,73,73,-69,-70,73,73,73,-82,-86,-87,-93,-81,-83,]),'/':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,125,127,128,129,150,151,],[-89,74,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,74,74,-69,-70,74,74,74,-82,-86,-87,-93,-81,-83,]),'^':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,125,127,128,129,150,151,],[-89,75,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-81,-83,]),'>':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,125,127,128,129,150,151,],[-89,76,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,-67,-68,-69,-70,76,-72,-73,-82,-86,-87,-93,-81,-83,]),'<':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,117,118,119,120,121,122,123,125,127,128,129,150,151,],[-89,77,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,-67,-68,-69,-70,77,-72,-73,-82,-86,-87,-93,-81,-83,]),'?':([40,43,44,47,51,53,54,55,56,78,79,80,81,82,85,86,116,117,118,119,120,121,122,123,125,127,128,129,150,151,163,],[-89,70,-66,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,70,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-81,-83,-65,]),'}':([40,43,44,47,51,53,54,55,56,62,63,67,78,79,80,81,82,85,86,90,91,94,96,98,99,101,103,105,106,117,118,119,120,121,122,123,125,127,128,129,133,134,136,137,138,140,141,142,143,146,150,151,152,154,157,163,168,169,172,173,176,177,183,184,185,186,187,188,189,190,],[-89,-64,-66,-74,-80,-88,-90,-91,-92,93,-28,100,-77,-78,-75,-76,-79,-84,-85,130,-63,-27,135,-101,139,-38,-44,-41,-42,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-29,153,154,-49,-50,-37,-39,-40,-43,-101,-81,-83,-62,-48,166,-65,-101,-101,176,177,-45,-51,-101,-46,-52,-101,189,190,-47,-53,]),':':([40,44,47,51,53,54,55,56,78,79,80,81,82,85,86,116,117,118,119,120,121,122,123,125,127,128,129,150,151,163,],[-89,-66,-74,-80,-88,-90,-91,-92,-77,-78,-75,-76,-79,-84,-85,149,-67,-68,-69,-70,-71,-72,-73,-82,-86,-87,-93,-81,-83,-65,]),'IF':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,180,183,184,185,186,189,190,],[108,108,108,108,-44,-41,-42,-39,-40,-43,108,-48,108,108,-45,-51,108,108,-46,-52,108,-47,-53,]),'WHILE':([67,96,98,101,103,105,106,141,142,143,146,154,166,168,169,176,177,183,184,185,186,189,190,],[109,109,109,109,-44,-41,-42,-39,-40,-43,109,-48,170,109,109,-45,-51,109,-46,-52,109,-47,-53,]),'DO':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,183,184,185,186,189,190,],[110,110,110,110,-44,-41,-42,-39,-40,-43,110,-48,110,110,-45,-51,110,-46,-52,110,-47,-53,]),'FOR':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,183,184,185,186,189,190,],[111,111,111,111,-44,-41,-42,-39,-40,-43,111,-48,111,111,-45,-51,111,-46,-52,111,-47,-53,]),'BREAK':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,183,184,185,186,189,190,],[112,112,112,112,-44,-41,-42,-39,-40,-43,112,-48,112,112,-45,-51,112,-46,-52,112,-47,-53,]),'CONTINUE':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,183,184,185,186,189,190,],[113,113,113,113,-44,-41,-42,-39,-40,-43,113,-48,113,113,-45,-51,113,-46,-52,113,-47,-53,]),'RETURN':([67,96,98,101,103,105,106,141,142,143,146,154,168,169,176,177,183,184,185,186,189,190,],[114,114,114,114,-44,-41,-42,-39,-40,-43,114,-48,114,114,-45,-51,114,-46,-52,114,-47,-53,]),'ELSE':([176,],[180,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,21,22,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,67,96,98,101,146,168,169,183,186,],[5,5,5,104,104,104,104,104,104,104,104,104,]),'func_def':([0,2,3,],[7,7,7,]),'usual_dec':([0,2,3,67,96,98,101,146,147,168,169,183,186,],[8,8,8,8,8,8,8,8,160,8,8,8,8,]),'new_type_dec':([0,2,3,67,96,98,101,146,168,169,183,186,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'type':([0,2,3,29,34,63,67,68,96,98,101,146,147,168,169,183,186,],[10,10,10,36,64,64,97,36,97,97,97,97,97,97,97,97,97,]),'new_type':([0,2,3,67,96,98,101,146,168,169,183,186,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'declarators':([10,28,31,64,93,97,],[25,35,57,95,132,25,]),'declarator_1':([10,28,31,64,93,97,],[26,26,26,26,26,26,]),'declarator_2':([10,28,31,36,64,93,97,],[27,27,27,65,27,27,27,]),'params':([29,68,],[37,115,]),'param':([29,68,],[39,39,]),'expression':([30,32,52,60,67,83,84,96,98,101,114,131,144,145,146,147,167,168,169,174,175,183,186,],[42,59,89,91,102,124,91,102,102,102,148,91,155,156,102,161,161,102,102,178,161,102,102,]),'tern_expr':([30,32,52,60,67,70,83,84,96,98,101,114,131,144,145,146,147,149,167,168,169,174,175,183,186,],[43,43,43,43,43,116,43,43,43,43,43,43,43,43,43,43,43,163,43,43,43,43,43,43,43,]),'bin_expr':([30,32,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,114,131,144,145,146,147,149,167,168,169,174,175,183,186,],[44,44,44,44,44,44,117,118,119,120,121,122,123,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'pre_unary_expr':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,114,131,144,145,146,147,149,167,168,169,174,175,183,186,],[47,47,78,79,80,81,82,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'post_unary_expr':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,114,131,144,145,146,147,149,167,168,169,174,175,183,186,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'element':([30,32,45,46,48,49,50,52,60,67,70,71,72,73,74,75,76,77,83,84,96,98,101,114,131,144,145,146,147,149,167,168,169,174,175,183,186,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'initializer':([32,],[58,]),'new_type_params':([34,63,],[62,94,]),'new_type_param':([34,63,],[63,63,]),'expressions':([60,84,131,],[90,126,152,]),'statements':([67,96,98,101,146,168,169,183,186,],[99,134,137,140,137,137,137,137,137,]),'statement':([67,96,98,101,146,168,169,183,186,],[101,101,101,101,101,101,101,101,101,]),'conditional':([67,96,98,101,146,168,169,180,183,186,],[105,105,105,105,105,105,105,184,105,105,]),'iteration':([67,96,98,101,146,168,169,183,186,],[106,106,106,106,106,106,106,106,106,]),'jump':([67,96,98,101,146,168,169,183,186,],[107,107,107,107,107,107,107,107,107,]),'stats_or_null':([98,146,168,169,183,186,],[136,157,172,173,187,188,]),'empty':([98,146,147,167,168,169,175,183,186,],[138,138,162,162,138,138,162,138,138,]),'expr_or_null_or_init':([147,],[158,]),'expr_or_null':([147,167,175,],[159,171,179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',39),
  ('program -> external_decl program','program',2,'p_program','parser.py',40),
  ('program -> include','program',1,'p_program_end','parser.py',47),
  ('program -> external_decl','program',1,'p_program_end','parser.py',48),
  ('include -> INCLUDE','include',1,'p_include','parser.py',59),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',68),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',69),
  ('external_decl -> ;','external_decl',1,'p_external_declaration_extra_semicolon','parser.py',76),
  ('decl -> usual_dec','decl',1,'p_decl','parser.py',83),
  ('decl -> new_type_dec','decl',1,'p_decl','parser.py',84),
  ('usual_dec -> type declarators','usual_dec',2,'p_usual_decl','parser.py',91),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',100),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',107),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',114),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',121),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',128),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',135),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',142),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',149),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',156),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',157),
  ('new_type_dec -> new_type ID { new_type_params }','new_type_dec',5,'p_new_type_dec','parser.py',172),
  ('new_type_dec -> new_type ID { new_type_params } declarators','new_type_dec',6,'p_new_type_dec_winit','parser.py',179),
  ('new_type_dec -> new_type ID declarators','new_type_dec',3,'p_new_type_dec_wodef','parser.py',186),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',193),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',194),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',201),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',208),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',215),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',224),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',231),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',238),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',245),
  ('params -> param , params','params',3,'p_params','parser.py',252),
  ('params -> param','params',1,'p_params_end','parser.py',259),
  ('param -> type declarator_2','param',2,'p_param','parser.py',266),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',275),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',285),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',292),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',293),
  ('statement -> conditional','statement',1,'p_statement','parser.py',294),
  ('statement -> iteration','statement',1,'p_statement','parser.py',295),
  ('statement -> jump ;','statement',2,'p_statement','parser.py',296),
  ('statement -> ;','statement',1,'p_statement_extra_semicolon','parser.py',303),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',312),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',319),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',326),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',335),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',342),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',343),
  ('iteration -> WHILE ( expression ) { stats_or_null }','iteration',7,'p_iteration','parser.py',355),
  ('iteration -> DO { stats_or_null } WHILE ( expression ) ;','iteration',9,'p_iteration_do_while','parser.py',362),
  ('iteration -> FOR ( expr_or_null_or_init ; expr_or_null ; expr_or_null ) { stats_or_null }','iteration',11,'p_iteration_for','parser.py',369),
  ('expr_or_null -> expression','expr_or_null',1,'p_expr_or_null','parser.py',376),
  ('expr_or_null -> empty','expr_or_null',1,'p_expr_or_null','parser.py',377),
  ('expr_or_null_or_init -> expr_or_null','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',387),
  ('expr_or_null_or_init -> usual_dec','expr_or_null_or_init',1,'p_expr_or_null_or_init','parser.py',388),
  ('jump -> BREAK','jump',1,'p_jump','parser.py',395),
  ('jump -> CONTINUE','jump',1,'p_jump','parser.py',396),
  ('jump -> RETURN','jump',1,'p_jump','parser.py',397),
  ('jump -> RETURN expression','jump',2,'p_jump_wvalue','parser.py',404),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',415),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',422),
  ('expression -> tern_expr','expression',1,'p_expression_to_ternary','parser.py',429),
  ('tern_expr -> tern_expr ? tern_expr : tern_expr','tern_expr',5,'p_ternary_expr','parser.py',436),
  ('tern_expr -> bin_expr','tern_expr',1,'p_ternary_expr_to_binary','parser.py',443),
  ('bin_expr -> bin_expr + bin_expr','bin_expr',3,'p_binary_expr','parser.py',450),
  ('bin_expr -> bin_expr - bin_expr','bin_expr',3,'p_binary_expr','parser.py',451),
  ('bin_expr -> bin_expr * bin_expr','bin_expr',3,'p_binary_expr','parser.py',452),
  ('bin_expr -> bin_expr / bin_expr','bin_expr',3,'p_binary_expr','parser.py',453),
  ('bin_expr -> bin_expr ^ bin_expr','bin_expr',3,'p_binary_expr','parser.py',454),
  ('bin_expr -> bin_expr > bin_expr','bin_expr',3,'p_binary_expr','parser.py',455),
  ('bin_expr -> bin_expr < bin_expr','bin_expr',3,'p_binary_expr','parser.py',456),
  ('bin_expr -> pre_unary_expr','bin_expr',1,'p_binary_to_unary','parser.py',463),
  ('pre_unary_expr -> PLUSPLUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',497),
  ('pre_unary_expr -> MINUSMINUS pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',498),
  ('pre_unary_expr -> + pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',499),
  ('pre_unary_expr -> - pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',500),
  ('pre_unary_expr -> ! pre_unary_expr','pre_unary_expr',2,'p_pre_unary_expr','parser.py',501),
  ('pre_unary_expr -> post_unary_expr','pre_unary_expr',1,'p_pre_unary_to_post','parser.py',508),
  ('post_unary_expr -> post_unary_expr [ expression ]','post_unary_expr',4,'p_post_unary_expr_array','parser.py',515),
  ('post_unary_expr -> post_unary_expr ( )','post_unary_expr',3,'p_post_unary_fncall_empty','parser.py',522),
  ('post_unary_expr -> post_unary_expr ( expressions )','post_unary_expr',4,'p_post_unary_fncall','parser.py',529),
  ('post_unary_expr -> post_unary_expr PLUSPLUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',536),
  ('post_unary_expr -> post_unary_expr MINUSMINUS','post_unary_expr',2,'p_post_unary_ppmm','parser.py',537),
  ('post_unary_expr -> post_unary_expr . ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',544),
  ('post_unary_expr -> post_unary_expr RARROW ID','post_unary_expr',3,'p_post_unary_access_member','parser.py',545),
  ('post_unary_expr -> element','post_unary_expr',1,'p_post_unary_to_parenthesis','parser.py',552),
  ('element -> ID','element',1,'p_element','parser.py',559),
  ('element -> NUMBER','element',1,'p_element_const','parser.py',566),
  ('element -> CHR','element',1,'p_element_const','parser.py',567),
  ('element -> STR','element',1,'p_element_const','parser.py',568),
  ('element -> ( expression )','element',3,'p_element_paren_expr','parser.py',575),
  ('type -> VOID','type',1,'p_type','parser.py',584),
  ('type -> CHAR','type',1,'p_type','parser.py',585),
  ('type -> SHORT','type',1,'p_type','parser.py',586),
  ('type -> INT','type',1,'p_type','parser.py',587),
  ('type -> LONG','type',1,'p_type','parser.py',588),
  ('type -> FLOAT','type',1,'p_type','parser.py',589),
  ('type -> DOUBLE','type',1,'p_type','parser.py',590),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',597),
]
