
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADDEQ BREAK CHAR CHR CLASS DIVEQ DOUBLE ELSE FLOAT GEQ ID IF INCLUDE INT LEQ LONG MODEQ MULTEQ NUMBER RETURN SHORT STR STRUCT SUBEQ THEN VOID WHILE\n        program : include program\n                | external_decl program\n    \n        program : include\n                | external_decl\n    \n        include : INCLUDE\n    \n        external_decl   : decl ';'\n                        | func_def\n    \n        decl : type declarators\n    \n        decl : new_type_dec\n    \n        declarators : declarator_1 ',' declarators\n    \n        declarators : declarator_1\n    \n        declarator_1    : declarator_2\n    \n        declarator_1    : declarator_2 '=' initializer\n    \n        declarator_2    : ID\n    \n        declarator_2    : ID '(' ')'\n    \n        declarator_2    : ID '[' ']'\n    \n        declarator_2    : ID '[' expression ']'\n    \n        initializer : expression\n                    | '{' expressions '}'\n    \n        expressions : expression ',' expressions\n    \n        expressions : expression\n    \n        expression  : ID\n                    | NUMBER\n                    | CHR\n                    | STR\n    \n        new_type_dec    : new_type ID '{' new_type_params '}' ';'\n    \n        new_type    : STRUCT\n                    | CLASS\n    \n        new_type_params : new_type_param new_type_params \n    \n        new_type_params : new_type_param\n    \n        new_type_param : type declarators ';'\n    \n        func_def : type ID '(' params ')' '{' statements '}'\n    \n        func_def : type ID '(' ')' '{' statements '}'\n    \n        func_def : type ID '(' params ')' '{' '}'\n    \n        func_def : type ID '(' ')' '{' '}'\n    \n        params : param ',' params\n    \n        params : param\n    \n        param : type declarator_2\n    \n        statements : statement statements\n    \n        statements : statement\n    \n        statement   : expression ';'\n                    | decl ';'\n                    | assignment_expr ';'\n                    | conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}'\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE conditional\n    \n        conditional : IF '(' expression ')' '{' stats_or_null '}' ELSE '{' stats_or_null '}'\n    \n        stats_or_null   : statements\n                        | empty\n    \n        statement : '{' stats_or_null '}'\n    \n        assignment_expr : ID assignmenteq_op expression\n    \n        assignmenteq_op     : MULTEQ\n                            | ADDEQ\n                            | SUBEQ\n                            | MODEQ\n                            | DIVEQ\n    \n        type    : VOID \n                | CHAR \n                | SHORT \n                | INT \n                | LONG \n                | FLOAT \n                | DOUBLE\n    \n        empty :\n    "
    
_lr_action_items = {'INCLUDE':([0,2,3,4,6,21,66,80,90,97,],[4,4,4,-5,-7,-6,-35,-34,-33,-32,]),'VOID':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[9,9,9,-5,-7,-6,9,9,9,9,9,9,9,-35,9,-44,-31,-34,-33,-41,-42,-43,-32,-50,9,-45,9,-46,-47,]),'CHAR':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[10,10,10,-5,-7,-6,10,10,10,10,10,10,10,-35,10,-44,-31,-34,-33,-41,-42,-43,-32,-50,10,-45,10,-46,-47,]),'SHORT':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[11,11,11,-5,-7,-6,11,11,11,11,11,11,11,-35,11,-44,-31,-34,-33,-41,-42,-43,-32,-50,11,-45,11,-46,-47,]),'INT':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[12,12,12,-5,-7,-6,12,12,12,12,12,12,12,-35,12,-44,-31,-34,-33,-41,-42,-43,-32,-50,12,-45,12,-46,-47,]),'LONG':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[13,13,13,-5,-7,-6,13,13,13,13,13,13,13,-35,13,-44,-31,-34,-33,-41,-42,-43,-32,-50,13,-45,13,-46,-47,]),'FLOAT':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[14,14,14,-5,-7,-6,14,14,14,14,14,14,14,-35,14,-44,-31,-34,-33,-41,-42,-43,-32,-50,14,-45,14,-46,-47,]),'DOUBLE':([0,2,3,4,6,21,27,31,48,52,53,61,64,66,67,71,78,80,90,92,93,94,97,99,102,104,106,107,109,],[15,15,15,-5,-7,-6,15,15,15,15,15,15,15,-35,15,-44,-31,-34,-33,-41,-42,-43,-32,-50,15,-45,15,-46,-47,]),'STRUCT':([0,2,3,4,6,21,52,61,64,66,67,71,80,90,92,93,94,97,99,102,104,106,107,109,],[17,17,17,-5,-7,-6,17,17,17,-35,17,-44,-34,-33,-41,-42,-43,-32,-50,17,-45,17,-46,-47,]),'CLASS':([0,2,3,4,6,21,52,61,64,66,67,71,80,90,92,93,94,97,99,102,104,106,107,109,],[18,18,18,-5,-7,-6,18,18,18,-35,18,-44,-34,-33,-41,-42,-43,-32,-50,18,-45,18,-46,-47,]),'$end':([1,2,3,4,6,19,20,21,66,80,90,97,],[0,-3,-4,-5,-7,-1,-2,-6,-35,-34,-33,-32,]),';':([5,8,22,23,24,25,34,36,37,39,40,41,42,43,44,45,54,58,60,63,68,69,70,74,75,77,98,],[21,-9,-8,-14,-11,-12,-15,-22,-16,-23,-24,-25,-10,-14,-13,-18,-17,77,78,-22,92,93,94,-15,-19,-26,-51,]),'ID':([7,9,10,11,12,13,14,15,16,17,18,28,29,30,32,46,49,52,61,62,64,67,71,76,81,82,83,84,85,86,92,93,94,95,99,102,104,106,107,109,],[23,-57,-58,-59,-60,-61,-62,-63,26,-27,-28,36,43,36,43,36,43,63,63,43,63,63,-44,36,36,-52,-53,-54,-55,-56,-41,-42,-43,36,-50,63,-45,63,-46,-47,]),'(':([23,43,72,],[27,55,95,]),'=':([23,25,34,37,43,54,74,],[-14,30,-15,-16,-14,-17,-15,]),',':([23,24,25,34,35,36,37,39,40,41,43,44,45,50,54,57,74,75,],[-14,29,-12,-15,53,-22,-16,-23,-24,-25,-14,-13,-18,-38,-17,76,-15,-19,]),'[':([23,43,],[28,28,]),'{':([26,30,34,51,52,61,64,67,71,92,93,94,99,101,102,104,105,106,107,109,],[31,46,52,61,64,64,64,64,-44,-41,-42,-43,-50,102,64,-45,106,64,-46,-47,]),')':([27,33,35,36,37,39,40,41,43,50,54,55,73,74,100,],[34,51,-37,-22,-16,-23,-24,-25,-14,-38,-17,74,-36,-15,101,]),']':([28,36,38,39,40,41,],[37,-22,54,-23,-24,-25,]),'NUMBER':([28,30,46,52,61,64,67,71,76,81,82,83,84,85,86,92,93,94,95,99,102,104,106,107,109,],[39,39,39,39,39,39,39,-44,39,39,-52,-53,-54,-55,-56,-41,-42,-43,39,-50,39,-45,39,-46,-47,]),'CHR':([28,30,46,52,61,64,67,71,76,81,82,83,84,85,86,92,93,94,95,99,102,104,106,107,109,],[40,40,40,40,40,40,40,-44,40,40,-52,-53,-54,-55,-56,-41,-42,-43,40,-50,40,-45,40,-46,-47,]),'STR':([28,30,46,52,61,64,67,71,76,81,82,83,84,85,86,92,93,94,95,99,102,104,106,107,109,],[41,41,41,41,41,41,41,-44,41,41,-52,-53,-54,-55,-56,-41,-42,-43,41,-50,41,-45,41,-46,-47,]),'}':([36,39,40,41,47,48,52,56,57,59,61,64,65,67,71,78,79,87,88,89,91,92,93,94,96,99,102,103,104,106,107,108,109,],[-22,-23,-24,-25,58,-30,66,75,-21,-29,80,-64,90,-40,-44,-31,97,99,-48,-49,-39,-41,-42,-43,-20,-50,-64,104,-45,-64,-46,109,-47,]),'IF':([52,61,64,67,71,92,93,94,99,102,104,105,106,107,109,],[72,72,72,72,-44,-41,-42,-43,-50,72,-45,72,72,-46,-47,]),'MULTEQ':([63,],[82,]),'ADDEQ':([63,],[83,]),'SUBEQ':([63,],[84,]),'MODEQ':([63,],[85,]),'DIVEQ':([63,],[86,]),'ELSE':([104,],[105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,19,20,]),'include':([0,2,3,],[2,2,2,]),'external_decl':([0,2,3,],[3,3,3,]),'decl':([0,2,3,52,61,64,67,102,106,],[5,5,5,69,69,69,69,69,69,]),'func_def':([0,2,3,],[6,6,6,]),'type':([0,2,3,27,31,48,52,53,61,64,67,102,106,],[7,7,7,32,49,49,62,32,62,62,62,62,62,]),'new_type_dec':([0,2,3,52,61,64,67,102,106,],[8,8,8,8,8,8,8,8,8,]),'new_type':([0,2,3,52,61,64,67,102,106,],[16,16,16,16,16,16,16,16,16,]),'declarators':([7,29,49,62,],[22,42,60,22,]),'declarator_1':([7,29,49,62,],[24,24,24,24,]),'declarator_2':([7,29,32,49,62,],[25,25,50,25,25,]),'params':([27,53,],[33,73,]),'param':([27,53,],[35,35,]),'expression':([28,30,46,52,61,64,67,76,81,95,102,106,],[38,45,57,68,68,68,68,57,98,100,68,68,]),'initializer':([30,],[44,]),'new_type_params':([31,48,],[47,59,]),'new_type_param':([31,48,],[48,48,]),'expressions':([46,76,],[56,96,]),'statements':([52,61,64,67,102,106,],[65,79,88,91,88,88,]),'statement':([52,61,64,67,102,106,],[67,67,67,67,67,67,]),'assignment_expr':([52,61,64,67,102,106,],[70,70,70,70,70,70,]),'conditional':([52,61,64,67,102,105,106,],[71,71,71,71,71,107,71,]),'assignmenteq_op':([63,],[81,]),'stats_or_null':([64,102,106,],[87,103,108,]),'empty':([64,102,106,],[89,89,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> include program','program',2,'p_program','parser.py',30),
  ('program -> external_decl program','program',2,'p_program','parser.py',31),
  ('program -> include','program',1,'p_program_end','parser.py',38),
  ('program -> external_decl','program',1,'p_program_end','parser.py',39),
  ('include -> INCLUDE','include',1,'p_include','parser.py',50),
  ('external_decl -> decl ;','external_decl',2,'p_external_declaration','parser.py',59),
  ('external_decl -> func_def','external_decl',1,'p_external_declaration','parser.py',60),
  ('decl -> type declarators','decl',2,'p_decl','parser.py',67),
  ('decl -> new_type_dec','decl',1,'p_decl_struct','parser.py',74),
  ('declarators -> declarator_1 , declarators','declarators',3,'p_declarators','parser.py',83),
  ('declarators -> declarator_1','declarators',1,'p_declarator_end','parser.py',90),
  ('declarator_1 -> declarator_2','declarator_1',1,'p_declarator_1','parser.py',97),
  ('declarator_1 -> declarator_2 = initializer','declarator_1',3,'p_declarator_1_winit','parser.py',104),
  ('declarator_2 -> ID','declarator_2',1,'p_declarator_2_single','parser.py',111),
  ('declarator_2 -> ID ( )','declarator_2',3,'p_declarator_2_func','parser.py',118),
  ('declarator_2 -> ID [ ]','declarator_2',3,'p_declarator_2_array','parser.py',125),
  ('declarator_2 -> ID [ expression ]','declarator_2',4,'p_declarator_2_arrray','parser.py',132),
  ('initializer -> expression','initializer',1,'p_initializer','parser.py',139),
  ('initializer -> { expressions }','initializer',3,'p_initializer','parser.py',140),
  ('expressions -> expression , expressions','expressions',3,'p_expressions','parser.py',150),
  ('expressions -> expression','expressions',1,'p_expressions_end','parser.py',157),
  ('expression -> ID','expression',1,'p_expression','parser.py',164),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',165),
  ('expression -> CHR','expression',1,'p_expression','parser.py',166),
  ('expression -> STR','expression',1,'p_expression','parser.py',167),
  ('new_type_dec -> new_type ID { new_type_params } ;','new_type_dec',6,'p_new_type_dec','parser.py',178),
  ('new_type -> STRUCT','new_type',1,'p_new_type','parser.py',185),
  ('new_type -> CLASS','new_type',1,'p_new_type','parser.py',186),
  ('new_type_params -> new_type_param new_type_params','new_type_params',2,'p_new_type_params','parser.py',193),
  ('new_type_params -> new_type_param','new_type_params',1,'p_new_type_params_end','parser.py',200),
  ('new_type_param -> type declarators ;','new_type_param',3,'p_new_type_param','parser.py',207),
  ('func_def -> type ID ( params ) { statements }','func_def',8,'p_function_definition','parser.py',216),
  ('func_def -> type ID ( ) { statements }','func_def',7,'p_function_defintion_noparam','parser.py',223),
  ('func_def -> type ID ( params ) { }','func_def',7,'p_function_defintion_nostatement','parser.py',230),
  ('func_def -> type ID ( ) { }','func_def',6,'p_function_definition_nothing','parser.py',237),
  ('params -> param , params','params',3,'p_params','parser.py',244),
  ('params -> param','params',1,'p_params_end','parser.py',251),
  ('param -> type declarator_2','param',2,'p_param','parser.py',258),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',267),
  ('statements -> statement','statements',1,'p_statements_end','parser.py',274),
  ('statement -> expression ;','statement',2,'p_statement','parser.py',281),
  ('statement -> decl ;','statement',2,'p_statement','parser.py',282),
  ('statement -> assignment_expr ;','statement',2,'p_statement','parser.py',283),
  ('statement -> conditional','statement',1,'p_statement','parser.py',284),
  ('conditional -> IF ( expression ) { stats_or_null }','conditional',7,'p_conditional','parser.py',291),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE conditional','conditional',9,'p_conditional_elseif','parser.py',298),
  ('conditional -> IF ( expression ) { stats_or_null } ELSE { stats_or_null }','conditional',11,'p_conditional_else','parser.py',305),
  ('stats_or_null -> statements','stats_or_null',1,'p_statement_or_null','parser.py',312),
  ('stats_or_null -> empty','stats_or_null',1,'p_statement_or_null','parser.py',313),
  ('statement -> { stats_or_null }','statement',3,'p_block','parser.py',321),
  ('assignment_expr -> ID assignmenteq_op expression','assignment_expr',3,'p_assignment_expr','parser.py',328),
  ('assignmenteq_op -> MULTEQ','assignmenteq_op',1,'p_assignment_op','parser.py',336),
  ('assignmenteq_op -> ADDEQ','assignmenteq_op',1,'p_assignment_op','parser.py',337),
  ('assignmenteq_op -> SUBEQ','assignmenteq_op',1,'p_assignment_op','parser.py',338),
  ('assignmenteq_op -> MODEQ','assignmenteq_op',1,'p_assignment_op','parser.py',339),
  ('assignmenteq_op -> DIVEQ','assignmenteq_op',1,'p_assignment_op','parser.py',340),
  ('type -> VOID','type',1,'p_type','parser.py',349),
  ('type -> CHAR','type',1,'p_type','parser.py',350),
  ('type -> SHORT','type',1,'p_type','parser.py',351),
  ('type -> INT','type',1,'p_type','parser.py',352),
  ('type -> LONG','type',1,'p_type','parser.py',353),
  ('type -> FLOAT','type',1,'p_type','parser.py',354),
  ('type -> DOUBLE','type',1,'p_type','parser.py',355),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',362),
]
